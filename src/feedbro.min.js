var feedbro = feedbro || {};
feedbro.ActionHandler = function () {
    var f = new feedbro.Strings();
    var a;
    var c;
    var b;
    var d = [];
    this.setSoundPlayer = function (g) {
        a = g;
    };
    this.setNotifications = function (g) {
        b = g;
    };
    this.setBackground = function (g) {
        c = g;
    };
    this.init = function () {
    };
    this.processActions = function (r, l, n, o) {
        var q, g, m, s = false, j = {};
        if (o == undefined) {
            o = {};
        }
        for (m = 0; m < l.length; m++) {
            var k = l[m];
            q = k.type;
            g = (j[q] == 1);
            if (o[q]) {
                continue;
            }
            if (q == 1 && !g) {
                if (b != undefined) {
                    s = true;
                }
            } else {
                if (q == 2 && !g) {
                    if (n != undefined) {
                        n.css({display: 'none'});
                        n.removeClass('entry item');
                    }
                    c.markUnread(r.id, 0);
                } else {
                    if (q == 3 && !g) {
                        if (n != undefined) {
                            n.css({display: 'none'});
                            n.removeClass('entry item');
                        }
                        c.markUnread(r.id, 0);
                        c.markDeleted(r.id, 1);
                    } else {
                        if (q == 4 && !g) {
                            if (r.starred != 1) {
                                r.starred = 1;
                                c.setItemStarred(r.id, 1);
                            }
                        } else {
                            if (q == 5 && !g) {
                                if (r.unread != 0) {
                                    r.unread = 0;
                                    c.markUnread(r.id, 0);
                                }
                            } else {
                                if (q == 6 && !g) {
                                    a.queue('sound/' + k.value);
                                } else {
                                    if (q == 7 && !g) {
                                        if (n != undefined) {
                                            n.css({'border-left': '2px solid ' + k.value});
                                        }
                                    } else {
                                        if (q == 8) {
                                            if (n != undefined && k.value != undefined && k.value != '') {
                                                try {
                                                    f.highlightItemContent(r, k.value, 'highlight-text');
                                                } catch (p) {
                                                    console.log('highlight text with regexp failed', p);
                                                }
                                            }
                                        } else {
                                            if (q == 9) {
                                                if (k.value != undefined && k.value != '') {
                                                    c.addTag(r.id, k.value);
                                                }
                                            } else {
                                                if (q == 11) {
                                                    var h = JSON.stringify({
                                                        value1: r.link,
                                                        value2: r.title,
                                                        value3: r.author
                                                    });
                                                    d.push({url: k.value + '', postData: h, link: r.link + ''});
                                                    e();
                                                } else {
                                                    if (q == 12) {
                                                        var t = parseInt(k.value, 10);
                                                        if (!isNaN(t)) {
                                                            c.addPoints(r.id, t);
                                                        }
                                                    } else {
                                                        if (q == 13 && !g) {
                                                            a.queue(k.value);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            j[q] = 1;
        }
        if (s) {
            b.createItemNotification(r);
        }
    };

    function e() {
        if (d.length > 0) {
            var g = d.shift();
            $.ajax({
                type: 'POST',
                url: g.url,
                data: g.postData,
                timeout: (30 * 1000),
                processData: false,
                cache: false,
                contentType: 'application/json; charset=UTF-8',
                success: function (i, h, j) {
                },
                error: function (i, h, j) {
                    console.log('IFTTT Maker Channel FAILED with URL: ' + g.url + ' for ' + g.link + ' HTTP Status: ' + h);
                }
            });
        }
    }
};
var feedbro = feedbro || {};
feedbro.Background = function () {
    var n;
    var g = [];
    var o = new feedbro.FeedTree();
    var S = new feedbro.Settings();
    var p = new feedbro.FeedEntryManager('feedbro');
    var B;
    var i = new Date().getTime();
    var F = new Date().getTime();
    var l = this;
    var R = new feedbro.RuleEngine();
    var C = new feedbro.Notifications();
    var s = new feedbro.SoundPlayer();
    var k = new feedbro.ActionHandler();
    var d;
    var t;
    var X = -1;
    var T;
    var e;
    var u = false;
    var c = 'id';
    var x = 'license';
    var V = 'https://cloud.nodetics.com/shop/validate.php';
    var O = 'https://cloud.nodetics.com/shop/feedbro/';
    var U = new feedbro.Strings();
    var J = false;
    var h = 14 * 24 * 60 * 60 * 1000;
    var Y;

    function w(aa, Z) {
        if (!J) {
            return;
        }
        if (Z) {
            console.log(aa, Z);
        } else {
            console.log(aa);
        }
    }

    function P(Z) {
        return new feedbro.FeedParser(Z);
    }

    this.installLocale = function (aa, Z, ab) {
        Locale.download(aa, function (ac) {
            l.getSettings().setLocaleMeta(ac.meta);
            l.getSettings().setLocale('custom');
            l.saveSettings();
            Locale.locales.custom = ac;
            Locale.selectLocale('custom');
            feedbro.Persistence.saveValue('locale', ac, function () {
                console.log('Saved custom locale');
                Z(200);
            });
        }, ab);
    };
    this.selectLocale = function (Z) {
        Locale.selectLocale(Z);
        l.getSettings().setLocale(Z);
        l.saveSettings();
    };
    this.getDefaultLocaleMap = function () {
        return Locale.defaultLocale;
    };
    this.getActiveLocaleMap = function () {
        return Locale.activeMap;
    };
    this.getFeedQueue = function () {
        return g;
    };
    this.getFeedEntryManagerErrorStatus = function () {
        return p.getErrorStatus();
    };
    this.setDebugMode = function (Z) {
        J = Z;
    };
    this.getDbIndex = function () {
        return p.getDbIndex();
    };
    this.setLastFolderId = function (Z) {
        t = Z;
    };
    this.getLastFolderId = function () {
        return t;
    };
    this.debug = function (aa, Z) {
        w(aa, Z);
    };
    this.getSettings = function () {
        return S;
    };
    this.getFeedEntries = function () {
        return n;
    };
    this.getFeedTree = function () {
        return o;
    };
    this.getNotificationEngine = function () {
        return C;
    };
    this.terminate = function () {
        if (B) {
            clearInterval(B);
            w('unreadScan terminated');
        }
    };
    this.getEntry = function (Z) {
        p.getEntry(Z, function (aa) {
            console.log(JSON.stringify(aa));
        });
    };
    this.clearAll = function (Z) {
        g = [];
        p.clear(Z);
        o = new feedbro.FeedTree();
        l.notifyEngine('reloaddata');
        l.invalidateTagCloudCache();
        this.updateTotalUnread();
        this.saveData();
    };
    this.setFeedScanInterval = function (Z) {
        if (B) {
            clearInterval(B);
        }
        console.log('setFeedScanInterval: ' + Z + ' s');
        B = setInterval(l.scanUnread, Z * 1000);
        setTimeout(l.scanUnread, 2 * 1000);
    };

    function I(ae, ad) {
        if (S.getDisableAutoScan() == true) {
            return false;
        }
        var aa = new Date().getTime();
        var Z = l.getFeedScanDelay(ae.data.id);
        var ac = !ae.data.lastupdate;
        var ab = (aa - ae.data.lastupdate) > Z;
        var ag = (ae.data.status == 398);
        var af = ((aa - ae.data.lastupdate) > (1 * 60 * 1000));
        return (ae.data.type == feedbro.FeedTree.FEED && (ac || ab || (ag && af)));
    }

    this.escapeHtml = function (Z) {
        return Z ? Z.replace(/[&<>"'`]/g, function (aa) {
            return '&#' + aa.charCodeAt(0) + ';';
        }) : Z;
    };

    function Q(ad) {
        var ae = ad.htmlUrl ? ' htmlUrl="' + ad.htmlUrl.replace(/&/g, '&amp;').replace(/"/g, '%22') + '"' : '';
        var ac = ad.url ? ad.url.replace(/&/g, '&amp;').replace(/"/g, '%22') : '';
        var Z = ad.maxitems ? ' maxItems="' + ad.maxitems + '"' : '';
        var ab = ad.entrycontent && ad.entrycontent != 1 ? ' entryContent="' + ad.entrycontent + '"' : '';
        var aa = ad.scandelay ? ' scanDelay="' + ad.scandelay + '"' : '';
        return '      <outline text="' + l.escapeHtml(ad.name) + '" title="' + l.escapeHtml(ad.realname || ad.name) + '" type="rss" \n            xmlUrl="' + ac + '"' + ae + Z + ab + aa + '/>\n';
    }

    this.exportOpml = function () {
        var Z = '<?xml version="1.0" encoding="UTF-8"?>\n<opml version="1.0">\n<head>\n<title>Feed Subscriptions</title>\n</head>\n<body>\n';
        o.processNodes(o.getRoot(), function aa(ac, ae) {
            var ab, ad = ac.data;
            if (ad.type == feedbro.FeedTree.FOLDER) {
                Z += '  <outline title="' + l.escapeHtml(ad.name) + '" text="' + l.escapeHtml(ad.name) + '">\n';
                for (ab = 0; ab < ac.children.length; ab++) {
                    Z += Q(ac.children[ab].data);
                }
                Z += '  </outline>\n';
            } else {
                if (ad.type == feedbro.FeedTree.FEED) {
                    Z += Q(ad);
                } else {
                    console.log('exportOpml: Unidentified node type: ' + ad.type);
                }
            }
        }, feedbro.FeedTree.MODE_TOPNODES);
        Z += '</body>\n</opml>';
        return Z;
    };
    this.getTreeData = function () {
        return o.getData();
    };
    this.getFolderUnreadCount = function (ad) {
        var ac = o.getNode(ad);
        var ab = ac.children;
        var Z = 0;
        var aa;
        for (aa = 0; aa < ab.length; aa++) {
            if (ab[aa].data.purge != 1) {
                Z += ab[aa].data.unread;
            }
        }
        ac.data.unread = Z;
        return Z;
    };
    this.moveNode = function (ae, ab, aa) {
        var af;
        if (aa == 'before') {
            af = feedbro.FeedTree.BEFORE;
        } else {
            if (aa == 'after') {
                af = feedbro.FeedTree.AFTER;
            } else {
                if (aa == 'inside') {
                    af = feedbro.FeedTree.INSIDE_FIRST;
                } else {
                    if (aa == 'inside-last') {
                        af = feedbro.FeedTree.INSIDE_LAST;
                    } else {
                        w('moveNode: Invalid position for move: ' + aa);
                    }
                }
            }
        }
        var Z = o.getNode(ae);
        var ad = o.getNode(ab);
        o.moveNode(Z, ad !== undefined ? ad : o.getRoot(), af);
        if (Z.data.type == 1) {
            var ac = Z.parent.data ? Z.parent.data.id : -1;
            p.moveFeed(Z.data.id, ac);
        }
    };

    function a(Z) {
        var aa = Z >= 10000 ? 9999 : Z;
        chrome.browserAction.setBadgeText({text: aa > 0 ? String(aa) : ''});
    }

    this.updateTotalUnread = function () {
        var Z = 0;
        o.processNodes(o.getRoot(), function (aa) {
            if (aa.data.type == feedbro.FeedTree.FEED && aa.data.purge != 1) {
                Z += aa.data.unread;
            }
        }, feedbro.FeedTree.MODE_DEPTHFIRST);
        a(Z);
    };
    this.getFolders = function () {
        var Z = [];
        o.processNodes(o.getRoot(), function (aa) {
            if (aa.data.type == feedbro.FeedTree.FOLDER) {
                Z.push(aa.data);
            }
        }, feedbro.FeedTree.MODE_TOPNODES);
        return Z;
    };
    this.addFeed = function (ab, aa, ae, Z) {
        if (!aa) {
            aa = ae;
        }
        var af = {url: ab, realname: ae, name: aa, lastread: 0, lastupdate: 0, unread: 0, type: feedbro.FeedTree.FEED};
        var ad = o.getNode(Z);
        var ac = o.addNode(af, ad);
        return ac.data.id;
    };
    this.getFeedMaxItems = function (Z) {
        var aa = o.getNode(Z);
        var ab = 0;
        if (aa && aa.data.maxitems) {
            ab = aa.data.maxitems;
        }
        return ab > 0 ? ab : S.getFeedMaxEntries();
    };
    this.getFeedScanDelay = function (Z) {
        var ab = o.getNode(Z);
        var aa;
        if (ab && ab.data.scandelay) {
            aa = ab.data.scandelay * 60 * 1000;
        } else {
            aa = S.getPollDelay() * 60 * 1000;
        }
        return aa >= 60000 ? aa : 60000;
    };
    this.processNodes = function (aa, Z) {
        o.processNodes(o.getRoot(), function (ab) {
            aa(ab);
        }, Z || feedbro.FeedTree.MODE_TOPNODES);
    };
    this.markAllAsRead = function () {
        var Z = new Date();
        o.processNodes(o.getRoot(), function (aa) {
            aa.data.unread = 0;
        }, feedbro.FeedTree.MODE_DEPTHFIRST);
        p.markRead({});
        l.saveData();
        l.notifyEngine('reloaddata');
        a(0);
    };
    this.markAsRead = function (ad) {
        var ab = o.getNode(ad);
        var aa, ac, Z = new Date();
        if (ab && ab.data.type == 1) {
            ab.data.unread = 0;
            p.markRead({feedid: ad});
            l.saveData();
            l.notifyEngine('updatenode', ad, -1);
        } else {
            if (ab && ab.data.type == 2) {
                for (aa = 0; aa < ab.children.length; aa++) {
                    ac = ab.children[aa].data;
                    ac.unread = 0;
                }
                ab.data.unread = 0;
                p.markRead({folderid: ad});
                l.saveData();
                l.notifyEngine('reloaddata');
                l.updateTotalUnread();
            } else {
                w('markAsRead: Unidentified feed or folder id: ' + ad);
            }
        }
    };
    this.markUnread = function (ae, ab) {
        var ac = p.getFeedEntryMeta(ae);
        var ad = false;
        if (ac && ac.unread != ab) {
            ac.unread = ab;
            ac.dirty = 1;
            var Z = o.getNode(ac.feedid);
            if (!Z) {
                console.log('ERROR: markUnread: feed not found: ' + ac.feedid + ' coming from ID: ' + ae + ' and meta: ' + JSON.stringify(ac));
                return false;
            }
            var aa = Z.data;
            if (ab == 0) {
                aa.unread--;
                if (aa.unread < 0) {
                    aa.unread = 0;
                }
            } else {
                aa.unread++;
            }
            l.notifyEngine('updatenode', ac.feedid, -1);
            ad = true;
        } else {
            if (!ac) {
                console.log('ERROR: markUnread: no meta data for ' + ae);
            }
        }
        return ad;
    };
    this.markDeleted = function (ac, Z) {
        var aa = p.getFeedEntryMeta(ac);
        var ab = false;
        if (aa) {
            if (Z == true || Z == 1) {
                aa.purge = 1;
            } else {
                aa.purge = 0;
            }
            aa.dirty = 1;
            l.invalidateTagCloudCache();
            ab = true;
        }
        return ab;
    };
    this.sortFolder = function (Z) {
        if (o.sortChildren(Z)) {
            l.notifyEngine('reloaddata', -1, -1);
            l.saveTreeData();
        }
    };
    this.getNodesWithUrl = function (Z) {
        var aa = [];
        o.processNodes(o.getRoot(), function (ab) {
            if (ab.data.url == Z) {
                aa.push(ab);
            }
        }, feedbro.FeedTree.MODE_RANDOM);
        return aa;
    };
    this.addFolder = function (Z) {
        var ab = {name: Z, unread: 0, type: feedbro.FeedTree.FOLDER};
        var aa = o.addNode(ab);
        return aa.data.id;
    };
    this.updateTheme = function () {
        l.notifyEngine('updatetheme', -1, -1);
    };
    this.updateCss = function () {
        l.notifyEngine('updatecss', -1, -1);
    };
    this.notifyEngine = function (aa, ac, ab) {
        try {
            chrome.tabs.query({title: 'Feedbro'}, function (af) {
                if (af.length > 0) {
                    try {
                        var ad = af[0].id;
                        chrome.tabs.sendMessage(ad, {action: aa, id: ac, parentid: ab}, function (ag) {
                        });
                    } catch (ae) {
                        w('notifyEngine: Could not notify Feedbro tab', ae);
                    }
                }
            });
        } catch (Z) {
            w('Unable to send notification to content scripts: ' + Z);
        }
    };
    this.deleteFolder = function (aa) {
        w('deleteFolder: ' + aa);
        o.deleteNode(o.getNode(aa));
        var Z = p.deleteFeedEntries({folderid: aa});
        w('done: ' + Z.length + ' affected');
    };
    this.deleteFeed = function (aa) {
        w('deleteFeed: ' + aa);
        o.deleteNode(o.getNode(aa));
        var Z = p.deleteFeedEntries({feedid: aa});
        w('done: ' + Z.length + ' affected');
    };
    this.toggleItemStarred = function (aa) {
        var Z = p.getFeedEntryMeta(aa);
        if (Z.starred == 1) {
            p.updateFeedEntryMeta(aa, {starred: 0});
        } else {
            p.updateFeedEntryMeta(aa, {starred: 1, purge: 0});
        }
    };
    this.getFolderData = function (Z) {
        return o.getNode(Z).data;
    };
    this.getFeedUnreadCount = function (Z) {
        return o.getNode(Z).data.unread;
    };

    function K(aa, Z) {
        var ab = aa.publishedDate;
        var ac = Z.publishedDate;
        if (ab == ac) {
            return 0;
        }
        return ab > ac ? -1 : 1;
    }

    function G(aa, Z) {
        var ab = aa.publishedDate;
        var ac = Z.publishedDate;
        if (ab == ac) {
            return 0;
        }
        return ab > ac ? 1 : -1;
    }

    function r(Z) {
        var ab, ac, ae = new feedbro.TagFilter();
        if (S.getFilterIframe()) {
            ae.addTagFilter('iframe');
        }
        if (S.getFilterEmbed()) {
            ae.addTagFilter('embed');
        }
        var ad;
        for (ab = 0; ab < Z.length; ab++) {
            ac = Z[ab];
            try {
                ad = o.getNode(ac.feedid);
                if (ad && ad.data && ad.data.name) {
                    ac.feed.title = ad.data.name;
                }
            } catch (aa) {
            }
            try {
                ae.setUrl(ac.feed.link);
                ac.content = ae.filter(ac.content || '');
                ac.title = ae.filter(ac.title || '');
                ac.author = ae.filter(ac.author || '');
                ac.feed.title = ae.filter(ac.feed.title || '');
            } catch (aa) {
                console.log(' Could not filter ' + ac.title);
            }
            try {
                if (ac.decoded != 1) {
                    ac.content = U.decodeHtmlEntities(ac.content || '');
                    ac.title = U.decodeHtmlEntities(ac.title || '');
                    ac.author = U.decodeHtmlEntities(ac.author || '');
                }
            } catch (aa) {
                console.log(' Could not convert html entities properly for ' + ac.title);
            }
        }
        n = Z;
    }

    function D(aa, ad, ac) {
        if (l.isUnreadSearch(aa)) {
            aa.unread = 1;
        }
        var ab = S.getMaxItemAge();
        if (ab > 0) {
            var Z = new Date().getTime() - ab;
            if (!aa.mindate || Z > aa.mindate) {
                aa.mindate = Z;
            }
        }
        if (aa.sort == undefined) {
            aa.sort = S.getItemSortOrder();
        }
        p.getFeedEntries(aa, function (ae) {
            r(ae);
            ac(ad);
        });
    }

    function v(ad, aa) {
        var ab = o.getNode(ad);
        if (ab) {
            var ac = ab.data;
            var Z = false;
            if (ac.latestitem == undefined || ac.latestitem == 0) {
                Z = true;
            }
            ac.lastModified = aa.lastModified != undefined ? (aa.lastModified) + '' : undefined;
            ac.etag = aa.etag != undefined ? (aa.etag + '') : undefined;
            ac.lastupdate = new Date().getTime();
            if (aa.feed.latestitemdate) {
                ac.latestitem = aa.feed.latestitemdate.getTime();
            }
            if (aa.feed.link) {
                ac.htmlUrl = aa.feed.link + '';
            }
            if (ac.name == 'Unnamed feed') {
                ac.name = aa.feed.title + '';
                ac.realname = aa.feed.title + '';
            }
            ac.status = aa.status + 0;
            ac.latency = aa.latency + 0;
            return Z;
        } else {
            w('updateFeedMap: non-existent node: ' + ad);
            return false;
        }
    }

    this.invalidateTagCloudCache = function () {
        d = undefined;
    };
    this.getFeedManager = function () {
        return p;
    };

    function b(aa) {
        var ab = l.getFeedMaxItems(aa.feedid);
        p.deleteFeedEntries({feedid: aa.feedid, start: ab, starred: 0});
        var Z = o.getNode(aa.feedid);
        Z.data.unread = p.queryIndex({feedid: aa.feedid, unread: 1}).length;
        l.notifyEngine('updatenode', aa.feedid, -1);
        l.invalidateTagCloudCache();
    }

    function L(af, aa) {
        var ae = g.shift();
        if (!ae) {
            w('updateNextFeed: feedQueue is empty. Finished.');
            l.updateTotalUnread();
            l.saveData(true);
            return;
        }
        var ab = o.getNode(ae);
        if (!ab) {
            w('updateNextFeed: node with id ' + ae + ' was not found in the tree.');
            L(af, aa);
            return;
        }
        if (!aa && !I(ab)) {
            w('Skipping feed ' + ab.data.name + ', no need to check');
            L(af, aa);
            return;
        }
        var ad = ab.data;
        if (!ad.latestitem) {
            ad.latestitem = 0;
        }
        var ac = P(U.createProxyURL(ad.url, ad.proxy));
        ac.setIndex(l.getDbIndex());
        var Z = ad.maxitems;
        if (Z == undefined || Z == '' || Z < 1) {
            Z = S.getFeedMaxEntries();
        }
        ac.setMaxEntries(Z);
        ac.setTimeout(S.getFeedTimeout());
        ac.setLastModifiedHeader(ad.lastModified);
        ac.setETagHeader(ad.etag);
        ac.setEntryDateLimit(ad.lastread || 0);
        if (ad.username && ad.password) {
            ac.setAuthentication(ad.username, ad.password);
        }
        if (ad.entrycontent >= 2) {
            ac.setFullFeed(true);
        }
        if (ad.entrycontent == 3) {
            ac.setAddMetaImage(false);
        }
        ac.load(function (ag) {
            A(ag, ae, af, aa);
        });
    }

    function A(af, aa, an, ad) {
        var ab = o.getNode(aa);
        var al = ab.data;
        var ao = ab.parent && ab.parent.data ? ab.parent.data.id : -1;
        if (af.status == 304 && (al.status !== 200 && al.status !== 398 && al.status !== 399 && al.status !== 500 && al.status !== 502 && al.status !== 503 && al.status !== 504 && al.status !== 403 && al.status !== 404)) {
            af.status = al.status;
        }
        var ag = v(aa, af);
        if (!af.error && af.status == 200) {
            var am = {title: af.feed.title, link: af.feed.link, author: af.feed.author};
            var ah = [];
            var ae, ak, Z, aj = 0, ai = new Date().getTime();
            for (ae = 0; ae < af.feed.entries.length; ae++) {
                ak = af.feed.entries[ae];
                ak.feed = am;
                Z = ak.publishedDate.getTime();
                if (Z > aj && Z <= ai) {
                    aj = Z;
                }
                if (Z > al.lastread) {
                    ah.push(ak);
                }
            }
            if (aj > al.lastread) {
                al.lastread = aj;
            }
            if (ah.length > 0) {
                w('Saving ' + ah.length + ' entries for feed ' + aa + ' ' + al.name + ' in folder ' + ao);
                p.saveFeedEntries(ah, aa, ao, ag, function ac(ap) {
                    b(ap);
                    l.saveTreeData();
                    L(an, ad);
                });
            } else {
                L(an, ad);
            }
        } else {
            L(an, ad);
        }
    }

    this.loadFeedItems = function (Z) {
        g.unshift(Z);
        if (g.length == 1) {
            L(undefined, true);
        }
    };
    this.loadFolderFeeds = function (ac) {
        var ab = o.getNode(ac);
        if (!ab) {
            console.log('loadFolderFeeds: non-existing folder with id: ' + ac);
            return;
        }
        var aa = ab.children;
        if (!aa || aa.length == 0) {
            console.log('loadFolderFeeds: no children for folder with id: ' + ac);
            return;
        }
        var Z;
        for (Z = 0; Z < aa.length; Z++) {
            g.unshift(aa[Z].data.id);
        }
        if (g.length == aa.length) {
            L(undefined, true);
        }
    };
    this.saveSettings = function () {
        w('Saving settings...');
        feedbro.Persistence.saveValue('feedSettings', S.toJson(), function () {
            w('Done.');
        });
    };

    function N(Z) {
        feedbro.Persistence.loadValue('feedSettings', function (aa) {
            if (aa != undefined) {
                S.fromJson(aa);
                w('Settings loaded.');
            } else {
                w('No stored settings yet.');
            }
            y(Z);
        });
    }

    function y(ab) {
        var aa = S.getLocale();
        var Z = S.getLocaleMeta();
        if (Z != undefined) {
            feedbro.Persistence.loadValue('locale', function (ac) {
                if (ac != undefined) {
                    Locale.addLocale(ac, 'custom');
                    Locale.selectLocale(aa);
                }
                if (ab) {
                    ab();
                }
            });
        } else {
            Locale.selectLocale(aa);
            if (ab) {
                ab();
            }
        }
    }

    this.saveDatabase = function () {
        w('Saving database data...');
        p.save();
    };
    this.saveData = function (aa) {
        if (u == false) {
            console.log('Feedbro was not properly initialized! saveData call skipped!');
            return;
        }
        var Z = new Date().getTime();
        if (aa || (Z - i) > 10000) {
            l.saveTreeData();
            p.save();
            i = new Date().getTime();
            w('Saving data done.');
        }
    };
    this.isInitialized = function () {
        return u;
    };
    this.saveTreeData = function () {
        if (u) {
            feedbro.Persistence.saveValue('feedTree', o.toJson());
        } else {
            console.log('ERROR: Feed tree saving skipped! Feedbro did not initialize properly due to chrome.storage.local problems. Please restart the browser.');
        }
    };

    function m(Z) {
        w('Loading feed subscription data...');
        feedbro.Persistence.loadValue('feedTree', function (aa) {
            if (aa != undefined) {
                o.fromJson(aa);
                w('Done.');
            } else {
                w('No stored feed subscription data yet.');
            }
            if (Z) {
                Z();
            }
        });
    }

    function z(Z, aa) {
        Z.folderid = Z.id;
        if (!Z.count) {
            Z.count = 30;
        }
        D(Z, Z.id, aa);
    }

    function W(aa, Z, ab) {
        aa.feedid = aa.id;
        if (!aa.count) {
            aa.count = 30;
        }
        D(aa, aa.id, ab);
    }

    function q(Z, aa) {
        Z.starred = 1;
        D(Z, Z.id, aa);
    }

    function f(Z, aa) {
        if (!Z.count) {
            Z.count = 30;
        }
        D(Z, Z.id, aa);
    }

    function E(Z, aa) {
        p.getFeedEntries(Z, function (ab) {
            r(ab);
            aa(Z.id);
        });
    }

    this.isUnreadSearch = function (Z) {
        return S.getOnlyUnread() && (!Z.starred || Z.starred == 0);
    };
    this.handleMessageEvent = function (aa, Z, ac) {
        var ab;
        if (aa.action == 'loadgroupdao') {
            ab = o.getNode(aa.id);
            if (ab && ab.data.type == feedbro.FeedTree.FOLDER) {
                z(aa, ac);
            }
        }
        if (aa.action == 'loadsingledao') {
            ab = o.getNode(aa.id);
            if (ab) {
                W(aa, ab.data.url, ac);
            }
        }
        if (aa.action == 'loadstarred') {
            q(aa, ac);
        }
        if (aa.action == 'loadall') {
            f(aa, ac);
        }
        if (aa.action == 'loadsingle') {
            E(aa, ac);
        }
        if (aa.action == 'loadtag') {
            if (!aa.count) {
                aa.count = 30;
            }
            D(aa, aa.id, ac);
        }
        if (aa.action == 'getlicense') {
            ac({status: X, license: T, installDate: e});
        }
        return true;
    };
    this.discoverFeed = function (Z, ab) {
        var aa = P(Z);
        aa.setIndex(l.getDbIndex());
        aa.setTimeout(25000);
        aa.findFeeds(function (ac) {
            ab(ac);
        });
    };
    this.setPopupEnabled = function (Z) {
        console.log('Popup enabled: ' + Z);
        try {
            if (Z) {
                chrome.browserAction.onClicked.removeListener(H);
                chrome.browserAction.setPopup({popup: 'mainmenu.html'});
            } else {
                chrome.browserAction.setPopup({popup: ''});
                chrome.browserAction.onClicked.addListener(H);
            }
        } catch (aa) {
            console.log('setPopupEnabled, error: ', aa);
        }
    };

    function H(Z) {
        j('Feedbro', 'reader.html');
    }

    function j(aa, Z) {
        chrome.tabs.query({title: aa}, function (ab) {
            if (ab.length > 0) {
                chrome.tabs.update(ab[0].id, {active: true});
                if (l.getSettings().getIconClickReloads()) {
                    l.notifyEngine('updateview', -1, -1);
                }
            } else {
                chrome.tabs.create({url: chrome.runtime.getURL(Z)}, function (ac) {
                    w('openTab');
                });
            }
        });
    }

    this.addTag = function (ac, Z) {
        var aa, ab = p.getFeedEntryMeta(ac);
        if (ab == undefined) {
            return false;
        }
        if (ab.tags == undefined) {
            ab.tags = [];
        }
        for (aa = 0; aa < ab.tags.length; aa++) {
            if (ab.tags[aa] == Z) {
                console.log('addTag: tag ' + Z + ' already exists for entry ' + ac);
                return false;
            }
        }
        ab.tags.push(Z);
        ab.dirty = 1;
        l.invalidateTagCloudCache();
        return true;
    };
    this.removeTag = function (ac, Z) {
        var aa, ab = p.getFeedEntryMeta(ac);
        if (ab == undefined) {
            return false;
        }
        if (ab.tags == undefined) {
            return false;
        }
        for (aa = 0; aa < ab.tags.length; aa++) {
            if (ab.tags[aa] == Z) {
                ab.tags.splice(aa, 1);
                ab.dirty = 1;
                l.invalidateTagCloudCache();
                return true;
            }
        }
        console.log('removeTag: did not find tag ' + Z + ' for entry: ' + ac);
        return false;
    };
    this.addPoints = function (ab, Z) {
        var aa = p.getFeedEntryMeta(ab);
        if (aa == undefined) {
            return false;
        }
        if (aa.points == undefined) {
            aa.points = 0;
        }
        aa.points += Z;
        aa.dirty = 1;
        return aa.points;
    };
    this.setItemStarred = function (ab, Z) {
        var aa = p.getFeedEntryMeta(ab);
        if (aa != undefined && Z != undefined) {
            p.updateFeedEntryMeta(ab, {starred: Z});
        }
    };
    this.getRuleEngine = function () {
        return R;
    };
    this.getSoundPlayer = function () {
        return s;
    };
    this.getTagCloud = function (Z) {
        if (d == undefined) {
            d = p.getTagCloud(Z);
        }
        return d;
    };
    this.scanUnread = function (ac) {
        var ab = new Date().getTime();
        w('Time since last scanUnread: ' + (ab - F) + ' ms.');
        if (g.length == 0 || ((ab - F) > (60 * 60 * 1000)) || ac) {
            g = [];
            if (ac) {
                o.processNodes(o.getRoot(), function (af, ag) {
                    if (af.data.type == feedbro.FeedTree.FEED) {
                        g.push(af.data.id);
                    }
                }, feedbro.FeedTree.MODE_DEPTHFIRST);
            } else {
                o.processNodes(o.getRoot(), function (af, ag) {
                    if (I(af)) {
                        g.push(af.data.id);
                    }
                }, feedbro.FeedTree.MODE_DEPTHFIRST);
            }
            if (ab - i > (5 * 60 * 1000)) {
                l.saveData();
            }
            if (g.length > 0) {
                w('eventScanUnread: feeds that need unread check: ' + g.length);
                if (g.length > 5) {
                    var aa = S.getUpdateThreads();
                    w('Using ' + aa + ' threads to scan for updates...');
                    var ad, ae = [];
                    try {
                        for (ad = 0; ad < aa; ad++) {
                            ae.push(ad);
                        }
                    } catch (Z) {
                        console.log('Error in setting number of scanning threads to use. Defaulting to 2.');
                        ae.push(0);
                        ae.push(1);
                    }
                    jQuery.each(ae, function (af, ag) {
                        L(function () {
                        }, ac);
                    });
                } else {
                    L(function () {
                    }, ac);
                }
            }
            F = ab;
        }
    };
    this.loadFeed = function (Z) {
        if (g.length == 0) {
            g.push(Z);
            L();
        }
    };
    this.findFeeds = function (aa, ad, Z, ac) {
        var ab = P(aa);
        ab.setTimeout(25000);
        ab.setIndex(l.getDbIndex());
        if (ad != '' && ad.length > 0) {
            ab.setAuthentication(ad, Z);
        }
        ab.findFeeds(ac);
    };
    this.previewFeed = function (ab, ac, ae, aa, ad) {
        var Z = P(ab);
        if (ac == 2) {
            Z.setFullFeed(true);
            Z.setAddMetaImage(true);
        }
        if (ac == 3) {
            Z.setFullFeed(true);
            Z.setAddMetaImage(false);
        }
        Z.setTimeout(30000);
        if (ae != undefined && aa != undefined && ae.length > 0) {
            Z.setAuthentication(ae, aa);
        }
        Z.setMaxEntries(20);
        Z.setIndex(l.getDbIndex());
        Z.load(ad);
    };
    this.headerHandler = function (ac) {
        var ad, ab;
        if (ac.type == 'xmlhttprequest' && ac.tabId == -1 && ac.method == 'GET') {
            try {
                var aa = ac.originUrl || ac.initiator || ac.documentUrl;
                if (aa && aa.length > 30 && U.beginsWith(aa, Y)) {
                    ac.requestHeaders.push({name: 'Referer', value: ac.url});
                    var ae = new URL(ac.url).hostname;
                    for (ab = 0; ab < ac.requestHeaders.length; ab++) {
                        ad = ac.requestHeaders[ab];
                        if (ad.name == 'Cookie' || ad.name == 'cookie') {
                            if (ae == 'twitter.com') {
                                M(ad, 'csrf_same_site_set');
                                M(ad, 'csrf_same_site');
                            } else {
                                if (ae == 'vk.com') {
                                    M(ad, 'remixlang');
                                    ad.value = ad.value + '; remixlang=3;';
                                }
                            }
                        }
                        if (ad.name == 'User-Agent' || ad.name == 'user-agent') {
                            if (ae == 'twitter.com') {
                                ad.value = 'Mozilla/5.0 (Windows NT 9.0; WOW64; Trident/7.0; rv:11.0) like Gecko';
                            }
                        }
                    }
                }
            } catch (Z) {
                console.log('headerHandler failed', Z);
            }
        }
        return {requestHeaders: ac.requestHeaders};
    };

    function M(ad, ab) {
        var ac = ad.value;
        var aa = ac.indexOf(ab + '=');
        var Z;
        if (aa != -1) {
            Z = ac.indexOf('; ', aa);
            if (Z == -1) {
                Z = ac.length;
            }
            ac = ac.substring(0, aa) + ac.substring(Z + 1);
            ad.value = ac;
        }
    }

    this.adjustHeaders = function (ad) {
        try {
            var ac, ae, aa, af = ad.responseHeaders;
            var ab = ad.originUrl || ad.initiator || ad.documentUrl;
            if (ab && ab.length > 30 && U.beginsWith(ab, Y)) {
                for (ac = 0; ac < af.length; ac++) {
                    ae = af[ac];
                    aa = ae.name;
                    if (aa == 'x-frame-options' || aa == 'X-Frame-Options' || aa == 'frame-options' || aa == 'Frame-Options') {
                        ae.name = aa + '-disabled';
                    }
                    if (aa == 'link' || aa == 'Link') {
                        ae.name = aa + '-disabled';
                    }
                    if (aa == 'content-security-policy' || aa == 'Content-Security-Policy') {
                        ae.value = ae.value.replace(/frame-ancestors[^;]+(;|$)/, '');
                    }
                }
            }
        } catch (Z) {
            console.log('adjustHeaders error', Z);
        }
        return {responseHeaders: ad.responseHeaders};
    };
    this.initFeedbro = function () {
        Locale.start();
        N(function () {
            m(function () {
                p.openConnection(function () {
                    p.init(function () {
                        l.setFeedScanInterval(30);
                    });
                });
                C.setSettings(S);
                C.init();
                s.setSettings(S);
                k.setBackground(l);
                k.setSoundPlayer(s);
                k.setNotifications(C);
                k.init();
                R.setActionHandler(k);
                R.loadRules();
                R.setEnabled(true);
                chrome.runtime.onMessage.addListener(l.handleMessageEvent);
                chrome.browserAction.setBadgeBackgroundColor({color: '#0000FF'});
                l.updateTotalUnread();
                var ab = (S.getIconClickMode() == 1);
                if (ab == false) {
                    l.setPopupEnabled(ab);
                }
                u = true;
                var aa = true;
                try {
                    chrome.webRequest.onBeforeSendHeaders.addListener(l.headerHandler, {urls: ['https://twitter.com/*', 'https://vk.com/*']}, ['blocking', 'requestHeaders', 'extraHeaders']);
                    console.log('webRequest handlers with extraHeaders setup successful.');
                } catch (Z) {
                    aa = false;
                }
                if (!aa) {
                    try {
                        chrome.webRequest.onBeforeSendHeaders.addListener(l.headerHandler, {urls: ['https://twitter.com/*', 'https://vk.com/*']}, ['blocking', 'requestHeaders']);
                        console.log('webRequest handlers without extraHeaders setup successful.');
                    } catch (Z) {
                        aa = false;
                    }
                }
                try {
                    Y = U.getExtensionBaseUrl();
                    chrome.webRequest.onHeadersReceived.addListener(l.adjustHeaders, {urls: ['<all_urls>']}, ['blocking', 'responseHeaders']);
                } catch (Z) {
                    console.log('Failed to set adjustHeader handler');
                }
                console.log('Feedbro initialized.');
            });
        });
    };
};
var feedbro = feedbro || {};
feedbro.Bookmarks = function () {
    var m = this;
    var e = '<?xml version="1.0" encoding="UTF-8"?>\n<opml version="1.0">\n<head>\n    <title>Firefox Bookmarks as OPML</title>\n</head>\n<body>';
    var k = '</body>\n</opml>';
    var l;
    var n = new feedbro.Options();
    var h = new feedbro.FeedIconManager();

    function f() {
        return chrome.extension.getBackgroundPage().feedbrobg;
    }

    this.init = function () {
        try {
            Locale.start();
            Locale.activeMap = f().getActiveLocaleMap();
            Locale.translate(true);
            alertify.set({labels: {cancel: Locale.i18n('dialog_cancel', true), ok: Locale.i18n('dialog_ok', true)}});
        } catch (o) {
            console.log('Locale init error', o);
        }
        document.getElementById('bookmarkfile').addEventListener('change', a, false);
        $('button#download').click(function () {
            var p = b();
            console.log(p);
            if (p) {
                n.downloadFile(p, 'firefox-subscriptions.opml', 'application/xml');
            }
        });
        $('button#import').click(function () {
            var p = b();
            if (p) {
                n.importFeeds(p, l);
            }
        });
        $('div#left').click(function () {
            n.restoreView();
        });
        $('div#right').click(function () {
            n.restoreView();
        });
    };

    function c(p) {
        var o = p;
        o = o.replace(/outline/g, 'div');
        o = o.substring(o.indexOf('<body>') + '<body>'.length, o.indexOf('</body>'));
        $('div#results').html(o);
        $('div#results div').each(function (s, r) {
            var w = $(r);
            var t = w.attr('type') == 'rss' ? 'feed' : 'folder';
            if (w.attr('data-type')) {
                t = w.attr('data-type');
            }
            w.addClass(t);
            var q;
            if (t == 'folder') {
                q = '<img class=\'folder\' src=\'images/folder-icon.png\'>' + w.attr('title');
            } else {
                if (t == 'livebookmark') {
                    q = '<a target=\'_blank\' href=\'' + w.attr('xmlUrl') + '\'><img title=\'Live Bookmark\' class=\'livebookmark\' src=\'images/feed-icon.png\'>' + w.attr('title') + '</a>';
                } else {
                    if (t == 'feed') {
                        var v = w.attr('xmlUrl') || '';
                        var u = h.getIconFromGoogleCache(v);
                        q = '<a target=\'_blank\' href=\'' + w.attr('xmlUrl') + '\'><img class=\'feed\' src=\'' + u + '\'>' + w.attr('title') + '</a>';
                    }
                }
            }
            w.prepend('<input type=\'checkbox\' class=\'' + t + '\'><span class=\'title\'>' + q + '</span>');
        });
        $('div#results input.folder').change(function (t) {
            var q = $(this);
            var s = q.parent();
            var r = q.prop('checked');
            s.find('input').each(function (u, w) {
                var v = $(w);
                v.prop('checked', r);
                v.parent().attr('data-checked', r);
            });
            i(s, r);
        });
        $('div#results input.feed').change(j);
        $('div#results input.livebookmark').change(j);
        $('input#file').val(null);
    }

    function j(r) {
        var o = $(this);
        var q = o.parent();
        var p = o.prop('checked');
        q.attr('data-checked', p);
        i(q, p);
    }

    function b() {
        if ($('div#results div[data-checked=\'true\']').length == 0) {
            alertify.alert(Locale.i18n('options_error_bookmarks_noselection', true));
            return false;
        }
        var o = $('div#results').clone();
        o.find('div[data-checked!=\'true\']').remove();
        o.find('input').remove();
        o.find('span').remove();
        o.find('div').removeAttr('data-checked class');
        var p = o[0].innerHTML;
        p = p.replace(new RegExp('<div', 'g'), '<outline');
        p = p.replace(new RegExp('</div', 'g'), '</outline');
        p = p.replace(new RegExp('xmlurl=', 'g'), 'xmlUrl=');
        p = p.replace(new RegExp('htmlurl=', 'g'), 'htmlUrl=');
        return e + p + k;
    }

    function i(p, o) {
        p = p.parent();
        while (true) {
            if (p.hasClass('folder') == false) {
                break;
            }
            if (p && p.find('> input').prop('checked') == false && o) {
                p.find('> input').prop('checked', true);
                p.attr('data-checked', true);
            }
            p = p.parent();
        }
    }

    function d(o) {
        if (o.indexOf('<!DOCTYPE NETSCAPE-Bookmark-file-1>') != 0) {
            alertify.alert(Locale.i18n('options_error_bookmarks_invalidfile', true, l.name));
            return e + k;
        }
        o = o.substring('<DL><p>'.length + o.indexOf('<DL><p>'), o.length - '</DL>'.length - 1);
        o = o.replace(new RegExp('<DD>[^<]+<', 'g'), '<');
        o = o.replace(new RegExp('<HR>', 'g'), '');
        o = o.replace(new RegExp('<A FEEDURL="([^"]+)" HREF="([^"]+)">', 'g'), function (p, r, q) {
            return '<A xmlUrl="' + g(r) + '" htmlUrl="' + g(q) + '" data-type="livebookmark">';
        });
        o = o.replace(new RegExp('<DT><H3[^>]+>([^<]+)</H3>[\n ]+<DL><p>', 'g'), '<outline title="$1" text="$1">');
        o = o.replace(new RegExp('<DT><A ([^>]+)>([^<]+)</A>', 'g'), '<outline type="rss" title="$2" text="$2" $1/>');
        o = o.replace(new RegExp('</DL><p>', 'g'), '</outline>');
        o = o.replace(new RegExp(' (ICON|ICON_URI|ADD_DATE|LAST_MODIFIED|LAST_CHARSET|PRIVATE|TAGS)="[^"]+"', 'g'), '');
        o = o.replace(new RegExp('<outline[^>]+HREF="(about|place|moz-extension|view-source):[^>]+/>', 'g'), '');
        o = o.replace(new RegExp('HREF="([^"]+)"', 'g'), function (p, q) {
            return 'xmlUrl="' + g(q) + '"';
        });
        return e + o + k;
    }

    function a(p) {
        var q = p.target.files;
        var o = new FileReader();
        l = q[0];
        o.onload = function (r) {
            c(d(r.target.result));
        };
        o.readAsText(l);
    }

    function g(o) {
        return o.replace(/&/g, '&amp;');
    }
};
var feedbro = feedbro || {};
feedbro.Chrome = {};
feedbro.Chrome.openTab = function (b, a) {
    chrome.tabs.query({title: b}, function (d) {
        if (d.length > 0) {
            try {
                chrome.windows.update(d[0].windowId, {focused: true});
            } catch (c) {
                console.log('Failed to focus the window!');
            }
            if (a == undefined) {
                chrome.tabs.update(d[0].id, {active: true});
            } else {
                chrome.tabs.update(d[0].id, {active: true, url: a});
            }
        } else {
            chrome.tabs.create({url: chrome.runtime.getURL(a)}, function (e) {
                console.log('openTab: ' + a);
            });
        }
    });
};
var feedbro = feedbro || {};
feedbro.ClearBody = function () {
    this.linkConverter = /<([^<>]*) (src|href)=["'](?!http|data|magnet|mailto)([^"']+)["']([^<>]*)>/gi;
    this.debugMode = false;
    this.removeHeader = true;
    this.addmetaimageMode = true;
    this.timeout = 10000;
    this.dataCache = new WeakMap();
    this.strings = new feedbro.Strings();
};
feedbro.ClearBody.makeMap = function (d) {
    var c = {}, a = d.split(',');
    for (var b = 0; b < a.length; b++) {
        c[a[b]] = true;
    }
    return c;
};
feedbro.ClearBody.tagFlipMap = {audio: 'x-audio', video: 'x-video', source: 'x-source', svg: 'x-svg', style: 'x-style'};
feedbro.ClearBody.bannedExtensions = /\.pdf|doc|docx|png|jpg|xls|xlsx|gif|ppt|pptx$/i;
feedbro.ClearBody.killTags = feedbro.ClearBody.makeMap('SCRIPT,META,LINK,NOSCRIPT,STYLE,X-STYLE,BUTTON,TEXTAREA,NAV,SELECT,LABEL,HEAD,FOOTER,ASIDE,HR,TIME,FIGURE');
feedbro.ClearBody.killClasses = new RegExp('(comment|twitter|facebook|linkedin|email|slide|video|gallery|tag\\s|playlist|actions|footer|label-more|summaPremiumLinks|oembed-asset|cnn_strylceclbtn|advert|share|storyTools|xcContainer|linked-articles|kainalo|googleAd)', 'i');
feedbro.ClearBody.killMainClasses = new RegExp('(hidden|banner|related|read-more|readAlso|subscribe|sponsor|byline|social-media|sharing|pagination|paywall|googleArticleAd|teaser|article-ad)| ad$|^ad $', 'i');
feedbro.ClearBody.killIds = new RegExp('(comment|actions|footer|author|share|headlines|toolbar|hsonfb-links|bpr-guid)', 'i');
feedbro.ClearBody.keepTags = feedbro.ClearBody.makeMap('ARTICLE');
feedbro.ClearBody.boostClasses = new RegExp('content|main|primary|article|body|post', 'i');
feedbro.ClearBody.boostTags = feedbro.ClearBody.makeMap('ARTICLE,ISENSE');
feedbro.ClearBody.CHARCOUNT = 0;
feedbro.ClearBody.PCOUNT = 1;
feedbro.ClearBody.HCOUNT = 2;
feedbro.ClearBody.VISITED = 3;
feedbro.ClearBody.prototype.getNodeData = function (a) {
    if (a == undefined) {
        return undefined;
    }
    var b = this.dataCache.get(a);
    if (b == undefined) {
        b = [0, 0, 0, 0];
        this.dataCache.set(a, b);
    }
    return b;
};
feedbro.ClearBody.prototype.setTimeout = function (a) {
    if (a < 30000) {
        a = 30000;
    }
    this.timeout = a;
};
feedbro.ClearBody.prototype.setAddMetaImage = function (a) {
    this.addmetaimageMode = a;
};
feedbro.ClearBody.prototype.setRemoveHeader = function (a) {
    this.removeHeader = a;
};
feedbro.ClearBody.prototype.setDebug = function (a) {
    this.debugMode = a;
};
feedbro.ClearBody.prototype.debug = function () {
    if (!this.debugMode) {
        return;
    }
    if (arguments.length > 1) {
        switch (arguments.length) {
            case 2:
                console.log(arguments[0], arguments[1]);
                break;
            case 3:
                console.log(arguments[0], arguments[1], arguments[2]);
                break;
            case 4:
                console.log(arguments[0], arguments[1], arguments[2], arguments[3]);
                break;
            default:
                console.log(arguments);
                break;
        }
    } else {
        console.log(arguments[0]);
    }
};
feedbro.ClearBody.prototype.loadFeedEntries = function (b, e) {
    var d, c = [];
    if (b == undefined || b.length < 1) {
        e();
        return;
    }
    var a = this;
    for (d = 0; d < b.length; d++) {
        a.load(b[d].link, (function (f) {
            return function (g) {
                if (g != undefined && g != 'undefined') {
                    f.content = g;
                }
                c.push(0);
                if (c.length == b.length) {
                    e();
                }
            };
        })(b[d]));
    }
};
feedbro.ClearBody.prototype.isValidExtension = function (a) {
    return feedbro.ClearBody.bannedExtensions.test(a) == false;
};
feedbro.ClearBody.prototype.load = function (b, d) {
    var a = this;
    if (a.isValidExtension(b) == false) {
        a.debug('  ClearBody: skipped link (banned file extension): ' + b);
        d();
        return;
    }
    var c = new XMLHttpRequest();
    c.onreadystatechange = function () {
        if (c.readyState == 4) {
            c.onreadystatechange = null;
            if (c.status == 200) {
                var e = c.getResponseHeader('Content-Type') || '';
                if (e.indexOf('text/html') != -1) {
                    a.processHtmlText(b, c, d);
                    c = null;
                } else {
                    a.debug('  ClearBody: dropped content of type ' + e);
                    c = null;
                    d();
                }
            } else {
                a.debug('  ClearBody: HTTP status: ' + c.status + (c.status == 0 ? ' (timeout)' : '') + ' for ' + b);
                c = null;
                d();
            }
        }
    };
    c.open('GET', b, true);
    c.timeout = this.timeout;
    c.send();
};
feedbro.ClearBody.prototype.processHtmlText = function (c, f, h) {
    var g = new DOMParser();
    try {
        var e = f.responseText;
        e = e.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '');
        e = e.replace(new RegExp(' (src|srcset|rel|onload|preload|autoplay)=', 'gi'), ' data-$1=');
        e = this.strings.switchTags(e, feedbro.ClearBody.tagFlipMap);
        var d = g.parseFromString(e, 'text/html');
        e = null;
        f.responseText = null;
        f.responseXML = null;
        var a = d.children[0];
        this.processDom(c, a, h);
    } catch (b) {
        console.log('  ClearBody: processHtmlText for URL \'' + c + '\' error: ', b);
        h();
    }
};
feedbro.ClearBody.prototype.getChildTag = function (a, d) {
    var c, b = a.children;
    for (c = 0; c < b.length; c++) {
        if (b[c].tagName == d) {
            return b[c];
        }
    }
    return undefined;
};
feedbro.ClearBody.prototype.getMetadata = function (b) {
    var e, g = {}, d = b.children, c;
    c = this.getChildTag(b, 'HEAD');
    if (c == undefined) {
        return g;
    }
    d = c.children;
    for (e = 0; e < d.length; e++) {
        if (d[e].tagName == 'META') {
            var h = d[e];
            var a = h.getAttribute('property') + '';
            var f = h.getAttribute('content') + '';
            if (a != undefined && f != undefined) {
                g[a] = f;
            }
        }
    }
    return g;
};
feedbro.ClearBody.prototype.processDom = function (a, j, o) {
    var e;
    var p = this.getMetadata(j);
    var f = this.getChildTag(j, 'BODY');
    this.depthFirst(f, this.filter2, function (i) {
    });
    var q = this;
    this.depthFirst(f, this.filter1, this.calculateWeight);
    var b = f;
    var h = 1;
    var r = [];
    var m;
    while (true) {
        b = this.findLargestTextNode(b);
        m = q.getNodeData(b);
        if (b == undefined || (m[feedbro.ClearBody.CHARCOUNT] / h < 0.5 || b.tagName == 'P' || b.tagName == 'A')) {
            b = r.pop();
            break;
        }
        r.push(b);
        h = m[feedbro.ClearBody.CHARCOUNT];
        if (h == 0) {
            h = 1;
        }
    }
    if (b == undefined) {
        this.debug('  No content found');
        o();
    }
    var l = true;
    var k = p['og:image'];
    if (k) {
        var g = this.getImages(b);
        var d;
        for (d = 0; d < g.length; d++) {
            if (g[d].getAttribute('src') == k) {
                l = false;
                break;
            }
        }
    } else {
        l = false;
    }
    if (b != undefined) {
        var c;
        if (this.addmetaimageMode && l && b != undefined && b.firstChild) {
            c = this.serializeNodeTree('<img class="fbarticlemainimage" src="' + k + '">', b);
        } else {
            c = this.serializeNodeTree('', b);
        }
        c = c.replace(new RegExp(' data-(src|srcset|rel|onload|preload|autoplay)=', 'gi'), ' $1=');
        c = this.strings.switchTags(c, this.strings.reverseMap(feedbro.ClearBody.tagFlipMap));
        c = this.convertRelativeLinks(c, undefined, a);
        o(c);
    } else {
        o(undefined);
    }
};
feedbro.ClearBody.prototype.calculateWeight = function (d, b) {
    var g = 1;
    var e = b.getNodeData(d);
    var a;
    if (d.parentNode) {
        a = b.getNodeData(d.parentNode);
    }
    if (d.nodeType == 3) {
        var c = d.nodeValue.trim().length;
        if (c < 20) {
            g = 0.1;
        }
        if (c > 80) {
            g = 2;
        }
        if (c > 200) {
            g = 4;
        }
        if (c > 0) {
            e[feedbro.ClearBody.CHARCOUNT] += c * g;
        }
    }
    if (d.parentNode) {
        var f = d.parentNode.tagName;
        if (d.tagName == 'P') {
            g = 2;
            a[feedbro.ClearBody.PCOUNT]++;
        }
        if (f == 'LI') {
            g = 0.01;
        }
        if (f == 'A') {
            g = 0.001;
        }
        if (f == 'IFRAME') {
            g = 1e-7;
        }
        a[feedbro.ClearBody.PCOUNT] += e[feedbro.ClearBody.PCOUNT];
        a[feedbro.ClearBody.CHARCOUNT] += (e[feedbro.ClearBody.CHARCOUNT] * g);
    }
};
feedbro.ClearBody.prototype.serializeNodeTree = function (d, c) {
    try {
        var b = new XMLSerializer();
        return d + b.serializeToString(c);
    } catch (a) {
        return d + c.innerHTML;
    }
};
feedbro.ClearBody.prototype.getImages = function (b) {
    var a = [];
    this.breadthFirst(b, function (c) {
        if (c.tagName == 'IMG') {
            a.push(c);
        }
        return false;
    });
    return a;
};
feedbro.ClearBody.prototype.getTitle = function (a) {
    return this.breadthFirst(a, function (b) {
        return (b.tagName == 'H1' ? b : false);
    });
};
feedbro.ClearBody.prototype.findLargestTextNode = function (b) {
    var a = -1, d, g;
    for (var c = 0; c < b.childNodes.length; c++) {
        var f = b.childNodes[c];
        g = this.getNodeData(f);
        var e = g[feedbro.ClearBody.CHARCOUNT];
        if (g[feedbro.ClearBody.PCOUNT] > 0) {
            e = e * g[feedbro.ClearBody.PCOUNT];
        }
        if (f.className != undefined && feedbro.ClearBody.boostClasses.test(f.className)) {
            e = e * 3;
        }
        if (f.tagName in feedbro.ClearBody.boostTags) {
            e = e * 3;
        }
        if (e > a) {
            a = e;
            d = f;
        }
    }
    return d;
};
feedbro.ClearBody.prototype.breadthFirst = function (b, f) {
    var d, e, a = [];
    if (b != undefined) {
        a.push(b);
    }
    while (true) {
        if (a.length == 0) {
            break;
        }
        e = a.shift();
        var c = f(e);
        if (c != undefined && c != false) {
            return c;
        }
        for (d = 0; d < e.childNodes.length; d++) {
            a.push(e.childNodes[d]);
        }
    }
    return false;
};
feedbro.ClearBody.prototype.filter1 = function (b) {
    if (b == undefined) {
        return false;
    }
    var a = b.tagName;
    if (b.nodeType == 8 || a in feedbro.ClearBody.killTags) {
        return true;
    } else {
        if (b.className != undefined && !(a in feedbro.ClearBody.keepTags) && feedbro.ClearBody.killClasses.test(b.className)) {
            return true;
        } else {
            if (b.id != undefined && feedbro.ClearBody.killIds.test(b.id)) {
                return true;
            } else {
                if (b.nodeType == 1 && b.getAttribute('aria-hidden') == 'true') {
                    return true;
                } else {
                    return false;
                }
            }
        }
    }
};
feedbro.ClearBody.prototype.filter2 = function (a) {
    if (a.className != undefined && feedbro.ClearBody.killMainClasses.test(a.className)) {
        return true;
    } else {
        return false;
    }
};
feedbro.ClearBody.prototype.depthFirst = function (b, f, g) {
    var e, c, d, a = [];
    if (b != undefined) {
        a.unshift(b);
    }
    d = b;
    while (a.length > 0) {
        d = a[0];
        e = this.getNodeData(d);
        if (e[feedbro.ClearBody.VISITED] == 1 || d.childNodes.length == 0) {
            g(d, this);
            d = a.shift();
            e = this.getNodeData(d);
            e[feedbro.ClearBody.VISITED] = 0;
            continue;
        } else {
            for (c = d.childNodes.length - 1; c >= 0; c--) {
                var h = d.childNodes[c];
                if (f(h)) {
                    d.removeChild(h);
                } else {
                    a.unshift(h);
                }
            }
        }
        e[feedbro.ClearBody.VISITED] = 1;
    }
};
feedbro.ClearBody.prototype.convertRelativeLinks = function (b, g, d) {
    var f = this.getProtocol(d);
    var c = this.getServer(d);
    var e = this.getBase(d);
    var a = this;
    return b.replace(a.linkConverter, function (o, n, k, j, i) {
        var h = n;
        var p = k;
        var q = j;
        var m = i;
        var r = '<' + h + ' ' + p + '="';
        var l = '"' + m + '>';
        if (q.indexOf('://') != -1 || q.indexOf('data:') == 0) {
            return r + q + l;
        }
        if (q.indexOf('//') == 0) {
            return r + f + ':' + q + l;
        }
        if (q.length > 0 && q.charAt(0) == '/') {
            if (g != undefined) {
                return r + a.getProtocol(g) + '://' + a.getServer(g) + q + l;
            } else {
                return r + f + '://' + c + q + l;
            }
        } else {
            if (g != undefined) {
                if (q.length > 0 && g.length > 0 && (q.charAt(0) == '#' || q.charAt(0) == '?')) {
                    return r + g.substring(0, g.length - 1) + q + l;
                } else {
                    return r + g + q + l;
                }
            } else {
                return r + e + q + l;
            }
        }
    });
};
feedbro.ClearBody.prototype.getServer = function (e) {
    var d = e.indexOf('://');
    if (d < 0) {
        d = 0;
    } else {
        d = d + 3;
    }
    var c = e.indexOf('/', d);
    if (c < 0) {
        c = e.length;
    }
    return e.substring(d, c);
};
feedbro.ClearBody.prototype.getProtocol = function (a) {
    if (!a) {
        return 'http';
    }
    var b = a.indexOf(':');
    return b > 0 ? a.substring(0, b) : 'http';
};
feedbro.ClearBody.prototype.getBase = function (e) {
    if (e == undefined) {
        return undefined;
    }
    var d = e.indexOf('://');
    var c = e.lastIndexOf('/');
    if (d != -1 && c > (d + 3)) {
        return e.substring(0, c + 1);
    } else {
        if (e.charAt(e.length - 1) != '/') {
            return e + '/';
        } else {
            return e;
        }
    }
};
var feedbro = feedbro || {};
feedbro.DbIndex = function (c) {
    var d = [];
    var b = {};
    var e;
    var a = this;
    this.add = function (g, j, f, n, i, h, o, k, l) {
        var m = {timestamp: j, unread: i, starred: h, feedid: f, folderid: n, id: g, tags: o, link: k, points: l};
        d.push(m);
        b[g] = m;
        e = undefined;
    };
    this.size = function () {
        return d.length;
    };
    this.clear = function () {
        d = [];
        b = {};
        e = undefined;
    };
    this.remove = function (k) {
        var f, j = {};
        for (f = 0; f < k.length; f++) {
            j[k[f]] = 1;
        }
        var h, g = [];
        for (f = 0; f < d.length; f++) {
            h = d[f];
            if (j[h.id]) {
                b[h.id] = undefined;
            } else {
                g.push(h);
            }
        }
        d = g;
    };
    this.moveFeed = function (f, j) {
        var g, h;
        for (g = 0; g < d.length; g++) {
            h = d[g];
            if (h.feedid == f && h.folderid != j) {
                h.folderid = j;
                h.dirty = 1;
            }
        }
    };
    this.get = function (f) {
        return b[f];
    };
    this.sort = function (f) {
        if (f == feedbro.DbIndex.SORT_DESCENDING) {
            d.sort(function (h, g) {
                if (h.timestamp > g.timestamp) {
                    return -1;
                }
                if (h.timestamp < g.timestamp) {
                    return 1;
                }
                return 0;
            });
            e = f;
        } else {
            if (f == feedbro.DbIndex.SORT_ASCENDING) {
                d.sort(function (h, g) {
                    if (h.timestamp < g.timestamp) {
                        return -1;
                    }
                    if (h.timestamp > g.timestamp) {
                        return 1;
                    }
                    return 0;
                });
                e = f;
            } else {
                if (f == feedbro.DbIndex.SORT_POINTS) {
                    d.sort(function (h, g) {
                        var i = h.points || 0;
                        var j = g.points || 0;
                        if (i > j) {
                            return -1;
                        }
                        if (i < j) {
                            return 1;
                        }
                        if (h.timestamp > g.timestamp) {
                            return -1;
                        }
                        if (h.timestamp < g.timestamp) {
                            return 1;
                        }
                        return 0;
                    });
                    e = f;
                } else {
                    throw new Error('Invalid sort direction: ' + f);
                }
            }
        }
    };
    this.getTagCloud = function (m) {
        var l, k, n, f, h, g = {};
        if (m == undefined) {
            m = {};
        }
        for (l = 0; l < d.length; l++) {
            n = d[l];
            if (n.purge == 1) {
                continue;
            }
            if (m.mindate > n.timestamp) {
                continue;
            }
            if (m.maxdate < n.timestamp) {
                continue;
            }
            if (m.feedid != undefined && n.feedid != m.feedid) {
                continue;
            }
            if (m.folderid != undefined && n.folderid != m.folderid) {
                continue;
            }
            if (m.unread != undefined && n.unread != m.unread) {
                continue;
            }
            h = n.tags;
            if (h == undefined || h.length < 1) {
                continue;
            }
            for (k = 0; k < h.length; k++) {
                f = h[k];
                if (g[f] != undefined) {
                    g[f]++;
                } else {
                    g[f] = 1;
                }
            }
        }
        return g;
    };
    this.query = function (q, f) {
        var n = [];
        var g = {};
        var l = 0;
        var m = 0;
        var j, h, p, o;
        if (!q.mindate) {
            q.mindate = 0;
        }
        if (!q.maxdate) {
            q.maxdate = Number.MAX_VALUE;
        }
        if (!q.start) {
            q.start = 0;
        }
        if (!q.count) {
            q.count = 10000000;
        }
        if (!q.sort) {
            q.sort = feedbro.DbIndex.SORT_DESCENDING;
        }
        if (!e || e != q.sort) {
            this.sort(q.sort);
        }
        for (j = 0; j < d.length; j++) {
            p = d[j];
            if (q.skipUntil) {
                if (p.id != q.skipUntil) {
                    continue;
                } else {
                    q.skipUntil = undefined;
                    continue;
                }
            }
            if (q.mindate > p.timestamp) {
                continue;
            }
            if (q.maxdate < p.timestamp) {
                continue;
            }
            if (q.feedid != undefined && p.feedid != q.feedid) {
                continue;
            }
            if (q.folderid != undefined && p.folderid != q.folderid) {
                continue;
            }
            if (q.unread != undefined && p.unread != q.unread) {
                continue;
            }
            if (q.starred != undefined && p.starred != q.starred) {
                continue;
            }
            if (q.dirty != undefined && p.dirty != q.dirty) {
                continue;
            }
            if ((q.purge != undefined && p.purge != q.purge) || (q.purge == undefined && p.purge == 1)) {
                continue;
            }
            if (q.articleid != undefined && p.id != q.articleid) {
                continue;
            }
            if (q.link != undefined && p.link != q.link) {
                continue;
            }
            if (q.tag != undefined) {
                if (p.tags == undefined || Array.isArray(p.tags) == false) {
                    continue;
                }
                o = false;
                for (h = 0; h < p.tags.length; h++) {
                    if (p.tags[h] == q.tag) {
                        o = true;
                        break;
                    }
                }
                if (!o) {
                    continue;
                }
            }
            if (m >= q.start) {
                if (l < q.count) {
                    if (q.maxitemsperfeed) {
                        if (!g[p.feedid]) {
                            g[p.feedid] = 0;
                        }
                        if (g[p.feedid] < q.maxitemsperfeed) {
                            g[p.feedid]++;
                        } else {
                            continue;
                        }
                    }
                    if (f) {
                        f(p);
                    }
                    n.push(p.id);
                    l++;
                } else {
                    break;
                }
            }
            m++;
        }
        return n;
    };
};
feedbro.DbIndex.SORT_DESCENDING = 1;
feedbro.DbIndex.SORT_ASCENDING = 2;
feedbro.DbIndex.SORT_POINTS = 3;
var feedbro = feedbro || {};
feedbro.dndTable = {};
feedbro.dndTable.create = function (c, a) {
    $('table#' + c + ' > tbody').on('drop', function (f) {
        f.preventDefault();
        var g = f.originalEvent.dataTransfer.getData('text');
        var d = document.getElementById(g);
        var e = $(f.target).parent();
        if (f.offsetY / e.height() < 0.5) {
            $(d).insertBefore(e);
        } else {
            $(d).insertAfter(e);
        }
        if (a) {
            a(d);
        }
    });
    var b = $('table#' + c + ' > tbody > tr');
    b.on('dragstart', function (d) {
        d.originalEvent.dataTransfer.setData('text', d.target.id);
    });
    b.on('dragover dragenter dragleave', function (d) {
        d.preventDefault();
    });
};
var feedbro = feedbro || {};
feedbro.EnclosureHandler = function () {
    var a = this;
    this.createTag = function (e, k) {
        if (k == undefined) {
            return $('<span></span>');
        }
        var g = '', h = k.type;
        var i, j, d = false;
        var f = '<span class=\'enclosure-name\'>' + c(k.url) + '</span>';
        if (h != undefined) {
            i = '<span class=\'enclosure-type\'>[' + h + ']</span>';
            if (b(h, 'audio/mpeg3') || b(h, 'audio/mp3') || b(h, 'audio/x-mpeg') || b(h, 'audio/x-mpeg-3') || b(h, 'audio/x-m4a')) {
                h = 'audio/mp4';
            }
            if (b(h, 'video/x-m4v')) {
                h = 'video/mp4';
            }
            if (b(h, 'image/')) {
                g += '<div class="enclosure enclosure-image" data-url="' + k.url + '" data-type="' + k.type + '">';
            } else {
                if (b(h, 'video/webm') || b(h, 'video/ogg') || b(h, 'video/mp4') || b(h, 'video/mpeg')) {
                    g += '<div class="enclosure enclosure-video" data-url="' + k.url + '" data-type="' + k.type + '">';
                } else {
                    if (b(h, 'audio/webm') || b(h, 'audio/mpeg') || b(h, 'audio/ogg') || b(h, 'audio/wav')) {
                        g += '<div class="enclosure enclosure-audio" data-url="' + k.url + '" data-type="' + k.type + '">';
                    } else {
                        g += '<div class="enclosure enclosure-other" data-url="' + k.url + '" data-type="' + k.type + '">';
                        d = true;
                    }
                }
            }
            if (d == false) {
                g += '<div class="enclosure-caption"><span class="enclosure-viewlink">' + Locale.i18n('article_action_enclosure_view', true) + '</span> ' + Locale.i18n('article_action_enclosure_view_enclosure', true) + ' <a class="enclosure-link" href="' + k.url + '">' + f + '</a> ' + i + '</div></div>';
            } else {
                g += '<div class="enclosure-caption">' + Locale.i18n('article_action_enclosure_label', true) + ' <a class="enclosure-link" href="' + k.url + '">' + f + '</a> ' + i + '</div></div>';
            }
            g = $(g);
            g.find('span.enclosure-viewlink').click(function () {
                var l = $(this).parent().parent();
                if (l.hasClass('open-enclosure')) {
                    if (l.hasClass('enclosure-audio')) {
                        j = l.find('audio');
                        j[0].pause();
                        j.remove();
                    } else {
                        if (l.hasClass('enclosure-video')) {
                            j = l.find('video');
                            j[0].pause();
                            j.remove();
                        } else {
                            if (l.hasClass('enclosure-image')) {
                                j = l.find('img');
                                j.remove();
                            }
                        }
                    }
                    l.find('div.enclosure-content').remove();
                    l.removeClass('open-enclosure');
                    $(this).html('View');
                    return;
                }
                if (l.hasClass('enclosure-audio')) {
                    l.append('<div id="enclosure-content-' + e + '" class="enclosure-content"><audio src="' + l.data('url') + '" type="' + l.data('type') + '" preload="metadata" controls="controls"></audio></div>');
                } else {
                    if (l.hasClass('enclosure-video')) {
                        l.append('<div id="enclosure-content-' + e + '" class="enclosure-content"><video src="' + l.data('url') + '" type="' + l.data('type') + '" preload="metadata" controls="controls"></video></div>');
                    } else {
                        if (l.hasClass('enclosure-image')) {
                            l.append('<div id="enclosure-content-' + e + '" class="enclosure-content"><img src="' + l.data('url') + '"/></div>');
                        }
                    }
                }
                l.addClass('open-enclosure');
                $(this).html('Hide');
            });
        }
        return g;
    };

    function c(f) {
        var e, d = f.lastIndexOf('/');
        if (d < 0) {
            return f;
        } else {
            e = decodeURIComponent(f.substring(d + 1));
            if (e.indexOf('%') != -1) {
                e = decodeURIComponent(e);
            }
            return e;
        }
    }

    function b(e, d) {
        return e.indexOf(d) == 0;
    }
};
var feedbro = feedbro || {};
feedbro.Engine = function () {
    var aB = this;
    var c = 0;
    var I;
    var aW;
    var s = -1;
    var d;
    var q = '<a href="" id="" title="" target="" onclick="" style=""></a><br />';
    var aP = new feedbro.InviewObserver('div#feed');
    var L = new feedbro.Strings();
    var j = new feedbro.EnclosureHandler();
    var af = new feedbro.FeedIconManager();
    var aT = new feedbro.FeedFinder();
    var n = new feedbro.MathJax();
    var R;
    var r = {
        email: 'mailto:?subject={TITLE}&body={URL}',
        facebook: 'https://www.facebook.com/sharer/sharer.php?u={URL}&t={TITLE}',
        google: 'https://plus.google.com/share?url={URL}',
        twitter: 'https://twitter.com/intent/tweet?text={TITLE}&url={URL}',
        linkedin: 'http://www.linkedin.com/shareArticle?mini=true&url={URL}&title={TITLE}',
        digg: 'http://digg.com/submit?phase=2&url={URL}&amp;title={TITLE}',
        stumbleupon: 'http://www.stumbleupon.com/submit?url={URL}&title={TITLE}',
        reddit: 'http://www.reddit.com/submit?title={TITLE}&url={URL}',
        tumblr: 'http://www.tumblr.com/share/link?url={URL}&name={TITLE}',
        friendfeed: 'http://friendfeed.com/?url={URL}&amp;title={TITLE}',
        instapaper: 'http://www.instapaper.com/edit?url={URL}&title={TITLE}&summary=',
        gmail: 'https://mail.google.com/mail/?view=cm&fs=1&su={TITLE}&body={URL}',
        yammer: 'https://www.yammer.com/home/bookmarklet?t={TITLE}&u={URL}',
        pocket: 'https://getpocket.com/save?url={URL}&title={TITLE}',
        evernote: 'https://www.evernote.com/clip.action?url={URL}&title={TITLE}',
        readability: 'http://www.readability.com/save?url={URL}',
        flipboard: 'https://share.flipboard.com/bookmarklet/popout?v=2&title={TITLE}&url={URL}',
        hootsuite: 'https://hootsuite.com/hootlet/social-share?partner=hootlet&url={URL}&title={TITLE}',
        buffer: 'https://bufferapp.com/add?url={URL}&title={TITLE}',
        vk: 'https://vk.com/share.php?url={URL}&title={TITLE}',
        gtranslate: 'http://translate.google.com/translate?tl={TOLANG}&sl=auto&ie=UTF-8&u={URL}'
    };

    function K() {
        return chrome.extension.getBackgroundPage().feedbrobg;
    }

    function o(aZ, aY) {
        K().debug('UI: ' + aZ, aY);
    }

    function ad(aZ, aY) {
        chrome.tabs.query({title: aZ}, function (a0) {
            if (a0.length > 0) {
                chrome.tabs.update(a0[0].id, {active: true});
            } else {
                chrome.tabs.create({url: chrome.runtime.getURL(aY)}, function (a1) {
                });
            }
        });
    }

    function v() {
        $('div#navigator').tree('selectNode', null);
        $('div#starreditems').removeClass('menu-selected');
        $('div#allitems').removeClass('menu-selected');
        $('div#stats').removeClass('menu-selected');
        $('div#rulenav').removeClass('menu-selected');
        $('div#tagnav').removeClass('menu-selected');
    }

    function f() {
        K().saveData();
    }

    function ap(aY) {
        return aY ? aY.replace(/[&<>"'`]/g, function (aZ) {
            return '&#' + aZ.charCodeAt(0) + ';';
        }) : aY;
    }

    function aO(aY) {
        return aY ? aY.replace(/[<>]/g, function (aZ) {
            return '&#' + aZ.charCodeAt(0) + ';';
        }) : aY;
    }

    function ag(aZ, aY) {
        return '<span class=\'keepunread\'><input class=\'unreadbox\' style=\'vertical-align: middle;\' type=\'checkbox\' ' + (aY && aZ.unread == 1 ? 'checked=\'checked\' ' : '') + 'id=\'unread-' + aZ.id + '\' title=\'' + Locale.i18n('article_action_keepunread_title', true) + '\'> <label for=\'unread-' + aZ.id + '\'>' + Locale.i18n('article_action_keepunread_body', true) + '</label></span>';
    }

    function ai(aY) {
        return '<div class=\'tags\' title=\'' + Locale.i18n('article_action_tags_title', true) + '\' data-id=\'' + aY.id + '\'></div>';
    }

    function ax(aY) {
        return '<a class=\'delete-entry\' data-id=\'' + aY.id + '\' title=\'' + Locale.i18n('article_action_delete_title', true) + '\'><img src=\'images/trash.png\' class=\'articletrashicon\'>' + Locale.i18n('article_action_delete_body', true) + '</a>';
    }

    function M(a2, a0) {
        var aZ;
        var a1 = 'images/feed-icon-bw.png';
        if (a0 > 0) {
            aZ = '<div class="node"><div class="node-unread" title="' + Locale.i18n('navigator_tree_unread', true) + '">' + a0 + '</div>';
            a1 = 'images/feed-icon.png';
        } else {
            aZ = '<div class="node empty-node">';
        }
        if (R == undefined) {
            R = K().getSettings();
        }
        if (a2.type == 1 && R.getUseFavIcons() == true) {
            a1 = af.getIconFromGoogleCache(a2.htmlUrl);
        }
        var aY = '';
        if (a2.type == 2) {
            aY = '<img src=\'images/folder-icon.svg\' class=\'treeFolderIcon\'>';
        } else {
            if (a2.type == 1) {
                aY = '<img src=\'' + a1 + '\' class=\'treeFeedIcon\'>';
            }
        }
        aZ += '<div class="node-text' + (a0 > 0 ? ' node-unreadtext' : '') + '" style="float: none; width: auto; overflow: hidden;" title="' + ap(a2.realname || a2.name) + ' - ' + Locale.i18n('navigator_tree_rightclickoptions', true) + '">' + aY + ap(a2.name) + '</div>';
        aZ += '</div>';
        return aZ;
    }

    function A(aY) {
        var aZ = K().getFeedTree().getNode(aY.id).data;
        return M(aZ, aZ.unread);
    }

    function T() {
        var aZ, aY, a1, a0, a3, a4, a2 = K().getTreeData();
        for (aZ = 0; aZ < a2.length; aZ++) {
            a1 = a2[aZ];
            if (a1.type == 2) {
                a0 = a1;
                a3 = 0;
                for (aY = 0; aY < a0.children.length; aY++) {
                    a4 = a0.children[aY];
                    a3 += a4.unread;
                    a4.name = M(a4, a4.unread);
                }
                a0.name = M(a0, a3);
            } else {
                if (a1.type == 1) {
                    a1.name = M(a1, a1.unread);
                } else {
                    o('Unidentified tree data entry: ' + JSON.stringify(a1));
                }
            }
        }
        return a2;
    }

    function Q(a1, a0) {
        I = a1;
        if (!a1) {
            return;
        }
        var aZ = a1.node;
        var aY = {key: aZ.name, id: aZ.id};
        if (!a0) {
            v();
        }
        if (a1.action) {
            aY.action = a1.action;
            if (aY.action == 'feedstats') {
                ac();
                return;
            }
            if (aY.action == 'tagcloud') {
                ae();
                return;
            }
            if (aY.action == 'rulelist') {
                d.printRuleList();
                return;
            }
            if (aY.action == 'loadstarred') {
                aY.starred = 1;
            }
            if (aY.action == 'loadtag') {
                aY.tag = a1.tag;
            }
        } else {
            if (aZ.type == 2) {
                aY.action = 'loadgroupdao';
            } else {
                if (aZ.type == 1) {
                    aY.action = 'loadsingledao';
                } else {
                    console.log('handleLoadEntries: invalid node type: ' + aZ.type);
                    return;
                }
            }
        }
        aY.firstload = true;
        X(aY);
    }

    function an(aY) {
        switch (aY) {
            case 0:
            case undefined:
                return Locale.i18n('loadstatus_0', true);
            case 200:
            case 304:
                return Locale.i18n('loadstatus_200', true);
            case 398:
                return Locale.i18n('loadstatus_398', true);
            case 399:
                return Locale.i18n('loadstatus_399', true);
            case 401:
                return Locale.i18n('loadstatus_398', true);
            case 403:
                return Locale.i18n('loadstatus_403', true);
            case 404:
                return Locale.i18n('loadstatus_404', true);
            case 500:
                return Locale.i18n('loadstatus_500', true);
            case 503:
                return Locale.i18n('loadstatus_503', true);
            case 601:
                return Locale.i18n('loadstatus_601', true);
            case 602:
                return Locale.i18n('loadstatus_602', true);
            case 603:
                return Locale.i18n('loadstatus_603', true);
            default:
                return Locale.i18n('loadstatus_broken', true);
        }
    }

    function aU() {
        var aY = [];
        K().processNodes(function (aZ) {
            if (aZ.data.type == 1) {
                aY.push(aZ);
            }
        }, 5);
        aY.sort(function (a0, aZ) {
            if (a0.data.status && !aZ.data.status) {
                return 1;
            }
            if (!a0.data.status && aZ.data.status) {
                return -1;
            }
            if (!a0.data.status && !aZ.data.status) {
                return 0;
            }
            var a1 = a0.data.status - aZ.data.status;
            if (a1 != 0 && (a0.data.status > 304 || aZ.data.status > 304)) {
                return a1;
            }
            return aZ.data.latestitem - a0.data.latestitem;
        });
        return aY;
    }

    function ac() {
        var aZ = aU();
        $('div#feed').empty();
        if (aZ.length == 0) {
            $('div#feed').html('<div class=\'info\'><div class=\'info-message\'>' + Locale.i18n('statsview_no_feeds', true) + '</div></div>');
            return;
        }
        var a3, a1, a2, ba, a8, aY, a9, a4 = '';
        var a7 = Locale.i18n('statsview_table_rowclick_title', true);
        var a0 = Locale.i18n('statsview_table_days', true);
        var a5 = Locale.i18n('statsview_table_default', true);
        a4 += '<table class=\'feedtable\'><thead><tr><th></th>';
        a4 += '<th style=\'text-align: left\'>' + Locale.i18n('statsview_table_feedtitle', true) + '</th>';
        a4 += '<th>' + Locale.i18n('statsview_table_properties', true) + '</th>';
        a4 += '<th style=\'text-align: right\'>' + Locale.i18n('statsview_table_latestupdate', true) + '</th>';
        a4 += '<th>' + Locale.i18n('statsview_table_status', true) + '</th>';
        a4 += '<th title=\'' + Locale.i18n('statsview_table_scandelay_title', true) + '\'>' + Locale.i18n('statsview_table_scandelay', true) + '</th>';
        a4 += '<th>' + Locale.i18n('statsview_table_selected', true) + '</th></tr></thead>';
        a4 += '<tbody>';
        var a6 = K().getSettings().getInactiveFeedLimit();
        for (a3 = 0; a3 < aZ.length; a3++) {
            a1 = aZ[a3];
            a2 = '';
            ba = 0;
            a8 = false;
            if (a1.data.latestitem > 0) {
                aY = new Date(a1.data.latestitem);
                ba = Math.ceil((new Date().getTime() - aY.getTime()) / (24 * 60 * 60 * 1000));
                a2 = ba + ' ' + a0;
            }
            if (ba > a6 || a1.data.status >= 400) {
                a8 = true;
            }
            a9 = a1.data.scandelay ? a1.data.scandelay : a5;
            a4 += '<tr class=\'feedtablerow\'><td align=\'right\'>' + (a3 + 1) + '.</td>';
            a4 += '<td><a class=\'feedlink\' title=\'' + a7 + '\' id=\'link-' + (a1.data.id) + '\'>' + ap(a1.data.name) + '</a></td>';
            a4 += '<td><img data-id=\'' + a1.data.id + '\' class=\'feedProperties\' src=\'images/settings.png\'></td><td align=\'right\'>' + a2 + '</td>';
            a4 += '<td align=\'center\'>' + an(a1.data.status) + '</td>';
            a4 += '<td align=\'center\'>' + a9 + '</td><td align=\'center\'><input ' + (a8 ? 'checked=\'checked\'' : '') + ' type=\'checkbox\' class=\'feedcheck\' id=\'noderm-' + a1.data.id + '\'/></tr>';
        }
        a4 += '</tbody>';
        a4 += '</table>';
        a4 += '<center>';
        a4 += '  <button id=\'removefeeds\' class=\'alertify-button alertify-button-ok\'>' + Locale.i18n('statsview_button_deleteselected', true) + '</button>';
        a4 += '  <button id=\'uncheckall\' class=\'alertify-button alertify-button-ok\'>' + Locale.i18n('statsview_button_unselectall', true) + '</button>';
        a4 += '</center>';
        $('div#feed').append(a4);
        $('button#uncheckall').click(function () {
            $('.feedcheck').prop('checked', false);
        });
        $('button#removefeeds').click(function () {
            var bb = $('input[class=\'feedcheck\']:checked:enabled');
            if (bb.length < 1) {
                return;
            }
            alertify.confirm(Locale.i18n('statsview_confirm_delete', true, bb.length), function (bc) {
                if (bc) {
                    bb.each(function () {
                        var bd = $(this).attr('id').substring(7);
                        K().deleteFeed(bd);
                    });
                    $('div#navigator').tree('loadData', T());
                    f();
                    $('div#stats').click();
                }
            });
        });
        $('img.feedProperties').click(function (bc) {
            bc.preventDefault();
            var be = parseInt($(this).attr('data-id'), 10);
            var bb = $('div#navigator').tree('getNodeById', be);
            var bd = K().getFeedTree().getNode(bb.id).data;
            H(bd, bb.parent);
            return false;
        });
        $('a.feedlink').click(function () {
            var bb = parseInt($(this).attr('id').substring(5), 10);
            aC(bb);
        });
        $(document).scrollTop(0);
    }

    function aC(a2) {
        v();
        var a1 = $('div#navigator');
        var a0 = a1.tree('getNodeById', a2);
        a1.tree('selectNode', a0);
        try {
            var aZ = a1;
            aZ.scrollTop($(a0.element).offset().top - aZ.offset().top + aZ.scrollTop());
        } catch (aY) {
            console.log('Failed to scroll feed tree to chosen node');
        }
        Q({node: {id: a2, type: 1}}, true);
    }

    function a(aZ, aY) {
        if (aY == true || aY == 1) {
            K().markUnread(aZ, 0);
            K().markDeleted(aZ, aY);
            $('div#blogentrypost-' + aZ).remove();
        }
    }

    function aa() {
        var aY = $(this);
        var aZ = parseInt(aY.attr('data-id'), 10);
        K().markUnread(aZ, 0);
        $('div#feed > div#blogentrypost-' + aZ).removeClass('unread');
    }

    function p(a1) {
        var aZ = $('div#navigator');
        var a0 = aZ.tree('getNodeById', a1);
        if (!a0) {
            o('Non-existent tree node: ' + a1);
            return;
        }
        var aY = K();
        if (a0.type == 1) {
            aZ.tree('updateNodeLabel', a0, A(a0));
            if (a0.parent.parent) {
                aY.getFolderUnreadCount(a0.parent.id);
                a0 = aZ.tree('getNodeById', a0.parent.id);
                aZ.tree('updateNodeLabel', a0, A(a0));
            }
        } else {
            if (a0.type == 2) {
                aY.getFolderUnreadCount(a1);
                aZ.tree('updateNodeLabel', a0, A(a0));
            } else {
                o('Unidentified node type: ' + a0.type);
            }
        }
        aY.updateTotalUnread();
    }

    function aX(a0) {
        var aY = $('div#navigator').tree('getNodeById', a0);
        var aZ = K().getFeedTree().getNode(aY.id).data;
        if (aY.type == 1) {
            alertify.confirm(Locale.i18n('navigator_action_deletefeed_confirm', true, aZ.name), function (a2) {
                if (a2) {
                    var a1 = aY.parent;
                    $('div#navigator').tree('removeNode', aY);
                    K().deleteFeed(a0);
                    if (a1.parent) {
                        p(a1.id);
                    }
                    f();
                }
            });
        } else {
            alertify.confirm(Locale.i18n('navigator_action_deletefolder_confirm', true, aZ.name), function (a1) {
                if (a1) {
                    $('div#navigator').tree('removeNode', aY);
                    K().deleteFolder(a0);
                    K().updateTotalUnread();
                    f();
                }
            });
        }
    }

    function aQ(a0) {
        var aY = $('div#navigator').tree('getNodeById', a0);
        var aZ = K().getFeedTree().getNode(aY.id).data;
        alertify.prompt(Locale.i18n('navigator_action_rename_prompt', true), function (a2, a3) {
            if (a2) {
                var a1 = a3;
                if (a1.length < 1 || a1.length > 50) {
                    alertify.alert(Locale.i18n('navigator_action_rename_toolong', true, a1.length));
                    return;
                }
                aZ.name = a1;
                p(aY.id);
                f();
            }
        }, aZ.name);
    }

    function aR() {
        $('div.entry-body').css({display: (c == feedbro.Engine.VIEWMODE_HEADLINES ? 'none' : 'block')});
        if (c == feedbro.Engine.VIEWMODE_HEADLINES) {
            $('div.entry').addClass('compact-headline');
        } else {
            $('div.entry').removeClass('compact-headline');
        }
    }

    function aS(aZ, aY) {
        return function () {
            aZ.find('input#feed-url').val($(this).attr('href'));
            aY.css({display: 'none'});
            aZ.find('button#feed-get').click();
            return false;
        };
    }

    function at(aY) {
        var aZ = {node: {name: 'searchtag'}, action: 'loadtag', tag: aY};
        Q(aZ, true);
    }

    function ae() {
        var aY = K().getTagCloud();
        var a2 = Object.keys(aY);
        var a1, a0, aZ = '<div class=\'feed-header\'></div>';
        L.sortIgnoreCase(a2);
        if (a2.length > 0) {
            aZ += '<table class=\'feedtable tagtable\'><thead><tr>';
            aZ += '<th class=\'feedtableTh tagtableCount\'>' + Locale.i18n('tagview_articles_body', true) + '</th>';
            aZ += '<th class=\'feedtableTh\'>' + Locale.i18n('tagview_tag_body', true) + '</th></tr></thead>';
            aZ += '<tbody>';
            var a3 = Locale.i18n('tagview_table_row_title', true);
            for (a1 = 0; a1 < a2.length; a1++) {
                a0 = L.escapeHtml(a2[a1]);
                aZ += '<tr class=\'feedtablerow\'><td class=\'feedtableTd tagtableCount\'>' + aY[a2[a1]] + '</td><td class=\'feedtableTd\'><div class=\'taglink\' data-key=\'' + a0 + '\' title=\'' + a3 + '\'>' + a0 + '</div></td></tr>';
            }
            aZ += '</tbody>';
            aZ += '</table>';
        } else {
            aZ += '<div class=\'info\'><div class=\'info-message\'>' + Locale.i18n('tagview_notags_body', true) + '</div></div>';
        }
        $('div#feed').empty();
        $('div#feed').html(aZ);
        $('div#feed').find('div.taglink').click(function () {
            var a4 = $(this).data('key');
            at(a4);
        });
    }

    function H(a3, a8) {
        var a6 = $('div#feeddialog');
        aW = a3.id;
        a6.find('span#feed-alternatives').css({display: 'none'});
        a6.find('input#feed-url').val(a3.url || '');
        a6.find('input#feed-title').val(a3.name || '');
        a6.find('span#feed-status').html(a3.status ? an(a3.status) : '');
        a6.find('span#feed-lastposted').html(a3.latestitem > 0 ? L.timeAgo(a3.latestitem) : '-');
        a6.find('input#feed-username').val(a3.username || '');
        a6.find('input#feed-password').val(a3.password || '');
        a6.find('select#feed-proxy').val(a3.proxy || 0);
        var aZ = K().getFolders();
        var a5 = a8 ? a8.id : K().getLastFolderId();
        if (a5 == undefined) {
            a5 = -1;
        }
        var a1 = a6.find('select#feed-folder');
        var a0, a7, a2, aY, a4 = '<option value=\'-1\'>' + Locale.i18n('common_root', true) + '</option>';
        for (a2 = 0; a2 < aZ.length; a2++) {
            aY = '';
            if (aZ[a2].id == a5) {
                aY = ' selected=\'selected\'';
            }
            a4 += '<option' + aY + ' value="' + aZ[a2].id + '">' + aZ[a2].name + '</option>';
        }
        a1.html(a4);
        a6.find('select#feed-maxitems').val(a3.maxitems || 'default');
        a6.find('select#feed-scandelay').val(a3.scandelay || 'default');
        a6.find('select#entrycontent').val(a3.entrycontent || '1');
        a6.css({display: 'block'});
        a0 = (window.innerWidth / 2) - (a6.outerWidth() / 2);
        a7 = (window.innerHeight / 2) - (a6.outerHeight() / 2);
        a6.css({top: a7 + 'px', left: a0 + 'px'});
        a6.find('input#feed-url').focus();
    }

    function aM() {
        var bb = $('div#feeddialog');
        var a5 = bb.find('select#feed-maxitems option:selected').val();
        var bc = bb.find('select#feed-scandelay option:selected').val();
        var ba = parseInt(bb.find('select#feed-proxy option:selected').val(), 10);
        var a6 = K();
        var a2 = bb.find('input#feed-url').val();
        if (!a2 || a2 == '' || jQuery.trim(a2) == '' || a2.length < 5) {
            alertify.alert(Locale.i18n('savefeed_error_url', true));
            return;
        }
        var bh = bb.find('input#feed-title').val();
        if (!bh || bh == '' || jQuery.trim(bh) == '' || bh.length < 2) {
            alertify.alert(Locale.i18n('savefeed_error_title', true));
            return;
        }
        var bf = bb.find('select#feed-folder').val();
        var bg = parseInt(bb.find('select#entrycontent').val(), 10);
        a6.setLastFolderId(parseInt(bf, 10));
        var a9 = a6.getFeedTree().getNode(aW);
        if (!a9) {
            var aY = a6.getNodesWithUrl(a2);
            if (aY.length > 0) {
                a9 = aY[0];
                var bd;
                if (a9.parent && a9.parent.data && a9.parent.data.type == 2) {
                    bd = a9.parent.data.name;
                }
                if (bd) {
                    alertify.alert(Locale.i18n('savefeed_error_duplicate_infolder', true, bd, a9.data.name));
                } else {
                    alertify.alert(Locale.i18n('savefeed_error_duplicate', true, a9.data.name));
                }
                return;
            }
            var a8 = a6.addFeed(a2, bh, bh, bf);
            if (bf != -1) {
                $('div#navigator').tree('appendNode', {
                    name: bh,
                    id: a8,
                    type: 1
                }, $('div#navigator').tree('getNodeById', bf));
            } else {
                $('div#navigator').tree('appendNode', {name: bh, id: a8, type: 1});
            }
            a9 = a6.getFeedTree().getNode(a8);
            a9.data.entrycontent = bg;
            a6.loadFeedItems(a8);
        }
        var be = a9.data;
        if (a5 == 'default') {
            a5 = undefined;
        }
        if (bc == 'default') {
            bc = undefined;
        }
        be.maxitems = a5;
        be.scandelay = bc;
        be.proxy = ba;
        be.name = bh;
        be.url = a2;
        be.entrycontent = bg;
        var a0 = bb.find('input#feed-username').val();
        var aZ = bb.find('input#feed-password').val();
        if (a0 && a0 != '') {
            be.username = a0;
            be.password = aZ;
        }
        var a7 = a9.parent.data ? a9.parent.data.id : -1;
        if (bf != a7) {
            a6.moveNode(a9.data.id, bf, 'inside');
            var a3 = $('div#navigator').tree('getNodeById', a9.data.id);
            var a4;
            if (bf != -1) {
                a4 = $('div#navigator').tree('getNodeById', bf);
            } else {
                a4 = $('div#navigator').tree('getRoot');
            }
            var a1 = a3.parent.id;
            $('div#navigator').tree('moveNode', a3, a4, 'inside');
            p(a3.id);
            if (a1) {
                p(a1);
            }
        }
        a6.saveData();
        bb.find('button#feed-cancel').click();
        if (a9) {
            p(a9.data.id);
        }
    }

    function ao(aY) {
        if (aY) {
            var aZ = K().getSettings().getConfirmMarkReadMode();
            if (aZ == 3) {
                alertify.confirm(Locale.i18n('navigator_action_markread_confirm', true, K().getFeedTree().getNode(aY.id).data.name), function (a0) {
                    if (a0) {
                        K().markAsRead(aY.id);
                        aj(aY);
                    }
                });
            } else {
                K().markAsRead(aY.id);
                aj(aY);
            }
        } else {
            alertify.alert(Locale.i18n('navigator_action_markread_noselection', true));
        }
    }

    function y() {
        var aY = K().getSettings().getConfirmMarkReadMode();
        if (aY == 2 || aY == 3) {
            alertify.confirm(Locale.i18n('navigator_action_markread_all_confirm', true), function (aZ) {
                if (aZ) {
                    K().markAllAsRead();
                    aj();
                }
            });
        } else {
            K().markAllAsRead();
            aj();
        }
    }

    function aj(aY) {
        if ($('div#navigator').tree('getSelectedNode') == aY || $('div#mainfunctions div#starreditems').hasClass('menu-selected') || $('div#mainfunctions div#allitems').hasClass('menu-selected') || $('div#mainfunctions div#tagnav').hasClass('menu-selected')) {
            $('div#titles div.item').removeClass('unread');
        }
    }

    function t() {
        if (I && I.action == 'loadall') {
            y();
        } else {
            ao($('div#navigator').tree('getSelectedNode'));
        }
    }

    function u(a1, a0, a3) {
        if (a1.action == 'addfeed') {
            var a2 = K().getFeedTree().getNode(a1.id).data;
            if (a1.parentid < 0) {
                $('div#navigator').tree('appendNode', {name: a2.name, id: a1.id, type: 1});
            } else {
                var aZ = $('div#navigator').tree('getNodeById', a1.parentid);
                $('div#navigator').tree('appendNode', {name: a2.name, id: a1.id, type: 1}, aZ);
            }
            p(a1.id);
        } else {
            if (a1.action == 'updatenode') {
                p(a1.id);
            } else {
                if (a1.action == 'reloaddata') {
                    $('div#navigator').tree('loadData', T());
                } else {
                    if (a1.action == 'updatetheme') {
                        x();
                    } else {
                        if (a1.action == 'updateview') {
                            aH();
                        } else {
                            if (a1.action == 'updatecss') {
                                ab();
                            }
                        }
                    }
                }
            }
        }
        if (a3) {
            try {
                a3();
            } catch (aY) {
                console.log(aY);
            }
        }
    }

    function X(aY) {
        if (!aY.start) {
            aY.start = 0;
        }
        if (!aY.count) {
            aY.count = 30;
        }
        if (K().isUnreadSearch(aY) && aY.single != true) {
            aY.unread = 1;
        }
        chrome.runtime.sendMessage(aY, function (a0) {
            var aZ = K().getFeedEntries();
            V(aY, aZ, aZ.length < 1 ? {message: Locale.i18n('showarticles_nomatches', true)} : undefined);
            if (aY.id) {
                p(aY.id);
            }
        });
    }

    function N(a0, aZ) {
        var aY = $('div#blogentrypost-' + a0 + ' > div.entry-title span.readtoggle-entry-upper > img');
        aY.attr('src', aZ ? 'images/icon-unread.png' : 'images/icon-read.png');
    }

    function aD(aZ) {
        var a0 = aZ.prop('checked');
        var a2 = parseInt(aZ.attr('id').substring(7), 10);
        K().markUnread(a2, a0 ? 1 : 0);
        N(a2, a0);
        var aY = $('div#titles > div.activetitle');
        if (aY.length > 0) {
            if (a0) {
                aY.addClass('unread');
            } else {
                aY.removeClass('unread');
            }
        }
        var a1 = $('div.entry.active');
        if (a1.length > 0) {
            if (a0) {
                a1.addClass('unread');
            } else {
                a1.removeClass('unread');
            }
        }
    }

    function aJ(a1) {
        var a2, aZ = a1.attr('id');
        var aY = $('div.activetitle');
        if (!aZ) {
            return;
        }
        var a0;
        if (aZ.indexOf('topstar') == 0) {
            a2 = aZ.substring(8);
            a0 = $('span#star-' + a2);
        } else {
            a2 = aZ.substring(5);
            a0 = $('span#topstar-' + a2);
        }
        a2 = parseInt(a2, 10);
        if (a1.hasClass('starred')) {
            a1.removeClass('starred');
            a0.removeClass('starred');
            if (aY.length > 0) {
                aY.find('div.item-pin').removeClass('pinned');
            }
        } else {
            a1.addClass('starred');
            a0.addClass('starred');
            if (aY.length > 0) {
                aY.find('div.item-pin').addClass('pinned');
            }
        }
        K().toggleItemStarred(a2);
    }

    function z() {
        var aZ = 1024;
        var aY = 850;
        if (aY > screen.height) {
            aY = screen.height - 50;
        }
        var a1 = Math.round((screen.width / 2) - (aZ / 2));
        var a0 = Math.round((screen.height / 2) - (aY / 2));
        chrome.windows.create({
            url: chrome.runtime.getURL('help.html'),
            type: 'popup',
            width: aZ,
            height: aY,
            top: a0,
            left: a1
        });
    }

    function D(a5) {
        var a0, a3, aY, a2, aZ, a6, a1 = $(a5.target);
        if (a5.target && (a1.is('input') || a1.is('select'))) {
            return;
        }
        if ((a5.keyCode == 79 || a5.keyCode == 13) && a5.shiftKey) {
            aY = $('div#navigator').tree('getSelectedNode');
            Q({node: aY}, true);
            am(a5);
        } else {
            if ((a5.keyCode == 78 || a5.keyCode == 40) && a5.shiftKey) {
                a6 = $('div#navigator');
                aY = a6.tree('getSelectedNode');
                a2 = K().getFeedTree().getNodeSibling(aY.id, 2);
                if (a2) {
                    a6.tree('selectNode', a6.tree('getNodeById', a2.data.id));
                }
                am(a5);
            } else {
                if ((a5.keyCode == 80 || a5.keyCode == 38) && a5.shiftKey) {
                    a6 = $('div#navigator');
                    aY = a6.tree('getSelectedNode');
                    a2 = K().getFeedTree().getNodeSibling(aY.id, 1);
                    if (a2) {
                        a6.tree('selectNode', a6.tree('getNodeById', a2.data.id));
                    }
                    am(a5);
                } else {
                    if (a5.keyCode == 85) {
                        ak();
                        am(a5);
                    } else {
                        if (a5.keyCode == 87 && !a5.shiftKey && !a5.ctrlKey && !a5.altKey) {
                            $('div#togglepanel').click();
                            am(a5);
                        } else {
                            if (a5.keyCode == 88 && a5.shiftKey) {
                                a6 = $('div#navigator');
                                aY = a6.tree('getSelectedNode');
                                if (!aY) {
                                    return;
                                }
                                var a4 = aY.parent;
                                if (!a4.parent) {
                                    a4 = aY;
                                }
                                a6.tree(a4.is_open ? 'closeNode' : 'openNode', a4, false);
                                a6.tree('selectNode', a4);
                                am(a5);
                            } else {
                                if (a5.key == '?' || (a5.keyCode == 187 && a5.shiftKey)) {
                                    z();
                                    am(a5);
                                } else {
                                    if (a5.keyCode == 65 && a5.shiftKey) {
                                        t();
                                        am(a5);
                                    } else {
                                        if (a5.keyCode == 84 && !a5.shiftKey && !a5.ctrlKey && !a5.altKey) {
                                            aB.activateAddTag();
                                            am(a5);
                                        } else {
                                            if (a5.keyCode == 33 || (a5.shiftKey && a5.keyCode == 32)) {
                                                aZ = $('div#feed');
                                                aZ.scrollTop(aZ.scrollTop() - aZ.height());
                                                am(a5);
                                            } else {
                                                if (a5.keyCode == 34 || a5.keyCode == 32) {
                                                    aZ = $('div#feed');
                                                    aZ.scrollTop(aZ.scrollTop() + aZ.height());
                                                    am(a5);
                                                } else {
                                                    if (!a5.shiftKey && !a5.ctrlKey && !a5.altKey && a5.keyCode == 49) {
                                                        aq(0);
                                                        am(a5);
                                                    } else {
                                                        if (!a5.shiftKey && !a5.ctrlKey && !a5.altKey && a5.keyCode == 50) {
                                                            aq(1);
                                                            am(a5);
                                                        } else {
                                                            if (!a5.shiftKey && !a5.ctrlKey && !a5.altKey && a5.keyCode == 51) {
                                                                aq(2);
                                                                am(a5);
                                                            } else {
                                                                if (!a5.shiftKey && !a5.ctrlKey && !a5.altKey && a5.keyCode == 52) {
                                                                    aq(3);
                                                                    am(a5);
                                                                } else {
                                                                    if (!a5.shiftKey && !a5.ctrlKey && !a5.altKey && a5.keyCode == 53) {
                                                                        aq(4);
                                                                        am(a5);
                                                                    } else {
                                                                        if (!a5.shiftKey && !a5.ctrlKey && !a5.altKey && a5.keyCode == 54) {
                                                                            aq(5);
                                                                            am(a5);
                                                                        } else {
                                                                            if (a5.altKey && a5.keyCode == 49) {
                                                                                a3 = K().getSettings().getQuickTag('qtag1');
                                                                                if (a3 && a3 != '') {
                                                                                    aB.addStandardTag(a3);
                                                                                }
                                                                                am(a5);
                                                                            } else {
                                                                                if (a5.altKey && a5.keyCode == 50) {
                                                                                    a3 = K().getSettings().getQuickTag('qtag2');
                                                                                    if (a3 && a3 != '') {
                                                                                        aB.addStandardTag(a3);
                                                                                    }
                                                                                    am(a5);
                                                                                } else {
                                                                                    if (a5.altKey && a5.keyCode == 51) {
                                                                                        a3 = K().getSettings().getQuickTag('qtag3');
                                                                                        if (a3 && a3 != '') {
                                                                                            aB.addStandardTag(a3);
                                                                                        }
                                                                                        am(a5);
                                                                                    } else {
                                                                                        if (a5.altKey && a5.keyCode == 52) {
                                                                                            a3 = K().getSettings().getQuickTag('qtag4');
                                                                                            if (a3 && a3 != '') {
                                                                                                aB.addStandardTag(a3);
                                                                                            }
                                                                                            am(a5);
                                                                                        } else {
                                                                                            if (a5.altKey && a5.keyCode == 53) {
                                                                                                a3 = K().getSettings().getQuickTag('qtag5');
                                                                                                if (a3 && a3 != '') {
                                                                                                    aB.addStandardTag(a3);
                                                                                                }
                                                                                                am(a5);
                                                                                            } else {
                                                                                                if (a5.keyCode == 69 && !a5.ctrlKey && !a5.altKey) {
                                                                                                    a0 = 'entry.active';
                                                                                                    if (c == 2) {
                                                                                                        a0 = 'entry';
                                                                                                    }
                                                                                                    $('div.' + a0).find('a.share').click();
                                                                                                    $('div.opt.email').click();
                                                                                                    am(a5);
                                                                                                } else {
                                                                                                    if (a5.keyCode == 71 && !a5.altKey && !a5.shiftKey) {
                                                                                                        a0 = 'entry.active';
                                                                                                        if (c == 2) {
                                                                                                            a0 = 'entry';
                                                                                                        }
                                                                                                        $('div.' + a0).find('a.share').click();
                                                                                                        $('div.opt.gtranslate').click();
                                                                                                        am(a5);
                                                                                                    } else {
                                                                                                        if (a5.keyCode == 82 && I) {
                                                                                                            aH();
                                                                                                            am(a5);
                                                                                                        } else {
                                                                                                            if (c == feedbro.Engine.VIEWMODE_OPERA || c == feedbro.Engine.VIEWMODE_OPERA_IFRAME) {
                                                                                                                O(a5);
                                                                                                            } else {
                                                                                                                az(a5);
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    function aH() {
        Q(I, true);
    }

    function am(aZ) {
        try {
            if (aZ.preventDefault) {
                aZ.preventDefault();
            }
        } catch (aY) {
            console.log('skipDefault failed: ' + aY);
        }
    }

    function az(a7) {
        var a3 = $('div.active');
        var a4, a2, a5;
        if (a7.keyCode == 74 || (!a7.shiftKey && !a7.ctrlKey && a7.keyCode == 78) || (a7.shiftKey && a7.keyCode == 39)) {
            a4 = a3.nextAll('div.entry:first');
            am(a7);
        } else {
            if (a7.keyCode == 75 || (!a7.shiftKey && !a7.ctrlKey && a7.keyCode == 80) || (a7.shiftKey && a7.keyCode == 37)) {
                a4 = a3.prevAll('div.entry:first');
                am(a7);
            } else {
                if (a7.keyCode == 86 && a3.length > 0) {
                    chrome.tabs.create({url: a3.find('a.entry-link').attr('href'), active: false}, function (bf) {
                    });
                    a3.removeClass('unread');
                    try {
                        var a0 = a3.attr('id');
                        if (a0) {
                            a0 = parseInt(a0.substring(a0.indexOf('-') + 1), 10);
                            K().markUnread(a0, 0);
                        }
                    } catch (a8) {
                        console.log('Open post \'v\' error: ', a8);
                    }
                    am(a7);
                } else {
                    if (!a7.shiftKey && !a7.ctrlKey && a7.keyCode == 76 && a3.length > 0) {
                        var be = a3.find('a.entry-link');
                        var aY = be.attr('href');
                        var bb = be.text();
                        i(aY, bb);
                        am(a7);
                    } else {
                        if ((a7.keyCode == 13 || a7.keyCode == 79) && a3.length > 0) {
                            if ($('section#alertify').hasClass('alertify-confirm') == false) {
                                if (c == feedbro.Engine.VIEWMODE_NEWS || c == feedbro.Engine.VIEWMODE_NEWSLINEMODE) {
                                    if (a3.hasClass('entry-newspaper')) {
                                        a3.find('div.entry-newspaper-section').click();
                                    } else {
                                        a3.addClass('entry-newspaper');
                                        a3.find('div.entry-newspaper-section').css('display', 'block');
                                        var a6 = $('div#feed');
                                        var a1 = parseInt(a6.css('padding-top'), 10);
                                        if (isNaN(a1)) {
                                            a1 = 0;
                                        }
                                        a6.scrollTop(a6.scrollTop() + Math.round(a3.offset().top) - B() - a1);
                                    }
                                } else {
                                    a3.find('div.entry-header').click();
                                }
                                am(a7);
                            }
                        } else {
                            if (a7.keyCode == 83 && a3.length > 0) {
                                var bd = a3.find('> div.entry-body > div.itemlinks > span.star');
                                aJ(bd);
                                am(a7);
                            } else {
                                if (a7.keyCode == 68 && a7.shiftKey) {
                                    $('div.entry').each(function (bf, bh) {
                                        var bg = $(bh);
                                        var bj = bg.attr('id');
                                        var bi = bj.indexOf('-');
                                        if (bi > 0) {
                                            bj = bj.substring(bi + 1);
                                            a(bj, 1);
                                        }
                                    });
                                    alertify.success(Locale.i18n('navigator_action_deleteall_success', true));
                                    am(a7);
                                } else {
                                    if ((a7.keyCode == 68 || a7.keyCode == 46) && !a7.altKey && !a7.ctrlKey && a3.length > 0) {
                                        var aZ = a3.attr('id');
                                        if (aZ == undefined) {
                                            return;
                                        }
                                        var a9 = aZ.indexOf('-');
                                        if (a9 > 0) {
                                            aZ = aZ.substring(a9 + 1);
                                            $('div#blogentrypost-' + aZ).hide();
                                            if (a3.nextAll('div.entry:first').length > 0) {
                                                D({keyCode: 74});
                                            } else {
                                                D({keyCode: 75});
                                            }
                                            a(aZ, 1);
                                        }
                                        am(a7);
                                    } else {
                                        if (a7.keyCode == 77 && a3.length > 0) {
                                            ar(parseInt(a3.attr('data-id'), 10));
                                            am(a7);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (a4 && a4.length > 0) {
            var bc = $('div#feed');
            var ba = parseInt(bc.css('padding-top'), 10);
            if (isNaN(ba)) {
                ba = 0;
            }
            a3.removeClass('active');
            a4.addClass('active');
            bc.scrollTop(bc.scrollTop() + Math.round(a4.offset().top) - B() - ba);
        }
    }

    function O(a7) {
        var a1 = $('div.activetitle');
        var a3, a0, a4, a2;
        if (a7.keyCode == 74 || (!a7.shiftKey && !a7.ctrlKey && a7.keyCode == 78) || (a7.shiftKey && a7.keyCode == 39)) {
            a3 = a1.nextAll('div.item:first');
            am(a7);
        } else {
            if (a7.keyCode == 75 || (!a7.shiftKey && !a7.ctrlKey && a7.keyCode == 80) || (a7.shiftKey && a7.keyCode == 37)) {
                a3 = a1.prevAll('div.item:first');
                am(a7);
            } else {
                if (a7.keyCode == 86 && a1.length > 0) {
                    chrome.tabs.create({
                        url: $('div.entry').find('a.entry-link').attr('href'),
                        active: false
                    }, function (bf) {
                    });
                    am(a7);
                } else {
                    if (a7.keyCode == 76 && !a7.altKey && !a7.ctrlKey && a1.length > 0) {
                        var be = $('div.entry').find('a.entry-link');
                        var aY = be.attr('href');
                        var a9 = be.text();
                        i(aY, a9);
                        am(a7);
                    } else {
                        if (a7.keyCode == 83 && a1.length > 0) {
                            var bc = $('div#feed div.entry-body div.itemlinks span.star');
                            aJ(bc);
                            am(a7);
                        } else {
                            if (a7.keyCode == 68 && a7.shiftKey) {
                                $('div#titles > div.item[data-key]').each(function (bf, bh) {
                                    var bg = $(bh);
                                    var bi = bg.attr('data-key');
                                    a(bi, 1);
                                    bg.remove();
                                });
                                $('div.entry').remove();
                                alertify.success(Locale.i18n('navigator_action_deleteall_success', true));
                                am(a7);
                            } else {
                                if ((a7.keyCode == 68 || a7.keyCode == 46) && !a7.altKey && !a7.ctrlKey && a1.length > 0) {
                                    var aZ = a1.data('key');
                                    $('div#blogentrypost-' + aZ).hide();
                                    if (a1.nextAll('div.item:first').length > 0) {
                                        D({keyCode: 74});
                                    } else {
                                        D({keyCode: 75});
                                    }
                                    a1.remove();
                                    a(aZ, 1);
                                    am(a7);
                                } else {
                                    if (a7.keyCode == 77 && a1.length > 0) {
                                        ar(parseInt($('div.entry').attr('data-id'), 10));
                                        am(a7);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (a3 && a3.length > 0) {
            a1.removeClass('activetitle');
            a3.addClass('activetitle');
            var a5 = $('div#titles');
            var bb = {top: a5.position().top, left: a5.position().left};
            bb.bottom = bb.top + a5.height();
            bb.right = bb.left + a5.width();
            if (!W(a3, bb)) {
                var a6 = a3.position().top;
                var a8 = a3.outerHeight();
                var ba = a6 + a8;
                var bd = a5.height();
                if (ba > bd) {
                    a5.scrollTop(a5.scrollTop() + ba - bd - B());
                } else {
                    if (a6 < bb.top) {
                        a5.scrollTop(a5.scrollTop() - (bb.top - a6));
                    }
                }
            }
            a3.click();
        }
    }

    function i(aZ, a1, aY) {
        var a0 = 'https://getpocket.com/edit.php?url=' + aZ + '&title=' + a1;
        if (aY) {
            a0 = a0 + '?tags=' + encodeURIComponent(aY.replace(/,/g, ' '));
        }
        $.get(a0, function (a4) {
            if (a4.indexOf('You have successfully saved') != -1) {
                alertify.set({delay: 2000});
                alertify.success(Locale.i18n('article_action_pocket_success', true, a1));
            } else {
                var a3 = 870;
                var a2 = 700;
                var a6 = (screen.width / 2) - (a3 / 2);
                var a5 = (screen.height / 2) - (a2 / 2);
                window.open(a0, 'pocket', 'toolbar=no,scrollbars=0,width=' + a3 + ',height=' + a2 + ',top=' + a5 + ',left=' + a6);
            }
        });
    }

    function W(a0, aY) {
        var a1 = $(a0);
        var aZ = {top: a1.offset().top, left: a1.offset().left};
        aZ.bottom = aZ.top + a1.height();
        aZ.right = aZ.left + a1.width();
        if (aZ.top < aY.top || aZ.bottom > aY.bottom || aZ.left < aY.left || aZ.right > aY.right) {
            return false;
        } else {
            return true;
        }
    }

    function m() {
        H({id: -1000});
    }

    function b() {
        alertify.prompt(Locale.i18n('navigator_action_addfolder_prompt', true), function (aZ, a0) {
            if (aZ) {
                var aY = a0;
                if (!aY || aY == '') {
                    return;
                }
                if (aY.length < 1 || aY.length > 35) {
                    alertify.alert(Locale.i18n('navigator_action_addfolder_toolong', true));
                    return;
                }
                var a1 = K().addFolder(aY);
                $('div#navigator').tree('appendNode', {name: aY, id: a1, type: 2});
                p(a1);
                f();
            }
        });
    }

    function aE(aY) {
        return function () {
            var aZ = $(this);
            var a1 = aZ.position();
            var a0 = $('div#feedbro-sharebox');
            a0.css({display: 'block', top: (1 + a1.top + aZ.outerHeight()) + 'px', left: a1.left + 'px'});
            if (a0.position().top - $(window).scrollTop() + a0.outerHeight() > $(window).height()) {
                a0.css({top: a1.top - a0.outerHeight() - 1});
            }
            a0.data('url', aY.link + '');
            a0.data('title', aY.title + '');
            return false;
        };
    }

    function h(aY) {
        var a0 = aY.getAttribute('id');
        var aZ = parseInt(a0.substring(8), 10);
        K().markUnread(aZ, 0);
    }

    function F(a2) {
        var a4, a3, aY, a1, a5 = $(a2.target);
        if (a2.target != this && a5.hasClass('itemlinks') == false && a5.hasClass('entry-title-wrapper') == false && a5.hasClass('entry-title-wrapper-dummy') == false && a5.hasClass('entry-header') == false && a5.hasClass('entry-title') == false && a5.hasClass('fromline') == false && a5.hasClass('entry-date') == false && a5.hasClass('entry-title-td') == false) {
            return;
        }
        a4 = $('div.active');
        if (a4.length > 0) {
            a4.removeClass('active');
        }
        a1 = $(this);
        a1.addClass('active');
        if (c == feedbro.Engine.VIEWMODE_HEADLINES) {
            var aZ = a1.find('div.entry-body');
            var a0 = a1.find('td.entry-title-td > div');
            a3 = aZ.css('display') || 'block';
            aY = (a3 == 'none' ? 'block' : 'none');
            if (aY == 'block') {
                ay(aZ.find('blockquote:first'));
            }
            aZ.css({display: aY});
            if (aY == 'block') {
                a1.removeClass('clickopen');
                a1.attr('title', '');
                a0.removeClass('entry-title-wrapper');
                a0.addClass('entry-title-wrapper-dummy');
            } else {
                a1.addClass('clickopen');
                a1.attr('title', Locale.i18n('article_header_clickopen', true));
                a0.removeClass('entry-title-wrapper-dummy');
                a0.addClass('entry-title-wrapper');
            }
        }
    }

    function e(aZ, aY) {
        K().removeTag(aZ.data('id'), aY);
    }

    function aI(aZ, aY) {
        at(aY);
    }

    function aL(aY) {
        return function (a0, aZ) {
            if (K().addTag(a0.data('id'), aZ)) {
                if (L.inArray(aZ, aY, true) == false) {
                    aY.push(aZ);
                }
            }
        };
    }

    function k(aY) {
        aJ($(this));
        aY.stopPropagation();
    }

    function g(aY) {
        aD($(this));
        aY.stopPropagation();
    }

    function C(a0) {
        if (c == feedbro.Engine.VIEWMODE_OPERA || c == feedbro.Engine.VIEWMODE_OPERA_IFRAME) {
            D({keyCode: 68});
        } else {
            var aZ = $(this);
            var a2 = aZ.data('id');
            var a1 = $('div.entry.active');
            if (a1.length > 0 && a1.attr('id') == ('blogentrypost-' + a2)) {
                var aY = a1.next('div.entry');
                if (aY.length == 0) {
                    aY = a1.prev('div.entry');
                }
                if (aY.length > 0) {
                    a1.removeClass('active');
                    aY.addClass('active');
                }
            }
            a(a2, 1);
        }
        a0.stopPropagation();
        return false;
    }

    this.previewFeed = function (aZ, a0, a2, a1, aY) {
        K().previewFeed(aZ, a0, a1, aY, function (a3) {
            var a5 = {action: 'preview', firstload: true};
            var a7 = {
                author: a3.feed.author,
                title: a3.feed.title,
                link: a3.feed.link,
                url: aZ,
                name: a3.feed.title,
                status: a3.status,
                latestitem: 0
            };
            if (a3.feed.latestitemdate) {
                a7.latestitem = a3.feed.latestitemdate.getTime();
            }
            var a4, a6 = a3.feed.entries.length;
            for (a4 = 0; a4 < a6; a4++) {
                a3.feed.entries[a4].feed = a7;
            }
            a5.feed = a7;
            V(a5, a3.feed.entries);
            if (a2) {
                a2();
            }
        });
    };

    function V(a1, aY) {
        R = K().getSettings();
        if (a1.action == 'loadsingle' || a1.action == 'preview') {
            try {
                var aZ = c;
                c = feedbro.Engine.VIEWMODE_FULL;
                al(a1, aY);
                c = aZ;
            } catch (a0) {
                console.log('displayFeedItems load single failed', a0);
            }
        } else {
            if (c == feedbro.Engine.VIEWMODE_FULL || c == feedbro.Engine.VIEWMODE_HEADLINES || c == feedbro.Engine.VIEWMODE_NEWS || c == feedbro.Engine.VIEWMODE_NEWSLINEMODE) {
                try {
                    al(a1, aY);
                } catch (a0) {
                    console.log('displayFeedItemsStandard failed', a0);
                }
            } else {
                if (c == feedbro.Engine.VIEWMODE_OPERA || c == feedbro.Engine.VIEWMODE_OPERA_IFRAME) {
                    try {
                        G(a1, aY);
                    } catch (a0) {
                        console.log('displayFeedItemsOpera failed', a0);
                    }
                }
            }
        }
        U();
    }

    function U() {
        try {
            feedbro.Youtube.process();
        } catch (aY) {
            console.log('Failed to process Youtube video elements', aY);
        }
    }

    function Z(aY) {
        if (aY) {
            $('div#titles').show();
            $('div#dragbar2').show();
        } else {
            $('div#titles').hide();
            $('div#dragbar2').hide();
        }
    }

    function aK(a0, aZ, a3) {
        if (a0.firstload == true) {
            aP.clear();
            var a2 = $('div#titles');
            a2.find('div.item').removeData('feeditem');
            a2.empty();
            var aY = $('div#feed');
            aY.empty();
            aY.html('<div class=\'feed-header\'></div>');
            aY.attr('data-viewmode', (c + 1));
            if (a0.action == 'preview' && a0.feed) {
                if (a0.feed.status != 200) {
                    aY.append('<div class=\'previewheader-error\'>' + Locale.i18n('preview_error', true) + ': <a rel=\'noopener noreferrer\' href=\'' + a0.feed.url + '\'>' + a0.feed.status + '</a> ' + an(a0.feed.status) + '</div>');
                } else {
                    aY.append('<div class=\'previewheader\'><div class=\'previewheader-text\'>' + Locale.i18n('preview_header', true) + ' <a rel=\'noopener noreferrer\' href=\'' + a0.feed.url + '\'>' + L.escapeHtml(a0.feed.title) + '</a></div><button id=\'addpreviewfeed\' class=\'alertify-button alertify-button-ok\'>' + Locale.i18n('preview_subscribe', true) + '</button></div>');
                    aY.find('button#addpreviewfeed').click(function () {
                        H(a0.feed);
                    });
                }
            } else {
                if (a3) {
                    var a1 = a3.url ? '<div class="info-link"><a href="' + a3.url + '">' + a3.url + '</a></div>' : '';
                    aY.append('<br><div class=\'info\'>' + (a3.code ? '<div class=\'info-code\'>' + a3.code + '</div>' : '') + '<div class=\'info-message\'>' + a3.message + '</div>' + a1 + '</div>');
                } else {
                    if (aZ.length < 1) {
                        aY.append('<div class=\'info\'><div class=\'info-message\'>' + Locale.i18n('showarticles_noentries', true) + '</div></div>');
                        return false;
                    }
                }
            }
            s = -1;
        }
        return true;
    }

    function al(ba, a4, aY) {
        Z(false);
        if (!aK(ba, a4, aY)) {
            return;
        }
        if (!ba.index) {
            ba.index = 0;
        }
        var a1 = K();
        var a6 = a1.getRuleEngine();
        var a7 = a1.getSettings().getDateFormat();
        var aZ = $('div#feed');
        if (ba.metaStart) {
            ba.start = ba.metaStart;
        }
        if (ba.metaIndex) {
            ba.index = ba.metaIndex;
        }
        var a2 = ba.index;
        var a9 = 'load-' + (parseInt(ba.start, 10) + ba.count) + '-' + ba.count;
        var a5 = Object.keys(a1.getTagCloud());
        var a0, a8, a3 = false;
        for (a0 = 0; a0 < a4.length; a0++, a2++) {
            a8 = a4[a0];
            aN(a8, a0, a2, ba, a5, a6, a7);
            if (a0 + 2 == a4.length && a4.length == ba.count && ba.action != 'preview') {
                aZ.append('<div class=\'lazyload\' id=\'' + a9 + '\' data-skipuntil=\'' + a4[a0 + 1].id + '\'></div>');
                a3 = true;
            }
        }
        if (ba.firstload == true) {
            aZ.scrollTop(0);
        }
        if (ba.action != 'preview' && a3) {
            aP.once(a9, S(a2, ba, true));
        }
        aZ.focus();
        a1.getSoundPlayer().playQueueUniques();
        aP.addEvents();
    }

    function G(a3, a6, bf) {
        var bc, a4 = '', bm, aY, a5, bk, aZ, a1;
        if (a3.metaStart) {
            a3.start = a3.metaStart;
        }
        if (a3.metaIndex) {
            a3.index = a3.metaIndex;
        }
        var bj = 'load-' + (parseInt(a3.start, 10) + a3.count) + '-' + a3.count;
        var a2;
        var a0 = K();
        var a8 = a0.getRuleEngine();
        var be = a0.getSettings();
        var bb = be.getDateFormat();
        var a7 = be.getUseFavIconsTitles();
        var bi = Object.keys(a0.getTagCloud());
        var bh;
        var ba = $('div#titles');
        var bd = $('div#feed');
        var bl = false;
        Z(true);
        if (!aK(a3, a6, bf)) {
            return;
        }
        if (!a3.index) {
            a3.index = 0;
        }
        a2 = a3.index;
        for (bc = 0; bc < a6.length; bc++) {
            aY = a6[bc];
            if (aY.content == q) {
                a0.markUnread(aY.id, 0);
                continue;
            }
            if (aY.title == undefined || aY.title.length < 2) {
                L.fixTitle(aY);
            }
            a4 = '';
            a5 = L.getDateTag(aY.publishedDate.getTime());
            if (!a3.prevtag || a5.tag != a3.prevtag.tag) {
                ba.append('<div class=\'datedivider\'>' + a5.tag + '</div>');
                a3.prevtag = a5;
            }
            bk = aY.publishedDate.format(a5.format);
            a4 += '<div class="item" data-key="' + aY.id + '">';
            a4 += '<div class="item-title' + (w(aY.title) ? ' rtl-layout' : '') + '" id="item-title-' + aY.id + '">' + aO(L.stripTags(aY.title)) + '</div>';
            a4 += '<div class="item-pin"></div>';
            a4 += '<div class="item-author' + (w(aY.feed.title) ? ' rtl-layout' : '') + '">' + (a7 ? ah(aY.link) : '') + aO(L.stripTags(aY.feed.title)) + '</div>';
            a4 += '<div class="item-date">' + bk + '</div>';
            a4 += '</div>';
            aZ = $(a4);
            try {
                a8.process(feedbro.RuleEngine.EVENT_ITEM_VIEWED, aY, aZ, feedbro.RuleEngine.IGNORE_ACTIONS_VIEW);
            } catch (a9) {
                console.log('ruleEngine.process failed: ', a9, a8, aZ);
            }
            if (aY.starred == 1) {
                aZ.find('div.item-pin').addClass('pinned');
            }
            if (aY.unread == 1) {
                aZ.addClass('unread');
            }
            if (a3.firstload == true && a1 == undefined && aZ.hasClass('item')) {
                aZ.addClass('activetitle');
                bh = aZ;
                a1 = true;
            }
            aZ.data('feeditem', aY);
            ba.append(aZ);
            if (R.getMathJaxEnabled()) {
                try {
                    if (n.shouldRender(aY.title)) {
                        n.render('item-title-' + aY.id);
                    }
                } catch (a9) {
                    console.log('Could not render MathJax: ', a9);
                }
            }
            if (bc + 2 == a6.length && a6.length == a3.count) {
                ba.append('<div class=\'lazyload\' id=\'' + bj + '\' data-skipuntil=\'' + a6[bc + 1].id + '\'></div>');
                bl = true;
            }
            aZ.click(E(aY, bc, a2, a3, bi, a8, bb));
            aZ.bind('contextmenu', function (bo) {
                var bn = $(this);
                var bg = bn.data('feeditem');
                chrome.tabs.create({url: bg.link, active: bo.ctrlKey}, function (bp) {
                });
                chrome.extension.getBackgroundPage().feedbrobg.markUnread(bg.id, 0);
                bn.removeClass('unread');
                return false;
            });
            a2++;
        }
        if (bl) {
            aP.once(bj, S(a2, a3, false));
        }
        aP.addEvents();
        if (bh != undefined && R.getDisableAutoSelect() != true) {
            bh.click();
        }
        if (a3.firstload == true) {
            ba.scrollTop(0);
        }
    }

    function ah(aY) {
        return '<img src="' + af.getIconFromGoogleCache(aY) + '" class="titlesfavicon">';
    }

    function x() {
        $('link#theme').attr('href', 'styles/theme-' + K().getSettings().getTheme() + '.css');
    }

    function ab() {
        var a3 = K().getSettings();
        var aY = 'font-size: ' + a3.getArticleBodyFontSize() + '%';
        var a1 = 'line-height: ' + a3.getArticleLineHeight() + '; ';
        var a0 = '';
        a0 += 'div.entry-body > blockquote { ' + a1 + aY + '; } div.entry-npsummary { ' + a1 + aY + ' !important; } ';
        a0 += 'div#titles div.item, div#feed div.entry { font-family: ' + a3.getArticleFontFamily() + ' !important; } ';
        if (a3.getJustifyText() == true) {
            a0 += 'div#feed > div.entry > div.entry-body > blockquote { text-align: justify; } ';
        }
        if (a3.getTruncateTitles() == false) {
            a0 += '.entry-title-wrapper { white-space: normal !important; overflow: visible !important; } ';
        }
        var aZ, a2;
        for (aZ = 1; aZ <= 6; aZ++) {
            a2 = a3.getArticleWidth(aZ);
            if (a2 != -1 && a2 != '-1') {
                switch (aZ) {
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                        a0 += 'div#feed[data-viewmode="' + aZ + '"] > div.entry { max-width: ' + a2 + 'px; margin-left: auto; margin-right: auto; }';
                        break;
                }
            }
        }
        a2 = a3.getTitleFontSize();
        if (a2 != 100) {
            a0 += '.entry-link, .entry-nptitle-a { font-size: ' + a2 + '%; }';
        }
        a2 = a3.getCardHeight();
        if (a2 != -1) {
            a0 += 'div#feed[data-viewmode="4"] > div.entry > .entry-newspaper-section { height: ' + a2 + 'px; }';
        }
        $('style#settings').html(a0);
    }

    function E(a3, a2, a0, a1, aZ, a4, aY) {
        return function () {
            var a5 = $(this);
            var a7 = a5.data('feeditem');
            var a8 = $('div#feed');
            var a6 = K();
            var a9 = R.getMarkReadMode();
            a8.empty();
            aN(a7, a2, a0, a1, aZ, a4, aY);
            $('div.item').removeClass('activetitle');
            a5.addClass('activetitle');
            if (a9 != 3) {
                a6.markUnread(a7.id, 0);
                a5.removeClass('unread');
            }
            $('div#feed > div.entry').removeClass('active');
            a8.scrollTop(0);
            a6.getSoundPlayer().playQueueUniques();
            U();
        };
    }

    function S(aY, aZ, a0) {
        return function (a4) {
            var a1 = a4.getAttribute('id');
            var a3 = parseInt(a4.getAttribute('data-skipuntil'), 10);
            var a2 = a1.substring(5).split('-');
            if (aZ.unread == 1) {
                aZ.start = 0;
                aZ.skipUntil = a3;
                aZ.metaStart = parseInt(a2[0], 10);
                aZ.metaIndex = aY;
            } else {
                aZ.start = parseInt(a2[0], 10);
                aZ.index = aY;
            }
            aZ.count = parseInt(a2[1], 10);
            aZ.firstload = false;
            X(aZ);
        };
    }

    this.engineInit = function () {
        if (chrome.extension.getBackgroundPage() == null) {
            $('body').css({'background-color': '#25003E'});
            $('body').html('<div style=\'font-size: 2em; color: #fff; font-family: "Open Sans", sans-serif; position: absolute; width: 700px; height: 150px; top: 50%; left: 50%; margin-left: -350px; margin-top: -75px;\'>Feedbro is not available in Private Browsing Mode</div>');
            return;
        }
        var a2 = K();
        var aZ = a2.getSettings();
        af.setSettings(aZ);
        x();
        ab();
        Locale.start();
        Locale.activeMap = a2.getActiveLocaleMap();
        Locale.translate(true);
        alertify.set({labels: {cancel: Locale.i18n('dialog_cancel', true), ok: Locale.i18n('dialog_ok', true)}});
        $('#markread').click(t);
        $('#addfeed').click(function () {
            m();
        });
        $('#addfolder').click(function () {
            b();
        });
        $('div#togglepanel').click(function () {
            var a4 = $('div#leftpane').css('display');
            a4 = (a4 == 'flex') ? 'none' : 'flex';
            $('div#leftpane').css('display', a4);
        });
        $('div#supportfeedbro').click(function () {
            window.open('https://www.paypal.me/nodetics/5', '_blank');
        });
        $('div#openfbhelp').click(function () {
            z();
        });
        $('div#reloadall').click(function () {
            alertify.success(Locale.i18n('navigator_action_reload', true));
            K().scanUnread(true);
        });
        $('div#starreditems').click(function () {
            v();
            var a4 = {node: {name: 'starred'}, action: 'loadstarred'};
            $('div#starreditems').addClass('menu-selected');
            Q(a4, true);
        });
        $('div#allitems').click(function () {
            v();
            var a4 = {node: {name: 'allitems'}, action: 'loadall'};
            $('div#allitems').addClass('menu-selected');
            Q(a4, true);
        });
        $('button#prevItem').click(function () {
            D({keyCode: 75});
        });
        $('button#nextItem').click(function () {
            D({keyCode: 74});
        });
        $('a.link-import').click(function () {
            ad('Feedbro - Options', 'options.html');
            return false;
        });
        $('a.link-addfeed').click(function () {
            m();
            return false;
        });
        $('a.link-addfolder').click(function () {
            b();
            return false;
        });
        $('a.link-settings').click(function () {
            ad('Feedbro - Options', 'options.html');
            return false;
        });
        $('a.link-readall').click(function () {
            $('div#allitems').click();
            return false;
        });
        $('a.link-help').click(function () {
            z();
            return false;
        });
        $('div#stats').click(function () {
            v();
            $('div#stats').addClass('menu-selected');
            Z(false);
            var a4 = {node: {name: 'feedstats'}, action: 'feedstats'};
            Q(a4, true);
        });
        d = new feedbro.RuleEngineUI();
        d.setEngine(a2.getRuleEngine());
        d.setTree(a2.getFeedTree());
        d.setSoundPlayer(a2.getSoundPlayer());
        d.setContainerName('div#feed');
        d.init();
        $('div#rulenav').click(function () {
            v();
            $('div#rulenav').addClass('menu-selected');
            Z(false);
            var a4 = {node: {name: 'rulelist'}, action: 'rulelist'};
            Q(a4, true);
        });
        $('div#tagnav').click(function () {
            v();
            $('div#tagnav').addClass('menu-selected');
            Z(false);
            var a4 = {node: {name: 'tagcloud'}, action: 'tagcloud'};
            Q(a4, true);
        });
        $(document).keydown(D);
        var aY = $('div#navigator');
        aY.tree({
            data: T(),
            autoEscape: false,
            slide: false,
            dragAndDrop: true,
            selectable: true,
            onCanMoveTo: function (a5, a6, a4) {
                if (a6.type == 1 && a4 == 'inside') {
                    return false;
                } else {
                    if (a5.type == 2 && a6.parent != null && (a6.parent.type == 2 || a4 == 'inside')) {
                        return false;
                    } else {
                        return true;
                    }
                }
            }
        });
        aY.bind('tree.move', function (a6) {
            a6.preventDefault();
            var a8 = a6.move_info.target_node;
            var a5 = a6.move_info.moved_node;
            var a4 = a6.move_info.position;
            var a7 = a5.parent;
            if (a8.type == 1 && a4 == 'inside') {
                alertify.alert(Locale.i18n('navigator_tree_error_underfeed', true));
                return;
            }
            if (a5.type == 2 && a8.parent != null && (a8.parent.type == 2 || a4 == 'inside')) {
                alertify.alert(Locale.i18n('navigator_tree_error_underfolder', true));
                return;
            }
            a6.move_info.do_move();
            K().moveNode(a5.id, a8.id, a4);
            f();
            p(a5.id);
            if (a7 && a7.id) {
                p(a7.id);
            }
        });
        aY.bind('tree.open', function (a4) {
            if (a4.node.id) {
                K().getFeedTree().getNode(a4.node.id).data.is_open = true;
            }
        });
        aY.bind('tree.close', function (a4) {
            if (a4.node.id) {
                K().getFeedTree().getNode(a4.node.id).data.is_open = false;
            }
        });
        aY.bind('tree.contextmenu', function (a7) {
            var a6 = a7.node;
            var a4 = a7.click_event.pageX;
            var a9 = a7.click_event.pageY;
            var a5 = '<div id="contextmenu" style="z-index: 11000; padding: 0px; border: 1px outset white; background-color: #ededed; position: absolute; width: 200px; top: ' + a9 + 'px; left: ' + a4 + 'px;">';
            a5 += '<div id="ctx-markread" class="contextitem">' + Locale.i18n('navigator_ctxmenu_markread', true) + '</div>';
            a5 += '<div id="ctx-rename" class="contextitem">' + Locale.i18n('navigator_ctxmenu_rename', true) + '</div>';
            if (a6.type == 2) {
                a5 += '<div id="ctx-sortfolderfeeds" class="contextitem">' + Locale.i18n('navigator_ctxmenu_sortfeeds', true) + '</div>';
            }
            a5 += '<div id="ctx-delete" class="contextitem">' + Locale.i18n('navigator_ctxmenu_delete', true) + '</div>';
            if (a6.type == 1) {
                a5 += '<div id="ctx-load" class="contextitem">' + Locale.i18n('navigator_ctxmenu_updatefeed', true) + '</div>';
                a5 += '<div id="ctx-properties" class="contextitem">' + Locale.i18n('navigator_ctxmenu_properties', true) + '</div>';
            } else {
                if (a6.type == 2) {
                    a5 += '<div id="ctx-loadfolderfeeds" class="contextitem">' + Locale.i18n('navigator_ctxmenu_updatefolder', true) + '</div>';
                }
            }
            a5 += '</div>';
            $('div#contextmenu').remove();
            var a8 = $(a5);
            $('body').append(a8);
            if ((a9 + a8.height()) > $(window).height()) {
                a8.css({top: a9 - a8.height()});
            }
            a8.bind('contextmenu', function (ba) {
                return false;
            });
            a8.find('div#ctx-delete').click(function () {
                o('Delete ' + a6.id);
                aX(a6.id);
            });
            a8.find('div#ctx-rename').click(function () {
                o('Rename ' + a6.id);
                aQ(a6.id);
            });
            a8.find('div#ctx-markread').click(function () {
                o('Mark read ' + a6.id);
                ao(a6);
            });
            if (a6.type == 1) {
                a8.find('div#ctx-load').click(function () {
                    alertify.success(Locale.i18n('navigator_ctxmenu_updatefeed_success', true));
                    K().loadFeedItems(a6.id);
                });
                a8.find('div#ctx-properties').click(function () {
                    var ba = K().getFeedTree().getNode(a6.id).data;
                    H(ba, a6.parent);
                });
            } else {
                if (a6.type == 2) {
                    a8.find('div#ctx-loadfolderfeeds').click(function () {
                        alertify.success(Locale.i18n('navigator_ctxmenu_updatefolder_success', true));
                        K().loadFolderFeeds(a6.id);
                    });
                    a8.find('div#ctx-sortfolderfeeds').click(function () {
                        K().sortFolder(a6.id);
                    });
                }
            }
        });
        $('select#itemage').val(aZ.getMaxItemAge());
        $('select#itemage').change(function () {
            K().getSettings().setMaxItemAge($(this).val());
            K().saveSettings();
        });
        $('select#itemsortorder').val(aZ.getItemSortOrder());
        $('select#itemsortorder').change(function () {
            K().getSettings().setItemSortOrder($(this).val());
            K().saveSettings();
        });
        aw(aZ.getOnlyUnread());
        $('div#unreadtoggle').click(function () {
            ak();
        });
        aq(aZ.getViewMode(), true);
        var a0 = $('div#feeddialog');
        a0.keydown(function (a4) {
            a4.stopPropagation();
        });
        a0.find('button#feed-cancel').click(function () {
            $('div#feeddialog').css({display: 'none'});
        });
        a0.find('button#feed-save').click(aM);
        a0.find('button#feed-preview').click(function () {
            var a5 = a0.find('input#feed-url').val();
            var a6 = parseInt(a0.find('select#entrycontent').val(), 10);
            var a7 = a0.find('input#feed-username').val();
            var a4 = a0.find('input#feed-password').val();
            if (a5 != undefined && a5.length > 0) {
                a0.css({cursor: 'wait'});
                aB.previewFeed(a5, a6, function () {
                    a0.css({cursor: 'default'});
                }, a7, a4);
            }
        });
        a0.find('button#feed-get').click(function () {
            var a5 = a0.find('input#feed-url').val();
            if (!a5 || a5 == '') {
                alertify.alert(Locale.i18n('addfeed_load_error_nourl', true));
                return;
            }
            a0.css({cursor: 'wait'});
            var a6 = a0.find('input#feed-username').val();
            var a4 = a0.find('input#feed-password').val();
            K().findFeeds(a5, a6, a4, function (a7) {
                a0.css({cursor: 'default'});
                if (a7.length == 0) {
                    alertify.alert(Locale.i18n('addfeed_load_error_invalidurl', true, a5));
                }
                if (a7.length == 1) {
                    a0.css({cursor: 'wait'});
                    K().previewFeed(a7[0].href, 1, a6, a4, function (bc) {
                        a0.css({cursor: 'default'});
                        var bd = bc.feed.title || '';
                        a0.find('input#feed-url').val(a7[0].href);
                        a0.find('span#feed-status').html(an(bc.status));
                        a0.find('input#feed-title').val(bd);
                        a0.find('span#feed-lastposted').html(bc.feed.latestitemdate ? L.timeAgo(bc.feed.latestitemdate.getTime()) : '-');
                        if (bc.error) {
                            alertify.alert(Locale.i18n('addfeed_load_error_loadfailed', true, a7[0].href, bc.error.code, bc.error.message));
                        }
                    });
                }
                if (a7.length > 1) {
                    var ba, a9 = '';
                    var a8 = a0.find('span#feed-alternatives');
                    var bb = a0.find('input#feed-url');
                    a8.css({display: 'block', width: bb.outerWidth()});
                    for (ba = 0; ba < a7.length; ba++) {
                        a9 += '<div class=\'feed-alternative\' id=\'select-feed-' + ba + '\' href=\'' + a7[ba].href + '\' title=\'' + Locale.i18n('addfeed_alternatives_clicktip', true) + '\'><a href=\'#\'>[' + a7[ba].type + '] ' + a7[ba].title + '</a></div>';
                    }
                    a8.html(a9);
                    for (ba = 0; ba < a7.length; ba++) {
                        a8.find('div#select-feed-' + ba).click(aS(a0, a8));
                    }
                }
            });
        });
        $('div#feedbro-sharebox > div.opt').click(function () {
            var ba = $(this).attr('class');
            var a6 = ba.substring(4);
            var a5 = r[a6];
            var bb = $('div#feedbro-sharebox');
            a5 = a5.replace('{URL}', encodeURIComponent(bb.data('url')));
            a5 = a5.replace('{TITLE}', encodeURIComponent(bb.data('title')));
            var a7 = 870;
            var bd = 700;
            var a8 = (screen.width / 2) - (a7 / 2);
            var bc = (screen.height / 2) - (bd / 2);
            var a9;
            if (a6 == 'email') {
                $('<iframe src="' + a5 + '" style="display: none" id="mailTrigger">').appendTo('body');
                setTimeout(function () {
                    $('iframe#mailTrigger').remove();
                }, 4000);
            } else {
                if (a6 == 'gtranslate') {
                    var a4 = K().getSettings().getTargetLanguage();
                    a5 = a5.replace('{TOLANG}', a4 ? a4 : 'en');
                    a9 = window.open(a5, '_blank');
                } else {
                    a9 = window.open(a5, a6, 'toolbar=no,scrollbars=0,width=' + a7 + ',height=' + bd + ',top=' + bc + ',left=' + a8);
                }
            }
            bb.css({display: 'none'});
            return false;
        });
        $(document).click(function (a4) {
            $('div#contextmenu').remove();
            if ($(a4.target).prop('class') != 'share') {
                $('div#feedbro-sharebox').css({display: 'none'});
            }
        });
        aY.bind('tree.click', Q);
        $('div#normalview').click(function () {
            aq(0);
        });
        $('div#headlineview').click(function () {
            aq(1);
        });
        $('div#3cola').click(function () {
            aq(2);
        });
        $('div#newsview').click(function () {
            aq(3);
        });
        $('div#newslinemode').click(function () {
            aq(4);
        });
        $('div#3colaiframe').click(function () {
            aq(5);
        });
        $('div#reload').click(function () {
            aH();
        });
        $('div#prevItem').click(function () {
            D({keyCode: 75});
        });
        $('div#nextItem').click(function () {
            D({keyCode: 74});
        });
        $('div#gotosettings').click(function () {
            document.location.href = '/options.html';
        });
        $('div#dragbar1').mousedown(function (a4) {
            J(a4, 'div#leftpane', 'div#titles');
        });
        $('div#dragbar2').mousedown(function (a4) {
            J(a4, 'div#titles', 'div#feed');
        });
        $('div#leftpane').css('width', aZ.getNavigatorWidth());
        $('div#titles').css('width', aZ.getTitlesWidth());
        if (a2.isInitialized() == false) {
            alertify.error(Locale.i18n('startup_error_background', true));
            return;
        }
        if (a2.getFeedEntryManagerErrorStatus() != 0) {
            alertify.alert(Locale.i18n('startup_error_indexeddb', true));
            return;
        }
        chrome.runtime.onMessage.addListener(u);
        $(window).on('beforeunload', function () {
            K().saveData();
        });
        aT.init();
        o('Engine init done.');
        aF();
        var a1 = new feedbro.Strings();
        var a3 = a1.getQueryParams(document.location.search);
        if (a3 && a3.article != undefined) {
            P();
            X({articleid: parseInt(a3.article, 10), single: true, action: 'loadsingle', firstload: true});
        } else {
            if (a3 && a3.preview != undefined) {
                P();
                $('div#feed').html('<div class=\'previewheader\'>' + Locale.i18n('preview_loading', true) + '</div>');
                aB.previewFeed(a3.preview);
            } else {
                if (aZ.getStartPageAllItems() == true) {
                    $('div#allitems').click();
                }
            }
        }
    };

    function aF() {
        try {
            if (navigator.userAgent.indexOf('Firefox') != -1) {
                $('a#feedbro-feedback').attr('href', 'https://addons.mozilla.org/firefox/addon/feedbroreader/');
            }
        } catch (aY) {
            console.log('Failed to update feedback link');
        }
    }

    function P() {
        try {
            history.pushState({}, 'Feedbro', 'reader.html');
        } catch (aY) {
        }
    }

    function B() {
        return $('div#toolbar').outerHeight();
    }

    function J(a3, a0, a1) {
        a3.preventDefault();
        var a4 = $(a3.target), aZ = $(a1), a2 = $(a0);
        var aY = $('<div>', {
            id: 'ghostbar',
            css: {height: a4.height(), top: a4.offset().top, left: a3.pageX}
        }).appendTo('body');
        $(document).mousemove(function (a5) {
            aY.css('left', a5.pageX);
        });
        $(document).mouseup(function (a5) {
            a2.css('width', a5.pageX - a2.offset().left);
            $(document).unbind('mousemove');
            $(document).unbind('mouseup');
            aY.remove();
            aV();
        });
    }

    function aV() {
        var aZ = parseInt($('div#leftpane').width(), 10);
        var a0 = parseInt($('div#titles').width(), 10);
        var aY = K().getSettings();
        aY.setNavigatorWidth(aZ);
        aY.setTitlesWidth(a0);
        K().saveSettings();
    }

    function aG() {
        this.style.display = 'none';
    }

    function av(a5, a3) {
        var a1, a2 = '';
        var a4, aZ;
        try {
            var aY = L.findImages(a5.content, 3);
            a2 += ' <div class=\'entry-newspaper-section\'>';
            a2 += ' <div class=\'entry-nptitle' + (L.isTextRTL(a5.title, true, 100) ? ' rtl-layout' : '') + '\'><a class=\'entry-nptitle-a\' data-id=\'' + a5.id + '\' rel=\'noopener\' title=\'' + Locale.i18n('article_header_clicktip', true) + '\' href=\'' + a5.link + '\'>' + aO(L.stripTags(a5.title)) + '</a></div>';
            a2 += ' <div class=\'entry-sourceline\'><div class=\'entry-source\'><a class=\'entry-source-link\' href=\'' + a5.feed.link + '\'>' + aO(L.stripTags(a5.feed.title)) + '</a></div> <div class=\'timeago\'>' + L.timeAgo(a5.publishedDate) + '</div></div>';
            a1 = L.htmlText(a5.content, a3 ? 500 : 180, '...');
            a4 = ' <div title=\'' + Locale.i18n('article_header_clickopen', true) + '\' class=\'entry-npsummary' + (L.isTextRTL(a1, true) ? ' rtl-layout' : '') + (a3 ? ' linemode' : '') + '\'>' + a1 + '</div>';
            if (aY.length > 0) {
                aZ = ' <div class=\'entry-npmainimage' + (a3 ? ' linemode' : '') + '\'><img class=\'entry-npmainimage-img\' src=\'' + aY[0].src + '\'></div>';
            } else {
                aZ = ' <div class=\'entry-npmainimage' + (a3 ? ' linemode' : '') + '\'></div>';
            }
            if (a3) {
                a2 += aZ + a4;
            } else {
                a2 += a4 + aZ;
            }
            a2 += ' </div>';
        } catch (a0) {
            console.log('could not create news html', a0);
        }
        return a2;
    }

    function aN(bi, bf, a2, a6, bj, a9, bd) {
        var be, bl, bg, a7, bh, a3, a0, ba, bc, aY, a4, a1;
        var bm = '';
        var bk = '';
        if (a2 == undefined) {
            a2 = 0;
        }
        if (bj == undefined) {
            bj = Object.keys(K().getTagCloud());
        }
        if (bi.content == q) {
            K().markUnread(bi.id, 0);
            return;
        }
        if (bi.title == undefined || bi.title.length < 2) {
            L.fixTitle(bi);
        }
        s = bi.id;
        if (!bi.feed) {
            bi.feed = {};
        }
        be = 'entry';
        if (c == feedbro.Engine.VIEWMODE_HEADLINES) {
            be = be + ' clickopen compact-headline';
            bm = Locale.i18n('article_header_clickopen', true);
        }
        if (c == feedbro.Engine.VIEWMODE_NEWS) {
            be += ' entry-newspaper';
            bk = av(bi, false);
        }
        if (c == feedbro.Engine.VIEWMODE_NEWSLINEMODE) {
            be += ' entry-newspaper linemode';
            bk = av(bi, true);
        }
        bl = 'star';
        bg = 'style=\'display: ' + (c == feedbro.Engine.VIEWMODE_HEADLINES ? 'none' : 'block') + '\'';
        a1 = '<div class=\'readtrigger\' id=\'trigger-' + bi.id + '\'></div>';
        var a8 = R.getMarkReadMode();
        var aZ = '';
        if (a6.action != 'preview') {
            aZ = '<div class=\'itemlinks noPrint\' id=\'item-' + bi.id + '\'><span id=\'star-' + bi.id + '\' class=\'' + bl + '\' title=\'' + Locale.i18n('article_links_addstar', true) + '\'>&nbsp;</span> <a class=\'share\' title=\'' + Locale.i18n('article_links_sendto_title', true) + '\'>' + Locale.i18n('article_links_sendto_body', true) + ' &gt;</a>' + ag(bi, a8 == 3) + ax(bi) + ai(bi) + '</div>';
        }
        a7 = $('<div id=\'blogentrypost-' + bi.id + '\' data-id=\'' + bi.id + '\' class=\'' + be + '\' title=\'' + bm + '\'>' + au(bi, a2 + 1, bd, a6) + bk + (a8 == 1 ? a1 : '') + '<div class=\'entry-body\' ' + bg + '><blockquote class=\'entry-blockquote\' id=\'content-' + bi.id + '\'></blockquote>' + (a8 == 2 ? a1 : '') + aZ + '</div></div>');
        try {
            a9.process(feedbro.RuleEngine.EVENT_ITEM_VIEWED, bi, a7, feedbro.RuleEngine.IGNORE_ACTIONS_VIEW);
        } catch (bb) {
            console.log('ruleEngine.process failed: ', bb);
        }
        try {
            l(bi);
        } catch (bb) {
            console.log('convertSrcAttributess failed: ', bb);
        }
        aY = a7.find('blockquote#content-' + bi.id);
        if (c == feedbro.Engine.VIEWMODE_OPERA_IFRAME) {
            aY.addClass('iframe-content');
            aY.append('<iframe src=\'' + bi.link + '\' class=\'feedbroviewmode6iframe\' sandbox=\'allow-scripts allow-forms\' referrerpolicy=\'no-referrer\'></iframe>');
        } else {
            aY.append(bi.content);
        }
        a7.find('img').on('error', aG);
        a7.find('div.entry-title a.entry-link').click(aa);
        a7.find('div.entry-nptitle > a').click(aa);
        if (L.isTextRTL(bi.content, true, 100)) {
            aY.addClass('rtl-layout');
        }
        if (bi.starred == 1) {
            a7.find('span#topstar-' + bi.id).addClass('starred');
            a7.find('span#star-' + bi.id).addClass('starred');
        }
        if (bi.unread == 1) {
            a7.addClass('unread');
        }
        if (a6.firstload == true && a6.activelink == undefined && a7.hasClass('entry')) {
            a7.addClass('active');
            a6.activelink = true;
        }
        try {
            a7.find('div.tags').tagselector({
                tags: bi.tags,
                autocomplete: bj,
                eventAdd: aL(bj),
                eventRemove: e,
                eventSelect: aI
            });
        } catch (a5) {
            console.log('Error: cannot initialize tag selector for entry ' + bi.id);
        }
        a7.click(F);
        if (a6.action != 'preview') {
            a7.find('span.star').click(k);
            bh = a7.find('> div.entry-body > div.itemlinks');
            bh.find('input.unreadbox').click(g);
            bh.find('a.delete-entry').click(C);
            bh.find('a.share').click(aE(bi));
            a7.find('div.entry-title span.delete-entry-upper').click(function () {
                $(this).parent().parent().parent().parent().parent().parent().find('div.itemlinks > a.delete-entry').click();
            });
            a7.find('div.entry-title span.readtoggle-entry-upper').click(function () {
                var bn = $(this).parent().parent().parent().parent().parent().parent();
                ar(parseInt(bn.attr('data-id'), 10));
            });
            a7.find('div.entry-header > div.fromline > img.fromlinefavicon').click(function () {
                var bn = $(this);
                aC(parseInt(bn.attr('data-feedid'), 10));
            });
        }
        if (c == feedbro.Engine.VIEWMODE_NEWS || c == feedbro.Engine.VIEWMODE_NEWSLINEMODE) {
            a7.find('div.entry-newspaper-section').click(function (bp) {
                var bq = $(this);
                var bo = bq.parent();
                if ($(bp.target).is('a')) {
                    return;
                }
                ay(bo.find('div.entry-body > blockquote:first'));
                bo.removeClass('entry-newspaper');
                bq.css('display', 'none');
                $('div.active').removeClass('active');
                bo.addClass('active');
                var bn = $('div#feed');
                bn.scrollTop(bn.scrollTop() + parseInt(bo.offset().top, 10) - parseInt($('div#toolbar').outerHeight(), 10) - 1);
            });
        }
        try {
            ba = bi.enclosures;
            if (ba != undefined && Array.isArray(ba) && ba.length > 0) {
                for (bc = 0; bc < ba.length; bc++) {
                    a4 = ba[bc];
                    if (a4 == undefined) {
                        continue;
                    }
                    if (a4.url != undefined) {
                        a4.url = aO(a4.url);
                    }
                    if (a4.type != undefined) {
                        a4.type = aO(a4.type);
                    }
                    if (a4.length != undefined) {
                        a4.length = aO(a4.length);
                    }
                    aY.append(j.createTag(bi.id + '-' + bc, a4));
                }
            }
        } catch (bb) {
            console.log('Error: could not initialize enclosure for entry: ' + bi.id);
        }
        $('div#feed').append(a7);
        if (R.getMathJaxEnabled()) {
            try {
                if (n.shouldRender(bi.title) || n.shouldRender(bi.content)) {
                    n.render('blogentrypost-' + bi.id);
                }
            } catch (bb) {
                console.log('Could not render MathJax: ', bb);
            }
        }
        if (a6.action != 'preview' && bi.unread == 1 && a8 != 3) {
            aP.once('trigger-' + bi.id, h);
        }
    }

    function ar(a4) {
        var a2 = $('div#blogentrypost-' + a4);
        try {
            var aZ = a2.find('span.readtoggle-entry-upper > img');
            var a3 = aZ.attr('src') == 'images/icon-read.png';
            var a1 = a2.find('div.itemlinks > span.keepunread > input.unreadbox');
            var a5 = parseInt(a1.attr('id').substring(7), 10);
            K().markUnread(a5, a3 ? 1 : 0);
            var aY = $('div#titles > div.activetitle');
            if (aY.length > 0) {
                if (a3) {
                    aY.addClass('unread');
                } else {
                    aY.removeClass('unread');
                }
            }
            if (a3) {
                a2.addClass('unread');
                aZ.attr('src', 'images/icon-unread.png');
                a1.prop('checked', true);
            } else {
                a2.removeClass('unread');
                aZ.attr('src', 'images/icon-read.png');
                a1.prop('checked', false);
            }
        } catch (a0) {
            console.log(a0);
        }
    }

    function l(aY) {
        if (c == feedbro.Engine.VIEWMODE_NEWS || c == feedbro.Engine.VIEWMODE_NEWSLINEMODE || c == feedbro.Engine.VIEWMODE_HEADLINES) {
            if (aY.content) {
                aY.content = aY.content.replace(L.getRegexp('<(img|iframe|audio|video|embed)([^>]*)src=([^>]*)', 'gi'), function (a2, a1, a0, aZ) {
                    var a3 = '<' + a1 + a0 + 'data-lazysingle=' + aZ;
                    a3 = a3.replace(/srcset=/g, 'data-lazymulti=');
                    return a3;
                });
            }
        }
    }

    function ay(aY) {
        aY.find('[data-lazysingle],[data-lazymulti]').each(function (a0, a1) {
            var aZ;
            aZ = a1.getAttribute('data-lazymulti');
            if (aZ != undefined && aZ != '') {
                a1.setAttribute('srcset', aZ);
            }
            aZ = a1.getAttribute('data-lazysingle');
            if (aZ != undefined && aZ != '') {
                a1.setAttribute('src', aZ);
            }
        });
    }

    function au(a2, aZ, aY, a1) {
        var a0 = '';
        a0 += '<div class="entry-title' + (w(a2.title) ? ' rtl-layout' : '') + '">';
        if (a1.action != 'preview') {
            a0 += '<table border="0" width="100%" class="entry-table"><tr><td class="entry-title-td">';
            if (c == feedbro.Engine.VIEWMODE_HEADLINES) {
                a0 += '<div class="entry-title-wrapper">';
            } else {
                a0 += '<div class="entry-title-wrapper-dummy">';
            }
            a0 += '<a data-id="' + a2.id + '" class="entry-link" href="' + a2.link + '" target="_blank" rel="noopener" title="' + Locale.i18n('article_header_clicktip', true) + '">' + aO(L.stripTags(a2.title)) + '</a> ';
            if (a2.points != undefined) {
                a0 += '<span class="feedbro-points" title="' + Locale.i18n('article_header_pointstip', true) + '">(' + a2.points + ')</span>';
            }
            a0 += '</div>';
            a0 += '</td><td class="entry-title-topcorner">';
            a0 += '<span id="topstar-' + a2.id + '" class="star" title="' + Locale.i18n('article_links_addstar', true) + '">&nbsp;</span>';
            a0 += '<span class="readtoggle-entry-upper noPrint" title="' + Locale.i18n('article_header_markread_title', true) + '"><img src="images/icon-' + (a2.unread ? 'unread' : 'read') + '.png" class="articlemarkreadicon"></span>';
            a0 += '<span class="delete-entry-upper noPrint" title="' + Locale.i18n('article_action_delete_title', true) + '"><img src="images/trash.png" class="articletrashicon"></span>';
            a0 += '</td></tr></table>';
        } else {
            a0 += '<a data-id="' + a2.id + '" class="entry-link" href="' + a2.link + '" target="_blank" rel="noopener" title="' + Locale.i18n('article_header_clicktip', true) + '">' + aO(L.stripTags(a2.title)) + '</a> ';
        }
        a0 += '</div><div class="entry-header">';
        a0 += '<div class="fromline">';
        if (R.getFaviconOnFromline()) {
            a0 += '<img title="' + Locale.i18n('article_fromline_clicktoload', true) + '" data-feedid="' + a2.feedid + '" class="fromlinefavicon" src="' + af.getIconFromGoogleCache(a2.link) + '">';
        }
        a0 += Locale.i18n('article_fromline_from', true) + ' <div class="entry-bloglink makeinline' + (w(a2.feed.title) ? ' rtl-layout' : '') + '"><a class="entry-bloglink-a" target="_blank" href="' + a2.feed.link + '">';
        a0 += aO(L.stripTags(a2.feed.title)) + '</a></div>';
        if (a2.author != undefined && a2.author != '') {
            a0 += ' ' + Locale.i18n('article_fromline_by', true) + ' <div class="entry-author makeinline' + (w(a2.author) ? ' rtl-layout' : '') + '">' + aO(L.stripTags(a2.author)) + '</div>';
        }
        a0 += '</div><div class="entry-date">' + aA(a2.publishedDate, aY) + '</div><div class="entry-number"> # ' + aZ + '.</div></div>';
        return a0;
    }

    function aA(aZ, aY) {
        if (aZ != undefined && aY != undefined) {
            return aZ.format(aY) + ' (' + L.timeAgo(aZ) + ') ';
        } else {
            return '';
        }
    }

    function w(aY) {
        return L.isTextRTL(aY, true, 100);
    }

    function aq(a0, aY) {
        var aZ = c;
        c = a0;
        $('div.mode').removeClass('active-mode');
        $('div#feed').attr('data-viewmode', (c + 1));
        if (a0 == 0) {
            $('div#normalview').addClass('active-mode');
            Z(false);
            aR();
        } else {
            if (a0 == 1) {
                $('div#headlineview').addClass('active-mode');
                Z(false);
                aR();
            } else {
                if (a0 == 2) {
                    $('div#3cola').addClass('active-mode');
                    Z(true);
                } else {
                    if (a0 == 3) {
                        Z(false);
                        $('div#newsview').addClass('active-mode');
                    } else {
                        if (a0 == 4) {
                            Z(false);
                            $('div#newslinemode').addClass('active-mode');
                        } else {
                            if (a0 == 5) {
                                $('div#3colaiframe').addClass('active-mode');
                                Z(true);
                            }
                        }
                    }
                }
            }
        }
        if ((aZ == feedbro.Engine.VIEWMODE_OPERA || aZ == feedbro.Engine.VIEWMODE_OPERA_IFRAME || aZ == feedbro.Engine.VIEWMODE_NEWS) && (a0 == feedbro.Engine.VIEWMODE_HEADLINES || a0 == feedbro.Engine.VIEWMODE_FULL)) {
            aH();
        } else {
            if ((a0 == feedbro.Engine.VIEWMODE_OPERA || a0 == feedbro.Engine.VIEWMODE_OPERA_IFRAME) && (aZ == feedbro.Engine.VIEWMODE_HEADLINES || aZ == feedbro.Engine.VIEWMODE_FULL || aZ == feedbro.Engine.VIEWMODE_NEWS || aZ == feedbro.Engine.VIEWMODE_NEWSLINEMODE)) {
                aH();
            } else {
                if (a0 == feedbro.Engine.VIEWMODE_NEWS && aZ != feedbro.Engine.VIEWMODE_NEWS) {
                    aH();
                } else {
                    if (a0 == feedbro.Engine.VIEWMODE_NEWSLINEMODE && aZ != feedbro.Engine.VIEWMODE_NEWSLINEMODE) {
                        aH();
                    } else {
                        if ((a0 == 0 || a0 == 1) && (aZ != 0 && aZ != 1)) {
                            aH();
                        } else {
                            if (a0 == feedbro.Engine.VIEWMODE_FULL && aZ == feedbro.Engine.VIEWMODE_HEADLINES) {
                                $('blockquote.entry-blockquote').each(function (a1, a2) {
                                    ay($(a2));
                                });
                            }
                        }
                    }
                }
            }
        }
        if (aY != true) {
            K().getSettings().setViewMode(c);
            K().saveSettings();
        }
    }

    function ak() {
        var aY = !$('input#onlyunread').prop('checked');
        aw(aY);
        K().getSettings().setOnlyUnread(aY);
        K().saveSettings();
    }

    function aw(aY) {
        if (aY == true) {
            $('div#unreadtoggle').addClass('active-mode');
            $('input#onlyunread').prop('checked', true);
        } else {
            $('div#unreadtoggle').removeClass('active-mode');
            $('input#onlyunread').prop('checked', false);
        }
    }

    aB.addStandardTag = function (aZ) {
        var aY = $('div#feed > div.entry.active > div.entry-body > div.itemlinks > div.tags');
        if (aY.length == 0) {
            aY = $('div#feed > div.entry > div.entry-body > div.itemlinks > div.tags');
        }
        if (aY.length == 0) {
            return;
        }
        aY.mouseenter();
        aY.find('input').val(aZ);
        aY.find('button.tagadd').click();
        aY.mouseleave();
    };
    aB.activateAddTag = function () {
        var aY = $('div#feed > div.entry.active > div.entry-body > div.itemlinks > div.tags');
        if (aY.length == 0) {
            aY = $('div#feed > div.entry > div.entry-body > div.itemlinks > div.tags');
        }
        if (aY.length == 0) {
            return;
        }
        if (!aY.is(':visible')) {
            return;
        }
        aY.mouseenter();
        aY.find('input').focus();
    };

    function Y(a3, aZ) {
        var a0 = 800;
        var aY = 830;
        var a2 = Math.round((screen.width / 2) - (a0 / 2));
        var a1 = Math.round((screen.height / 2) - (aY / 2));
        chrome.windows.create({url: chrome.runtime.getURL(aZ), type: 'popup', width: a0, height: aY, top: a1, left: a2});
    }
};
feedbro.Engine.VIEWMODE_FULL = 0;
feedbro.Engine.VIEWMODE_HEADLINES = 1;
feedbro.Engine.VIEWMODE_OPERA = 2;
feedbro.Engine.VIEWMODE_NEWS = 3;
feedbro.Engine.VIEWMODE_NEWSLINEMODE = 4;
feedbro.Engine.VIEWMODE_OPERA_IFRAME = 5;
var feedbro = feedbro || {};
feedbro.FaPlugin = function () {
    this._strings = new feedbro.Strings();
};
feedbro.FaPlugin.prototype.canParse = function (a) {
    return a && a.indexOf(atob('ZmFjZWJvb2suY29tLw==')) != -1;
};
feedbro.FaPlugin.prototype.parse = function (e, c, a, f) {
    var b = this;
    var d = new XMLHttpRequest();
    d.onreadystatechange = function (j) {
        if (d.readyState == 4) {
            if (d.status == 200) {
                var i = d.responseText;
                var g = '';
                try {
                    g = b.toRSS(i, e.url);
                } catch (h) {
                    console.log('Failed to parse: ' + e.url);
                }
                if (c) {
                    c(e.url, d, g, a, f, true);
                }
            } else {
                c(e.url, d, '', a, f, true);
            }
            d.onreadystatechange = null;
            d.onerror = null;
            d.abort = null;
            d = null;
        }
    };
    d.open('GET', e.url, true);
    d.send();
};
feedbro.FaPlugin.prototype.toRSS = function (j, a) {
    var d;
    d = {stag: ['<title', '>'], etag: '</title>'};
    this._strings.findNext(j, d);
    var g = d.match;
    var p = [];
    var m = '<?xml version="1.0" encoding="UTF-8"?>\n<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">\n<channel>\n';
    m += '	<title><![CDATA[' + g + ']]></title>\n';
    m += '	<link>' + a.replace(/&/g, '&amp;') + '</link>\n';
    m += '	<description><![CDATA[' + g + ']]></description>\n';
    var b = atob('aHR0cHM6Ly93d3cuZmFjZWJvb2suY29t');
    if (j.indexOf('<div class="captcha_interstitial">') != -1) {
        m += '<item>\n';
        m += '<title><![CDATA[Security Check Completion Required]]></title>\n';
        m += '<link><![CDATA[' + a + ']]></link>\n';
        m += '<author><![CDATA[' + atob('RmFjZWJvb2s=') + ']]></author>\n';
        m += '<content:encoded><![CDATA[Security Check completion required. Click <a target=\'_blank\' rel=\'noopener noreferrer\' href=\'' + a + '\'>here</a> to complete it.]]></content:encoded>\n';
        m += '<pubDate>' + new Date() + '</pubDate>\n';
        m += '</item>\n';
        m += '</channel>\n</rss>';
        return m;
    }
    var l = '<div class="_5pcr';
    d = {stag: [l], etag: '<div><form ', prefix: l, postfix: '</div>'};
    while (true) {
        this._strings.findNext(j, d);
        if (d.match == undefined) {
            break;
        }
        var n = {};
        d.match = d.match.replace(new RegExp('src=', 'g'), 'data-src=');
        var f = $(d.match);
        f.find('span[role=\'presentation\']').remove();
        f.find('a[data-hover=\'tooltip\']').remove();
        f.find('a.see_more_link').remove();
        f.find('i._1jto._bsl._3htz').remove();
        f.find('div._52d9').remove();
        f.find('img._1445').remove();
        f.find('div._35sk._tbz._3htz').remove();
        f.find('video').remove();
        f.find('span[aria-label=\'hashtag\']').each(function (i, q) {
            $(q).html('#');
        });
        f.find('span._58cm').each(function (i, r) {
            var q = $(r);
            var s = q.html();
            if (s.length > 0) {
                q.html(s.substring(0, s.length - 1));
            }
        });
        n.author = f.find('span.fwb.fcg').find('a').html();
        var k = parseInt(f.find('abbr').attr('data-utime'), 10);
        n.link = b + f.find('a._5pcq').attr('href');
        f.find('a[onmouseover]').each(function (r, t) {
            var w = $(t);
            var u = w.attr('onmouseover');
            if (u.indexOf('Linkshim') == 0) {
                var q = u.indexOf('"');
                var i = u.indexOf('"', q + 1);
                var s = new RegExp('\\\\', 'g');
                var v = u.substring(q + 1, i).replace(s, '');
                w.attr('href', v);
                w.removeAttr('onmouseover');
                w.removeAttr('onclick');
            }
        });
        f.find('a').each(function (q, r) {
            var s = $(r);
            var i = s.attr('href');
            if (i.indexOf('/') == 0) {
                s.attr('href', b + i);
            }
        });
        var c = f.find('[data-ft=\'{"tn":"k"}\']');
        n.publishedDate = new Date(k * 1000);
        if (n.author == undefined) {
            if (c.prop('tagName') == 'A') {
                n.author = c.html();
            } else {
                n.author = c.find('a').html();
            }
        }
        if (n.title == undefined) {
            n.title = '';
        }
        n.content = f.find('div[data-ft=\'{"tn":"K"}\']').prop('outerHTML');
        if (n.content == undefined) {
            n.content = '';
        }
        n.content += f.find('div[data-ft=\'{"tn":"H"}\']').prop('outerHTML');
        if (n.content == 'undefined') {
            n.content = '';
        }
        n.content = n.content.replace(new RegExp('data-src=', 'g'), 'src=');
        var e = '';
        e += '<item>\n';
        e += '<title><![CDATA[' + n.title + ']]></title>\n';
        e += '<link><![CDATA[' + n.link + ']]></link>\n';
        e += '<author><![CDATA[' + n.author + ']]></author>\n';
        e += '<content:encoded><![CDATA[' + n.content + ']]></content:encoded>\n';
        e += '<pubDate>' + n.publishedDate + '</pubDate>\n';
        e += '</item>\n';
        var o = {};
        o.element = e;
        o.datelong = n.publishedDate.getTime();
        p.push(o);
    }
    p.sort(function (q, i) {
        return i.datelong - q.datelong;
    });
    for (var h = 0; h < p.length; h++) {
        m += p[h].element;
    }
    m += '</channel>\n</rss>';
    return m;
};
(function (d, b, a) {
    var c = 'tagselector', e = {propertyName: 'value'};
    var f = f || {};
    f.TagSelector = function (n, j) {
        var h = this;
        var i = [];
        var l = d(n);
        this.settings = d.extend({}, e, j);
        this._defaults = e;
        this._name = c;
        this.init = function () {
            d('<div class="taglist"></div><div class="taglabel"></div><div class="autocomplete"></div><table class="tagcloud"><tr><td><input class="taginput" type="text" size="16"></td><td><button class="tagadd">' + Locale.i18n('article_action_add_tag', true) + '</button></td></tr></table>').appendTo(l);
            if (h.settings.tags != undefined && Array.isArray(h.settings.tags)) {
                for (var o = 0; o < h.settings.tags.length; o++) {
                    i.push(h.settings.tags[o]);
                }
            }
            l.find('input.taginput').keyup(function (p) {
                var w, q, x, y, s, v, r, A, z, u;
                if (p.keyCode == 13) {
                    l.find('button.tagadd').click();
                } else {
                    if (p.keyCode == 38) {
                        q = l.find('div.autocomplete div.active');
                        if (q.length == 0) {
                            w = l.find('div.autocomplete div.suggestion:last');
                            w.addClass('active');
                            l.find('input.taginput').val(w.data('value'));
                        } else {
                            x = q.data('index');
                            q.removeClass('active');
                            w = l.find('div.autocomplete div.suggestion[data-index=\'' + (x - 1) + '\']');
                            w.addClass('active');
                            if (x - 1 >= 0) {
                                l.find('input.taginput').val(w.data('value'));
                            }
                        }
                    } else {
                        if (p.keyCode == 40) {
                            q = l.find('div.autocomplete div.active');
                            x = q.data('index');
                            if (x == undefined) {
                                x = -1;
                            }
                            q.removeClass('active');
                            w = l.find('div.autocomplete div.suggestion[data-index=\'' + (x + 1) + '\']');
                            if (w.length > 0) {
                                w.addClass('active');
                                l.find('input.taginput').val(w.data('value'));
                            }
                        } else {
                            if (h.settings.autocomplete != undefined) {
                                y = l.find('input.taginput');
                                s = y.val().toLowerCase();
                                if (s.length > 0) {
                                    v = [];
                                    for (r = 0; r < h.settings.autocomplete.length; r++) {
                                        A = h.settings.autocomplete[r];
                                        if (A.toLowerCase().indexOf(s) == 0) {
                                            v.push(A);
                                        }
                                    }
                                    if (v.length > 0) {
                                        k(v);
                                        u = '';
                                        for (r = 0; r < v.length; r++) {
                                            u += '<div class=\'suggestion\' data-value=\'' + v[r] + '\' data-index=\'' + r + '\'>' + v[r] + '</div>';
                                        }
                                        z = l.find('div.autocomplete');
                                        z.html(u);
                                        z.find('div').click(function (t) {
                                            y.val(d(this).data('value'));
                                            l.find('button.tagadd').click();
                                        });
                                        z.find('div.suggestion').hover(function () {
                                            d(this).addClass('active');
                                        }, function () {
                                            d(this).removeClass('active');
                                        });
                                        z.css({
                                            display: 'block',
                                            top: l.offset().top + l.outerHeight() - 1,
                                            left: y.offset().left - 2,
                                            width: '300px'
                                        });
                                    } else {
                                        l.find('div.autocomplete').css({display: 'none'});
                                    }
                                } else {
                                    l.find('div.autocomplete').css({display: 'none'});
                                }
                            }
                        }
                    }
                }
            });
            l.find('button.tagadd').click(function (v) {
                var s = l.find('input.taginput');
                var p = s.val();
                if (p == undefined || p.trim() == '') {
                    return false;
                }
                var r = true;
                var u = String(p).toLowerCase();
                for (var q = 0; q < i.length; q++) {
                    if (String(i[q]).toLowerCase() == u) {
                        r = false;
                    }
                }
                if (r && h.settings.eventAdd != undefined) {
                    var t = h.settings.eventAdd;
                    if (t(l, p) == false) {
                        return;
                    }
                }
                if (r) {
                    i.push(p);
                    l.find('input.taginput').css({display: 'none'});
                    l.find('input.taginput').val('');
                    l.find('button.tagadd').css({display: 'none'});
                    l.find('div.taglist').css({display: 'none'});
                    l.find('div.autocomplete').css({display: 'none'});
                    l.find('div.taglabel').css({display: 'inline-block'});
                    m(l);
                }
                s.val('');
                s.focus();
                v.stopPropagation();
                return false;
            });
            l.hover(function () {
                var p = l.position();
                var r = p.top;
                var s = p.left;
                var q = l.find('div.taglist');
                l.find('input.taginput').css({display: 'inline-block'});
                l.find('button.tagadd').css({display: 'inline-block'});
                q.css({display: 'inline-block', top: r - q.outerHeight(), left: s, width: l.width()});
                l.find('div.taglabel').css({display: 'none'});
            }, function () {
                l.find('input.taginput').css({display: 'none'});
                l.find('input.taginput').val('');
                l.find('button.tagadd').css({display: 'none'});
                l.find('div.taglist').css({display: 'none'});
                l.find('div.autocomplete').css({display: 'none'});
                l.find('div.taglabel').css({display: 'inline-block'});
            });
            m(l);
        };

        function m(y) {
            if (i.length > 0) {
                var v = y.find('div.taglist');
                var s = l.position();
                var o = s.top;
                var p = s.left;
                var r = '';
                var w = '';
                var q, z;
                var u = Locale.i18n('article_action_delete_tag', true);
                k(i);
                for (q = 0; q < i.length; q++) {
                    z = i[q];
                    if (z == undefined || z.trim().length < 1) {
                        continue;
                    }
                    r += '<div class=\'tag\' data-value=\'' + q + '\'><a title=\'' + u + '\' class=\'remove\'></a>' + z + '</div>';
                    w += '<div class=\'tag\'>' + z + '</div>';
                }
                v.html(r);
                v.scrollTop(v[0].scrollHeight);
                y.find('div.taglabel').html(w);
                v.css({top: o - v.outerHeight(), left: p, width: y.width()});
                v.find('div.tag a.remove').click(function (A) {
                    A.stopPropagation();
                    var B = d(this).parent().data('value');
                    var t = parseInt(B, 10);
                    g(y, t);
                    d(this).parent().remove();
                    m(y);
                    return false;
                });
                if (h.settings.eventSelect != undefined) {
                    var x = h.settings.eventSelect;
                    v.find('div.tag').click(function (t) {
                        t.stopPropagation();
                        var A = d(this).data('value');
                        x(y, i[A]);
                        return false;
                    });
                }
            } else {
                y.find('div.taglabel').html('');
            }
        }

        function g(q, o) {
            if (h.settings.eventRemove != undefined) {
                var p = h.settings.eventRemove;
                if (p(q, i[o]) == false) {
                    return;
                }
            }
            i.splice(o, 1);
        }

        function k(o) {
            o.sort(function (q, p) {
                q = String(q).toLowerCase();
                p = String(p).toLowerCase();
                if (q == p) {
                    return 0;
                }
                return q > p ? 1 : -1;
            });
        }
    };
    d.fn[c] = function (g) {
        this.each(function () {
            if (!d.data(this, 'plugin_' + c)) {
                var h = new f.TagSelector(this, g);
                d.data(this, 'plugin_' + c, h);
                h.init();
            }
        });
        return this;
    };
})(jQuery, window, document);
var feedbro = feedbro || {};
feedbro.FeedEntryManager = function (a) {
    var k = this;
    var l;
    var f = a;
    var e = new feedbro.DbIndex('index');
    var j = function (m) {
        console.log('IndexedDB error: ', m);
    };
    var h;
    var b = 0;

    function d() {
        return chrome.extension.getBackgroundPage().feedbrobg;
    }

    this.getErrorStatus = function () {
        return b;
    };
    this.getDbIndex = function () {
        return e;
    };
    this.getConnection = function () {
        return k.db;
    };
    this.openConnection = function (n) {
        var m = indexedDB.open(f, 1);
        m.onblocked = j;
        m.onerror = function (o) {
            b = 1;
            console.log('IndexedDB error: ', o);
        };
        m.onupgradeneeded = function (r) {
            var o = m.result;
            var q = o.createObjectStore('entries', {keyPath: 'id', autoIncrement: true});
            var p = o.createObjectStore('meta', {keyPath: 'id', autoIncrement: false});
            console.log('openConnection: database ' + f + ' created.');
        };
        m.onsuccess = function (o) {
            k.db = m.result;
            console.log('openConnection: database ' + f + ' opened.');
            k.countData();
            if (n) {
                n();
            }
        };
    };
    this.countData = function () {
        var n = k.db.transaction(['entries', 'meta']);
        var o = n.objectStore('entries').count();
        var m = n.objectStore('meta').count();
        o.onsuccess = function (p) {
            console.log('Entry count: ' + p.target.result);
        };
        m.onsuccess = function (p) {
            console.log('Meta count: ' + p.target.result);
        };
    };
    this.closeConnection = function (m) {
        if (k.db) {
            k.db.close();
            console.log('Database connection closed.');
        }
    };
    this.clear = function (m) {
        k.getTransaction(['entries', 'meta'], 'readwrite', function (n) {
            n.objectStore('entries').clear();
            n.objectStore('meta').clear();
            e.clear();
            n.onerror = j;
            n.oncomplete = function () {
                console.log('Database cleared.');
                if (m) {
                    m();
                }
            };
        });
    };
    this.init = function (p) {
        console.time('feedEntryManager.init');
        var m = k.db.transaction(['meta']);
        var n = m.objectStore('meta');
        var o = n.openCursor();
        o.onerror = j;
        o.onsuccess = function (q) {
            var s = q.target.result;
            if (s) {
                var r = s.value;
                e.add(r.id, r.timestamp, r.feedid, r.folderid, r.unread, r.starred, r.tags, r.link, r.points);
                s['continue']();
            }
        };
        m.oncomplete = function (q) {
            console.log('feedEntryManager.init: database ' + f + ' index lookup initialized. Size: ' + e.size());
            console.timeEnd('feedEntryManager.init');
            if (p) {
                p();
            }
        };
    };
    this.getEntry = function (n, m) {
        k.getTransaction(['entries'], 'readonly', function (o) {
            var p = o.objectStore('entries');
            var q = p.get(n);
            q.onsuccess = function (r) {
                m(r.target.result);
            };
            o.oncomplete = function (r) {
            };
        });
    };
    this.getFeedEntries = function (m, o) {
        var n = e.query(m);
        k.getTransaction(['entries'], 'readonly', function (p) {
            var r = p.objectStore('entries');
            var q = [];
            for (var s = 0; s < n.length; s++) {
                var v = n[s];
                var u = e.get(v);
                if (!u || u.purge == 1) {
                    continue;
                }
                var t = r.get(v);
                t.onerror = function (w) {
                    console.log(' getFeedEntries: store.get failed!');
                };
                t.onsuccess = (function (x, B, A, C, w, y, z) {
                    return function (E) {
                        var D = E.target.result;
                        if (D) {
                            D.unread = x;
                            D.starred = B;
                            D.folderid = C;
                            D.feedid = w;
                            D.tags = y;
                            D.points = z;
                            q.push(D);
                        } else {
                            console.log('feed item not found: ' + A);
                        }
                    };
                })(u.unread, u.starred, v, u.folderid, u.feedid, u.tags, u.points);
            }
            p.oncomplete = function (w) {
                o(q);
            };
            p.onerror = function (w) {
                console.log(' getFeedEntries: transaction failed!');
                o(q);
            };
        });
    };
    this.saveFeedEntries = function (n, m, q, o, p) {
        if (n.length < 1) {
            return;
        }
        k.getTransaction(['entries', 'meta'], 'readwrite', function (s) {
            var v = s.objectStore('entries');
            var r = s.objectStore('meta');
            var x = d().getRuleEngine();
            for (var t = n.length - 1; t >= 0; t--) {
                var u = n[t];
                var w = v.put(u);
                w.onerror = j;
                w.onsuccess = (function (z, A, y) {
                    return function (E) {
                        var G = (0 + A.result);
                        z.id = G;
                        var F = {
                            id: G,
                            timestamp: z.publishedDate.getTime(),
                            unread: 1,
                            starred: 0,
                            feedid: m,
                            folderid: q,
                            tags: [],
                            points: 0
                        };
                        if (z.generatedDate) {
                            F.link = z.link + '';
                        }
                        k.addToIndex(F);
                        z.unread = 1;
                        z.starred = 0;
                        z.folderid = q;
                        z.feedid = m;
                        try {
                            var B;
                            if (y) {
                                B = feedbro.RuleEngine.IGNORE_ACTIONS_ARRIVE_FIRSTLOAD;
                            } else {
                                B = feedbro.RuleEngine.IGNORE_ACTIONS_ARRIVE;
                            }
                            x.process(feedbro.RuleEngine.EVENT_ITEM_ARRIVED, z, undefined, B);
                        } catch (C) {
                            console.log('ruleEngine processing failed: ' + C);
                        }
                        F = e.get(z.id);
                        if (F != undefined) {
                            var D = r.put(F);
                            D.onerror = j;
                            D.onsuccess = function (H) {
                            };
                        } else {
                            console.log('saveFeedEntries: meta data missing from index with key: ' + z.id);
                        }
                    };
                })(u, w, o);
            }
            s.oncomplete = function (y) {
                d().getSoundPlayer().playQueueUniques();
                p({feedid: m});
            };
        });
    };
    this.moveFeed = function (m, n) {
        e.moveFeed(m, n);
    };
    this.markRead = function (m) {
        m.unread = 1;
        e.query(m, function (n) {
            n.unread = 0;
            n.dirty = 1;
        });
    };
    this.save = function () {
        k.getTransaction(['entries', 'meta'], 'readwrite', function (p) {
            var o = p.objectStore('meta');
            var n = 0;
            var m = {updated: 0};
            var r;
            var t = function () {
            };
            r = e.query({purge: 1});
            if (r.length > 0) {
                var q = p.objectStore('entries');
                var s = r.slice();
                c(o, q, r, function () {
                    e.remove(s);
                });
            }
            r = e.query({dirty: 1});
            if (r.length > 0) {
                i(o, r, m, t);
            }
        });
    };
    this.deleteFeedEntries = function (m) {
        return e.query(m, function (n) {
            n.purge = 1;
        });
    };
    this.getFeedEntryMeta = function (m) {
        return e.get(m);
    };
    this.updateFeedEntryMeta = function (o, m) {
        var n = e.get(o);
        if (n) {
            if (m.hasOwnProperty('unread') && m.unread != n.unread) {
                n.unread = m.unread;
                n.dirty = 1;
            }
            if (m.hasOwnProperty('starred') && m.starred != n.starred) {
                n.starred = m.starred;
                n.dirty = 1;
            }
            if (m.hasOwnProperty('purge') && m.purge != n.purge) {
                n.purge = m.purge;
                n.dirty = 1;
            }
        }
    };
    this.addToIndex = function (m) {
        e.add(m.id, m.timestamp, m.feedid, m.folderid, m.unread, m.starred, m.tags, m.link);
    };
    this.queryIndex = function (m) {
        return e.query(m);
    };
    this.getTagCloud = function (m) {
        return e.getTagCloud(m);
    };
    this.getTransaction = function (p, n, q) {
        var m;
        try {
            m = k.db.transaction(p, n);
            q(m);
        } catch (o) {
            console.log('getTransaction error: ', o);
            setTimeout(function () {
                k.openConnection(function () {
                    k.getTransaction(p, n, q);
                });
            }, 1000);
        }
    };

    function c(m, p, o, s) {
        if (o.length > 0) {
            var r = o.shift();
            var n = m['delete'](r);
            n.onerror = j;
            var q = p['delete'](r);
            q.onerror = j;
            q.onsuccess = function (t) {
                c(m, p, o, s);
            };
        } else {
            s();
        }
    }

    function g(n, o, m, s) {
        if (o.length > 0) {
            var r = o.shift();
            var q = e.get(r);
            if (!q || q.purge == 1) {
                console.log(' loadEntry: Could not find index meta data with ID ' + r);
                g(n, o, m, s);
            } else {
                var p = n.get(r);
                p.onsuccess = function (u) {
                    var t = p.result;
                    if (!t) {
                        console.log('Could not find a feed entry with ID ' + r);
                    }
                    if (t) {
                        t.unread = q.unread;
                        t.starred = q.starred;
                        t.points = q.points;
                        m.push(t);
                    }
                    g(n, o, m, s);
                };
                p.onerror = function (t) {
                    console.log(' loadEntry: FAILED to load ' + r + ' event: ' + t);
                    g(n, o, m, s);
                };
            }
        } else {
            s(m);
        }
    }

    function i(n, o, m, r) {
        if (o.length > 0) {
            var q = o.shift();
            var p = n.get(q);
            p.onsuccess = function (t) {
                var s = p.result;
                var u = e.get(q);
                if (u && u.purge !== 1) {
                    s.unread = u.unread;
                    s.starred = u.starred;
                    s.folderid = u.folderid;
                    s.tags = u.tags;
                    s.points = u.points;
                    u.dirty = 0;
                    m.updated++;
                    n.put(s);
                }
                i(n, o, m, r);
            };
        } else {
            r(m.updated);
        }
    }
};
var feedbro = feedbro || {};
feedbro.FeedFinder = function () {
    var i;
    var f = this;
    var e;
    var d;
    this.init = function () {
        i = b().getFeedTree();
        e = $('.feedFinderQ');
        d = $('.feedfinder');
        d.mouseenter(function (j) {
            d.addClass('show');
        });
        $('.feedFinderSearch').click(g);
        e.on('keyup', function (j) {
            if (j.keyCode == 13) {
                g();
            }
        });
        $('.closeFeedFinder').click(function () {
            d.css('display', 'none');
        });
        $('#findfeed').click(function () {
            d.addClass('show');
            d.css('display', 'block');
            e.focus();
            e.select();
        });
    };

    function g() {
        var j = parseInt($('.daysSinceLastUpdate').val(), 10);
        d.addClass('show').css('cursor', 'wait');
        e.css('cursor', 'wait');
        h('#feedFinderResults', e.val(), $('.lang').val(), 200, j);
    }

    function b() {
        return chrome.extension.getBackgroundPage().feedbrobg;
    }

    function h(p, k, m, o, s) {
        var n = -1;
        var t = encodeURIComponent(k);
        var j = new Date().getTime();
        var v = new feedbro.Strings();
        var u = atob('aHR0cHM6Ly9mZWVkbHkuY29tL3YzL3NlYXJjaC9mZWVkcw==');
        var r = atob('JmZ1bGxUZXJtPWZhbHNlJm9yZ2FuaWM9dHJ1ZSZwcm9tb3RlZD10cnVlJnVzZVYyPXRydWUmY3Q9ZmVlZGx5LmRlc2t0b3AmY3Y9MzEuMC4yNDI=');
        var l = new Date().getTime();
        if (s > 0) {
            n = l - (s * 24 * 60 * 60 * 1000);
        }
        $.ajax({url: u + '?q=' + t + '&n=' + o + '&locale=' + m + '&ck=' + j + r}).done(function (w) {
            d.css('cursor', 'default');
            e.css('cursor', 'default');
            var y = '', x, A, B = 0, z, D = w.results;
            var q = Locale.i18n('feedfinder_alreadysubscribed_title', true);
            var C = Locale.i18n('feedfinder_action_preview', true);
            for (x = 0; x < D.length; x++) {
                A = D[x];
                if (n && n > 0 && A.lastUpdated < n) {
                    continue;
                }
                B++;
                z = A.feedId.substring(5);
                y += '<div class=\'feed\'>';
                y += '<table class=\'feedSearchResultTable\'><tbody><tr class=\'feedSearchEntry\'>';
                y += '  <td class=\'rowCount\'>' + B + '</td>';
                y += '  <td class=\'feedIcon\'>';
                y += '     ' + (A.iconUrl ? '<img class=\'feedIconImg\' src=\'' + v.escapeHref(A.iconUrl) + '\'>' : '');
                y += '  </td>';
                y += '  <td>';
                y += '    <div class=\'feedTitle\' dir=\'auto\'><a class=\'feedTitleLink\' href=\'' + A.website + '\' target=\'_blank\' rel=\'noopener noreferrer\'>' + v.escapeHtml(A.title) + '</a></div>';
                y += '    <div class=\'feedDescription\' dir=\'auto\'>' + v.escapeHtml(A.description ? v.stripTags(A.description) : '') + '</div>';
                y += '    <div class=\'feedTags\' dir=\'auto\'>' + (A.deliciousTags ? c(A.deliciousTags, v) : '') + '</div>';
                y += '  </td>';
                y += '  <td class=\'feedUpdated\'>';
                y += '    ' + v.timeAgo(A.lastUpdated, true);
                y += '  </td>';
                y += '  <td class=\'feedActions\'>';
                if (a(z)) {
                    y += '    <div class=\'feedAction-added\' title=\'' + q + '\'>✔</div>';
                } else {
                    y += '    <a class=\'feedSubscribe\' target=\'feedbro\' href=\'' + v.escapeHref(z) + '\'>' + C + '</a>';
                }
                y += '  </td>';
                y += '</tr></tbody></table>';
                y += '</div>';
            }
            if (B == 0) {
                y += '<div class=\'feedFinderInfo\'>' + Locale.i18n('feedfinder_error_noresults', true) + '</div>';
            }
            $(p).empty();
            $(p).html(y).scrollTop(0);
            $('a.feedSubscribe').click(function (E) {
                E.target.classList.add('visited');
                E.preventDefault();
                var G = E.target.getAttribute('href');
                d.removeClass('show');
                try {
                    feedbroengine.previewFeed(G, 1);
                } catch (F) {
                    console.log('Failed to preview feed', F);
                }
            });
        }).fail(function (q, x, w) {
            console.log('Feed finding failed: ' + x + ': ' + w);
        });
    }

    function a(j) {
        return i.searchNodes({type: 1, url: j}).length > 0;
    }

    function c(k, j) {
        var m, l = '';
        for (m = 0; m < k.length; m++) {
            l += '<span class=\'feedTag\'>' + j.escapeHtml(k[m]) + '</span>';
        }
        return l;
    }
};
var feedbro = feedbro || {};
feedbro.FeedIconManager = function () {
    var a = this;
    var b;
    this.setSettings = function (c) {
        b = c;
    };
    this.save = function () {
    };
    this.load = function () {
    };
    this.clearCache = function () {
    };
    this.getIconFromGoogleCache = function (d) {
        if (d == '' || d == undefined) {
            d = 'https://www.example.com/';
        }
        var e;
        try {
            e = new URL(d).hostname;
        } catch (c) {
            e = 'www.example.com';
        }
        if (b && b.getFavIconProvider() == 'duckduckgo') {
            return 'https://icons.duckduckgo.com/ip3/' + e + '.ico';
        } else {
            return 'https://www.google.com/s2/favicons?domain=' + e;
        }
    };
};
var feedbro = feedbro || {};
feedbro.FeedlyPlugin = function () {
    this._strings = new feedbro.Strings();
};
feedbro.FeedlyPlugin.prototype.canParse = function (a) {
    return a && a.indexOf('feedsrc=feedly') != -1;
};
feedbro.FeedlyPlugin.prototype.parse = function (e, c, a, f) {
    var b = this;
    var d = new XMLHttpRequest();
    d.onreadystatechange = function () {
        if (d.readyState == 4) {
            if (d.status == 200) {
                var i = d.responseText;
                var g = '';
                try {
                    g = b.toRSS(i, e.url);
                } catch (h) {
                    console.log(h);
                    console.log('Failed to parse: ' + e.url);
                }
                if (c) {
                    c(e.url, d, g, a, f, true);
                }
            } else {
                c(e.url, d, '', a, f, true);
            }
            d.onreadystatechange = null;
            d.onerror = null;
            d.abort = null;
            d = null;
        }
    };
    d.open('GET', getFeedlyUrl(e.url, e.datelimit, e.maxEntries), true);
    d.setRequestHeader('Cache-Control', 'no-cache');
    d.send();
};

function getFeedlyUrl(c, a, b) {
    c = c.replace(/.feedsrc=feedly/, '');
    return 'https://cloud.feedly.com/v3/streams/contents?streamId=feed%2F' + encodeURIComponent(c) + '&count=' + (b ? b : 20) + (a ? '&newerThan=' + (a + 1) : '');
}

feedbro.FeedlyPlugin.prototype.toRSS = function (f, c) {
    var b = '<?xml version="1.0" encoding="UTF-8"?>\n<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">\n<channel>\n';
    var e, h, a, d = JSON.parse(f);
    b += '  <link><![CDATA[' + d.alternate.href + ']]></link>\n';
    b += '  <title><![CDATA[' + d.title + ']]></title>\n';
    a = d.items;
    var g;
    for (e = 0; e < a.length; e++) {
        h = a[e];
        if (h.content && h.content.content) {
            g = h.content.content;
        } else {
            if (h.summary && h.summary.content) {
                g = h.summary.content;
            } else {
                g = '';
            }
        }
        b += '  <item>\n';
        b += '    <title><![CDATA[' + h.title + ']]></title>\n';
        b += '    <link><![CDATA[' + h.alternate[0].href + ']]></link>\n';
        b += '    <pubDate>' + new Date(parseInt(h.published, 10)) + '</pubDate>\n';
        b += '    <content:encoded><![CDATA[' + g + ']]></content:encoded>\n';
        b += '    <author><![CDATA[' + (h.author != undefined ? h.author : '') + ']]></author>\n';
        b += '  </item>\n';
    }
    b += '\n</channel>\n</rss>';
    return b;
};
var feedbro = feedbro || {};
feedbro.FeedParser = function (a) {
    this.url = a;
    this.linkConverter = /<([^<>]*) (src|href)=["'](?!http|data|magnet|mailto)([^"']+)["']([^<>]*)>/gi;
    this.iframeRe = /<iframe[^>]+>/;
    this.maxEntries = 20;
    this.timeout = 20000;
    this.fullFeed = false;
    this.addmetaimageMode = true;
    this.debugMode = false;
    this._strings = new feedbro.Strings();
    this.plugins = [new feedbro.InPlugin(), new feedbro.TwPlugin(), new feedbro.LiPlugin(), new feedbro.FaPlugin(), new feedbro.GoPlugin(), new feedbro.YoPlugin(), new feedbro.FeedlyPlugin(), new feedbro.SlidesharePlugin(), new feedbro.YammerPlugin(), new feedbro.VkPlugin()];
};
feedbro.FeedParser.prototype.setDebugMode = function (a) {
    this.debugMode = a;
};
feedbro.FeedParser.prototype.setHashGeneration = function (a) {
    this.generateHashes = a;
};
feedbro.FeedParser.prototype.setMaxEntries = function (a) {
    this.maxEntries = a;
};
feedbro.FeedParser.prototype.setTimeout = function (a) {
    if (!isNaN(a) && a > 1000) {
        this.timeout = a;
    } else {
        console.log('FeedParser: invalid timeout value: ' + a);
    }
};
feedbro.FeedParser.prototype.setFullFeed = function (a) {
    this.fullFeed = a;
};
feedbro.FeedParser.prototype.setEntryDateLimit = function (a) {
    if (a) {
        this.datelimit = a;
    }
};
feedbro.FeedParser.prototype.setLastModifiedHeader = function (a) {
    if (a != 'undefined') {
        this.lastModifiedHeader = a;
    }
};
feedbro.FeedParser.prototype.setETagHeader = function (a) {
    if (a != 'undefined') {
        this.etagHeader = a;
    }
};
feedbro.FeedParser.prototype.setAuthentication = function (a, b) {
    this.username = a;
    this.password = b;
};
feedbro.FeedParser.prototype.setAddMetaImage = function (a) {
    this.addmetaimageMode = a;
};
feedbro.FeedParser.prototype.setIndex = function (a) {
    this.dbIndex = a;
};
feedbro.FeedParser.skipTags = {
    category: true,
    contributor: true,
    generator: true,
    logo: true,
    rights: true,
    subtitle: true,
    source: true,
    comments: true,
    language: true,
    copyright: true,
    webMaster: true,
    docs: true,
    lastBuildDate: true,
    cloud: true,
    ttl: true,
    image: true,
    rating: true,
    skipHours: true,
    skipDays: true,
    textInput: true
};
feedbro.FeedParser.prototype.setMaxEntries = function (a) {
    this.maxEntries = a;
};
feedbro.FeedParser.prototype.handleLoadFeedData = function (r, f, z, o, h) {
    if (this.debugMode) {
        console.time('handleLoadFeedData');
    }
    var g = this.identifyFeed(z);
    r.feed.type = g.type;
    r.feed.version = g.version;
    if (this.debugMode) {
        console.log(g);
    }
    if (g.type == 'unknown') {
        r.error = {};
        r.error.message = 'Unsupported Content-Type: ' + o.getResponseHeader('Content-Type');
        r.error.code = 602;
        r.status = 602;
        h(r);
        return;
    }
    var i = this._strings;
    var A, m, C, x, q, w, a, k;
    var B = this.url.indexOf('youtube.com/') != -1;
    var y = this.url.indexOf('vimeo.com/') != -1;
    var p = this.url.indexOf('bitchute.com/') != -1;
    var v = new Date().getTime();
    var n = 0;
    if (g.type == 'atom') {
        var u = 'atom:';
        if (g.version == '0.3') {
            u = 'atom03:';
        }
        A = z.getChild(u + 'feed');
        r.feed.title = z.getChildString(u + 'title', A);
        r.feed.author = z.getChildString(u + 'author/' + u + 'name', A);
        var e, c = z.getAll(u + 'link', A);
        for (var t = 0; t < c.length; t++) {
            e = c[t].getAttribute('type');
            if (c[t].getAttribute('rel') == 'alternate' && (e == 'text/html' || e == undefined)) {
                r.feed.link = c[t].getAttribute('href') + '';
                break;
            }
        }
        q = u + 'entry';
    } else {
        if (g.type == 'rss') {
            A = z.getChild('rss/channel');
            r.feed.title = z.getChildString('title', A);
            r.feed.author = z.getChildString('managingEditor', A);
            r.feed.link = z.getChildString('link', A);
            q = 'item';
        } else {
            if (g.type == 'rdf') {
                A = z.getChild('rdf:RDF');
                r.feed.title = z.getChildString('rss10:channel/rss10:title', A);
                r.feed.author = z.getChildString('dc:creator', A);
                r.feed.link = z.getChildString('rss10:channel/rss10:link', A);
                q = 'rss10:item';
            }
        }
    }
    a = this.createBase(this.url, undefined, A.getAttribute('xml:base'));
    m = A.firstElementChild;
    while (true) {
        if (m == undefined) {
            break;
        }
        if (feedbro.FeedParser.skipTags[m.nodeName]) {
            m = m.nextElementSibling;
            continue;
        }
        C = z.mapNodeName(m.nodeName);
        if (C == q) {
            var b = {link: undefined, title: 'No Title', author: '', publishedDate: undefined, content: undefined};
            n++;
            k = this.createBase(this.url, a, m.getAttribute('xml:base'));
            var l, d;
            x = m.firstElementChild;
            while (true) {
                if (x == undefined) {
                    break;
                }
                if (feedbro.FeedParser.skipTags[x.nodeName]) {
                    x = x.nextElementSibling;
                    continue;
                }
                C = z.mapNodeName(x.nodeName);
                switch (C) {
                    case'author':
                    case'dc:creator':
                    case'rdf:author':
                    case'rss10:author':
                        b.author = x.textContent + '';
                        break;
                    case'atom:author':
                    case'atom03:author':
                        b.author = z.getChildString('name', x);
                        break;
                    case'atom:link':
                    case'atom03:link':
                        if (x.getAttribute('rel') == 'alternate' && (x.getAttribute('type') == 'text/html' || x.getAttribute('type') == undefined)) {
                            b.link = this.toAbsoluteUrl(x.getAttribute('href'), k);
                        }
                        if (x.getAttribute('rel') == 'enclosure') {
                            this.getEnclosure(b, x, 'href', k);
                        } else {
                            if (b.link == undefined) {
                                b.link = this.toAbsoluteUrl(x.getAttribute('href'), k);
                            }
                        }
                        break;
                    case'link':
                    case'rdf:link':
                    case'rss10:link':
                        b.link = this.toAbsoluteUrl(x.textContent, k);
                        break;
                    case'title':
                    case'rss10:title':
                    case'rdf:title':
                    case'atom:title':
                    case'atom03:title':
                        b.title = x.textContent + '';
                        break;
                    case'content:encoded':
                        d = 'text';
                        l = x;
                        break;
                    case'description':
                    case'rdf:description':
                    case'rss10:description':
                        if (b.content == undefined || b.content == '') {
                            d = 'text';
                            l = x;
                        }
                        break;
                    case'atom:summary':
                    case'atom03:summary':
                        if (b.content == undefined || b.content == '') {
                            d = 'atom';
                            l = x;
                        }
                        break;
                    case'atom:content':
                    case'atom03:content':
                        if (x.getAttribute('src') == undefined) {
                            d = 'atom';
                            l = x;
                        }
                        break;
                    case'pubDate':
                    case'atom:published':
                    case'dc:date':
                    case'atom03:published':
                        b.publishedDate = x.textContent + '';
                        break;
                    case'atom:modified':
                    case'atom:updated':
                    case'atom03:modified':
                    case'atom03:updated':
                        if (b.publishedDate == undefined) {
                            b.publishedDate = x.textContent + '';
                        }
                        break;
                    case'enc:enclosure':
                    case'rdf:enclosure':
                        this.getEnclosure(b, x, 'resource', k);
                        break;
                    case'enclosure':
                        this.getEnclosure(b, x, 'url', k);
                        break;
                    default:
                        break;
                }
                x = x.nextElementSibling;
            }
            if (b.publishedDate != undefined) {
                b.publishedDate = i.parseDate(b.publishedDate);
            }
            if (this.isValidDate(b.publishedDate)) {
                b.publishedDate.setMilliseconds(0);
            }
            b.link = this.toAbsoluteUrl(b.link, k);
            this.ensurePublishedDate(b, n);
            var s = true;
            if (this.datelimit && b.publishedDate && b.publishedDate.getTime() <= this.datelimit) {
                s = false;
            }
            if (b.publishedDate && (b.publishedDate.getTime() > v)) {
                s = false;
            }
            if (b.publishedDate == undefined) {
                s = false;
            }
            if (!s) {
                m = m.nextElementSibling;
                continue;
            }
            if (d == 'atom') {
                if (w == undefined) {
                    w = new XMLSerializer();
                }
                this.getContent(z, b, l, w);
            } else {
                if (d == 'text') {
                    b.content = l.textContent + '';
                } else {
                    b.content = '';
                }
            }
            if (B) {
                this.parseYoutubeVideo(z, m, b);
            }
            if (y) {
                this.parseVimeoVideo(z, m, b);
            }
            if (p) {
                this.parseBitchuteVideo(z, m, b);
            }
            this.fixContent(l, b, k);
            r.feed.entries.push(b);
            if (r.feed.entries.length >= this.maxEntries) {
                break;
            }
        }
        m = m.nextElementSibling;
    }
    this.decodeFeedCharacters(r);
    z.trash();
    z = null;
    o.onreadystatechange = null;
    o.abort = null;
    o = null;
    data = null;
    if (this.debugMode) {
        console.timeEnd('handleLoadFeedData');
    }
};
feedbro.FeedParser.prototype.getFeedList = function (d, l) {
    var c, h, g, j = 0;
    if (d == undefined) {
        return;
    }
    g = d.indexOf('<link');
    while (g != -1 && j < 100) {
        c = d.indexOf('>', g + 1);
        if (c < 0) {
            break;
        }
        h = d.substring(g, c + 1);
        var b = this._strings.getAttributeMap(h, true);
        var f = b.type;
        var a = b.href;
        var i = b.title;
        var k = b.rel;
        if (i == undefined || i.length < 1) {
            i = 'Untitled feed';
        }
        if (f && f.indexOf('application/atom+xml') != -1) {
            f = 'atom';
        }
        if (f && f.indexOf('application/rss+xml') != -1) {
            f = 'rss';
        }
        if (f && f.indexOf('application/rdf+xml') != -1) {
            f = 'rdf';
        }
        if (a && f && (f == 'atom' || f == 'rss' || f == 'rdf') && k.indexOf('alternate') != -1) {
            var e = this.getLink(a, this.url);
            if (e) {
                l.push({type: f, href: e, title: i});
            }
        }
        g = d.indexOf('<link', g + 1);
        j++;
    }
};
feedbro.FeedParser.prototype.getLink = function (e, f) {
    if (e == undefined) {
        return e;
    }
    if (e.indexOf('//') == 0) {
        return 'http:' + e;
    }
    if (e.indexOf('feed://') == 0) {
        e = e.replace('feed://', 'http://');
    } else {
        if (e.indexOf('feed:http') == 0) {
            e = e.replace('feed:', '');
        }
    }
    var g = e.indexOf('http');
    if (g == 0 || e.length < 1) {
        return e;
    }
    var d;
    if (e.charAt(0) != '/') {
        var c = f.indexOf('?');
        if (c != -1) {
            f = f.substring(0, c);
        }
        d = f.lastIndexOf('/');
        if (d == -1) {
            d = f.length();
        }
        return f.substring(0, d) + '/' + e;
    }
    d = f.indexOf('/', f.indexOf('//') + 3);
    if (d == -1) {
        d = f.length;
    }
    return f.substring(0, d) + (e.charAt(0) == '/' ? '' : '/') + e;
};
feedbro.FeedParser.prototype.ensurePublishedDate = function (d, c) {
    if ((d.publishedDate == undefined || isNaN(d.publishedDate)) && d.link && this.dbIndex) {
        var a = this.dbIndex.query({link: d.link});
        if (a.length == 0) {
            var b = new Date();
            d.publishedDate = new Date(b.getTime() - c * 1000);
        } else {
            var e = this.dbIndex.get(a[0]);
            if (e) {
                d.publishedDate = new Date(e.timestamp);
            } else {
                console.log(c + ' meta entry with ID ' + a[0] + ' not found!');
            }
        }
        d.generatedDate = true;
    }
};
feedbro.FeedParser.prototype.isValidDate = function (a) {
    return a && !isNaN(a);
};
feedbro.FeedParser.prototype.getEnclosure = function (b, a, d, c) {
    if (b.enclosures == undefined) {
        b.enclosures = [];
    }
    b.enclosures.push({
        url: this.toAbsoluteUrl(a.getAttribute(d), c),
        length: a.getAttribute('length') + '',
        type: a.getAttribute('type') + ''
    });
};
feedbro.FeedParser.prototype.getContent = function (j, k, a, i) {
    var g = a.getAttribute('type');
    var c;
    if (g == 'xhtml' || g == 'application/xhtml+xml') {
        c = j.getChild('div', a);
        if (c == undefined) {
            c = j.getChild('xhtml:div', a);
        }
        if (c) {
            try {
                k.content = i.serializeToString(c);
            } catch (h) {
                k.content = c.innerHTML + '';
            }
        }
    } else {
        if (g == 'html' || g == 'text/html' || g == 'text' || g == '' || g == undefined) {
            k.content = a.textContent + '';
        } else {
            if (g == 'xml' || g == 'application/xml') {
                var b = j.getChild('activityEntry', a);
                if (b && b.getAttribute('xmlns') == 'http://ns.opensocial.org/2008/opensocial') {
                    try {
                        var f = '';
                        f += this.getOpenSocialContent(j, j.getChild('object', b));
                        f += this.getOpenSocialContent(j, j.getChild('target', b));
                        k.content = f;
                        var e = j.getChildString('title', b);
                        if (e && e != '') {
                            k.title = e;
                        }
                        var d = j.getChildString('published', b);
                        if (d && d != '') {
                            k.publishedDate = d;
                        }
                    } catch (l) {
                        k.content = '';
                    }
                }
            }
        }
    }
};
feedbro.FeedParser.prototype.getOpenSocialContent = function (d, g) {
    var f = '';
    if (!g) {
        return '';
    }
    f += d.getChildString('author/displayName', g) + ': <a href=\'' + d.getChildString('url', g) + '\'>' + d.getChildString('displayName', g) + '</a><blockquote>' + d.getChildString('summary', g) + '</blockquote>';
    var c = d.getChild('image', g);
    if (c) {
        var a = d.getChildString('width', c);
        var e = d.getChildString('height', c);
        var b = '';
        if (a != '') {
            b += ' width=\'' + a + '\'';
        }
        if (e != '') {
            b += ' height=\'' + e + '\'';
        }
        f += '<img src=\'' + d.getChildString('url', c) + '\'' + b + '><br>';
    }
    return f;
};
feedbro.FeedParser.prototype.parseBitchuteVideo = function (e, d, c) {
    try {
        var a = '<div>';
        a += '<div class="youtubevideo" data-link="' + c.link + '"><img src="' + c.enclosures[0].url + '" class="thumb"><div class="play"></div></div>';
        a += '</div>';
        c.content = c.content + a;
    } catch (b) {
        console.log('Failed to parse Vimeo video link: ', b);
    }
};
feedbro.FeedParser.prototype.parseVimeoVideo = function (f, e, d) {
    try {
        var c = f.getChild('media:content/media:player', e).getAttribute('url');
        var g = f.getChild('media:content/media:thumbnail', e).getAttribute('url');
        if (c && g && c != '' && g != '') {
            var a = '<div>';
            a += '<div class="youtubevideo" data-link="' + c + '"><img src="' + g + '" class="thumb"><div class="play"></div></div>';
            a += '</div>';
            d.content = d.content.replace(this.iframeRe, a);
        }
    } catch (b) {
        console.log('Failed to parse Vimeo video link: ', b);
    }
};
feedbro.FeedParser.prototype.parseYoutubeVideo = function (f, d, c) {
    try {
        var e = f.getChildString('yt:videoId', d);
        var g = f.getChild('media:group/media:thumbnail', d).getAttribute('url');
        if (e) {
            var a = '<div>';
            a += '<div class="youtubevideo" id="' + e + '"><img src="' + g + '" class="thumb"><div class="play"></div></div>';
            a += '<div class="youtubedescription">' + feedbro.Strings.linkify(f.getChildString('media:group/media:description', d)) + '</div>';
            a += '</div>';
            c.content = a;
        }
    } catch (b) {
        console.log('Failed to parse Youtube video link: ', b);
    }
};
feedbro.FeedParser.prototype.load = function (g) {
    this.processUrl();
    var b = this;
    var a = {};
    a.feed = {type: 'unknown', version: '0.0'};
    a.feed.entries = [];
    var d, e, c = false;
    for (d = 0; d < b.plugins.length; d++) {
        e = b.plugins[d];
        if (e.canParse(b.url)) {
            c = true;
            e.parse({
                url: b.url,
                username: b.username,
                password: b.password,
                etagHeader: b.etagHeader,
                lastModifiedHeader: b.lastModifiedHeader,
                timeout: b.timeout,
                datelimit: b.datelimit,
                maxEntries: b.maxEntries
            }, function (k, l, i, h, m, j) {
                b.responseHandler(k, l, i, h, m, j);
                l.onreadystatechange = null;
                l.onerror = null;
                l.abort = null;
                l = null;
            }, a, g);
            break;
        }
    }
    if (!c) {
        var f = new XMLHttpRequest();
        f.onerror = function (h) {
            a.error = {};
            a.error.message = 'Network error';
            a.error.code = 398;
            a.status = 398;
        };
        f.onreadystatechange = function () {
            if (this.readyState == 4) {
                b.responseHandler(b.url, this, this.responseText, a, g, false);
                this.onreadystatechange = null;
                this.responseXML = null;
                this.responseText = null;
            }
        };
        b.adjustCharset(f, this.url);
        f.open('GET', this.url + '', true);
        f.timeout = this.timeout;
        f.setRequestHeader('If-Modified-Since', this.lastModifiedHeader ? this.lastModifiedHeader + '' : 'Sat, 01 Jan 2000 00:00:00 GMT');
        if (this.etagHeader) {
            f.setRequestHeader('If-None-Match', this.etagHeader + '');
        }
        if (this.username && this.password) {
            f.setRequestHeader('Authorization', 'Basic ' + btoa(this.username + ':' + this.password));
        }
        f.send();
    }
};
feedbro.FeedParser.prototype.debug = function (a) {
};
feedbro.FeedParser.prototype.responseHandler = function (e, h, g, k, f, r) {
    k.latency = 0;
    k.status = h.status;
    var p = h.getResponseHeader('Content-Type');
    var s = h.getResponseHeader('Last-Modified');
    var a = h.getResponseHeader('ETag');
    k.lastModified = s ? s : (this.lastModifiedHeader ? this.lastModifiedHeader + '' : undefined);
    k.etag = a ? a : (this.etagHeader ? this.etagHeader + '' : undefined);
    if (h.status == 200) {
        var l = g;
        var d;
        var t = new feedbro.XmlDocumentWrapper();
        try {
            if (r != true && h.responseXML instanceof XMLDocument) {
                d = h.responseXML;
                t.setDocument(h.responseXML);
            } else {
                d = this.textToXml(t, l);
            }
            if (d == undefined) {
                k.error = {};
                k.error.message = 'Invalid XML';
                k.error.code = 601;
                k.error.url = e + '';
                k.status = 601;
                f(k);
                return;
            }
        } catch (j) {
            k.error = {};
            k.error.message = 'Invalid XML';
            k.error.code = 601;
            k.error.url = e + '';
            k.status = 601;
            f(k);
            return;
        }
        try {
            this.handleLoadFeedData(k, e, t, h, f);
        } catch (n) {
            console.log(n);
            k.error = {};
            k.error.message = 'Invalid Feed';
            k.error.url = e + '';
            k.error.code = 601;
            k.status = 601;
            console.log('Feed parsing failed for url: ' + e);
        }
    } else {
        if (h.status == 404) {
            k.error = {};
            k.error.message = 'Feed does not exist';
            k.error.code = 404;
        } else {
            if (h.status == 403) {
                k.error = {};
                k.error.message = h.statusText + '';
                k.error.code = 403;
            } else {
                if (k.error && k.error.code == 398) {
                    this.debug('398 Network Down for ' + this.url);
                } else {
                    if (h.status == 0) {
                        k.error = {};
                        k.error.message = 'Site did not respond within timeout: ' + this.timeout + ' ms';
                        k.error.code = 399;
                        k.status = 399;
                    } else {
                        if (h.status == 304) {
                            this.debug('304 Not Modified ' + this.url);
                        } else {
                            k.error = {};
                            k.error.message = 'Unable to read feed: ' + e;
                            k.error.code = (h.status + 0);
                        }
                    }
                }
            }
        }
    }
    if (k.feed && k.feed.entries && k.feed.entries.length > 0) {
        var b = new Date().getTime();
        var o, m;
        try {
            k.feed.latestItemAge = 315360000000;
            for (o = 0; o < k.feed.entries.length; o++) {
                m = b - k.feed.entries[o].publishedDate.getTime();
                if (m < k.feed.latestItemAge) {
                    k.feed.latestItemAge = m;
                    k.feed.latestitemdate = new Date(k.feed.entries[o].publishedDate.getTime());
                }
            }
        } catch (q) {
            console.log('could not parse latestItemAge for: ' + e);
        }
    }
    if (k.error) {
        k.error.url = e + '';
    }
    if (this.fullFeed && k.feed && k.feed.entries && k.feed.entries.length > 0) {
        var c = new feedbro.ClearBody();
        c.setAddMetaImage(this.addmetaimageMode ? true : false);
        c.setTimeout(this.timeout + 45000);
        this.cutObjectLinks();
        c.loadFeedEntries(k.feed.entries, function () {
            f(k);
        });
    } else {
        this.cutObjectLinks();
        setTimeout(function () {
            f(k);
        }, 100);
    }
};
feedbro.FeedParser.prototype.cutObjectLinks = function () {
    this.dbIndex = undefined;
    this.lastModifiedHeader = undefined;
    this.etagHeader = undefined;
    this.username = undefined;
    this.password = undefined;
    this.plugins = undefined;
    this.url = undefined;
    this.maxEntries = undefined;
    this.generateHashes = undefined;
    this.timeout = 30000;
    this.datelimit = undefined;
    this.fullFeed = false;
    this.linkConverter = undefined;
    this._strings = undefined;
    this.plugins = undefined;
};
feedbro.FeedParser.prototype.identifyFeed = function (b) {
    var c, a = {type: 'unknown', version: '0.0'};
    if (b == undefined) {
        return a;
    }
    try {
        c = b.getChild('atom:feed');
        if (c) {
            a.type = 'atom';
            a.version = '1.0';
            a.title = b.getChildString('atom:title', c);
            if (a.title == undefined) {
                a.title = 'Untitled feed';
            }
            return a;
        }
        c = b.getChild('rss');
        if (c) {
            a.type = 'rss';
            a.version = c.getAttribute('version') + '';
            a.title = b.getChildString('channel/title', c);
            if (a.title == undefined) {
                a.title = 'Untitled feed';
            }
            return a;
        }
        c = b.getChild('rdf:RDF');
        if (c) {
            a.type = 'rdf';
            a.version = '1.0';
            a.title = b.getChildString('rss10:channel/rss10:title', c);
            if (a.title == undefined) {
                a.title = 'Untitled feed';
            }
            return a;
        }
        c = b.getChild('atom03:feed');
        if (c) {
            a.type = 'atom';
            a.version = '0.3';
            a.title = b.getChildString('atom03:title', c);
            if (a.title == undefined) {
                a.title = 'Untitled feed';
            }
            return a;
        }
    } catch (d) {
        console.log('identifyFeed: ', d, this.url);
    }
    return a;
};
feedbro.FeedParser.prototype.createBase = function (c, b, a) {
    if (b == undefined && a == undefined) {
        return undefined;
    }
    a = this.getBase(a);
    if (b == undefined) {
        b = this.getBase(c);
    }
    if (b != undefined && b.length > 0 && b.charAt(b.length - 1) != '/') {
        b = b + '/';
    }
    if (a != undefined && a.length > 0) {
        if (a.charAt(0) == '/') {
            return this.getProtocol(b) + '://' + this.getServer(b) + a;
        } else {
            if (a.indexOf('://') == -1) {
                if (a.charAt(0) == '#' || a.charAt(0) == '?') {
                    return b.substring(0, b.length - 1) + a;
                } else {
                    return b + a;
                }
            } else {
                if (a.indexOf('://') != -1) {
                    return a;
                }
            }
        }
    }
    return b;
};
feedbro.FeedParser.prototype.getBase = function (e) {
    if (e == undefined) {
        return undefined;
    }
    var d = e.indexOf('://');
    var c = e.lastIndexOf('/');
    if (d != -1 && c > (d + 3)) {
        return e.substring(0, c + 1);
    } else {
        if (e.charAt(e.length - 1) != '/') {
            return e + '/';
        } else {
            return e;
        }
    }
};
feedbro.FeedParser.prototype.fixContent = function (c, b, d) {
    if (b.content == undefined) {
        b.content = '';
        return;
    }
    if (c == undefined) {
        return;
    }
    var a = c.getAttribute('xml:base');
    if (a != undefined) {
        b.content = this.convertRelativeLinks(b.content, this.createBase(this.url, d, a), this.url);
    } else {
        if (d != undefined) {
            b.content = this.convertRelativeLinks(b.content, d, this.url);
        } else {
            b.content = this.convertRelativeLinks(b.content, undefined, this.url);
        }
    }
};
feedbro.FeedParser.prototype.convertRelativeLinks = function (b, g, d) {
    var f = this.getProtocol(d);
    var c = this.getServer(d);
    var e = this.getBase(d);
    var a = this;
    this.linkConverter.lastIndex = 0;
    return b.replace(this.linkConverter, function (o, n, k, j, i) {
        var h = n;
        var p = k;
        var q = j;
        var m = i;
        var r = '<' + h + ' ' + p + '="';
        var l = '"' + m + '>';
        if (q.length > 2 && q.charAt(0) == '/' && q.charAt(1) == '/') {
            return r + f + ':' + q + l;
        }
        if (q.length > 0 && q.charAt(0) == '/') {
            if (g != undefined) {
                return r + a.getProtocol(g) + '://' + a.getServer(g) + q + l;
            } else {
                return r + f + '://' + c + q + l;
            }
        } else {
            if (g != undefined) {
                if (q.length > 0 && g.length > 0 && (q.charAt(0) == '#' || q.charAt(0) == '?')) {
                    return r + g.substring(0, g.length - 1) + q + l;
                } else {
                    return r + g + q + l;
                }
            } else {
                return r + e + q + l;
            }
        }
    });
};
feedbro.FeedParser.prototype.sdbmCode = function (d) {
    var a, b, c = 0;
    for (a = 0, b = d.length; a < b; a++) {
        c = d.charCodeAt(a) + (c << 6) + (c << 16) - c;
    }
    return c;
};
feedbro.FeedParser.prototype.generateItemHash = function (a) {
    if (this.generateHashes) {
        a.hash = this.sdbmCode(this.url + a.title + a.content);
    }
};
feedbro.FeedParser.prototype.toAbsoluteUrl = function (a, b) {
    if (a != undefined && a.indexOf('magnet:') == 0) {
        return a;
    }
    if (a != undefined && a.indexOf('//') == 0) {
        return 'http:' + a;
    } else {
        if (a != undefined && a.length > 0 && a.indexOf('://') == -1) {
            a = a.trim();
            if (b == undefined || b.length == 0) {
                if (a.charAt(0) == '/') {
                    return this.getProtocol(this.url) + '://' + this.getServer(this.url) + a;
                } else {
                    return this.getBase(this.url) + a;
                }
            } else {
                if (b.charAt(b.length - 1) != '/') {
                    b = this.getBase(b);
                }
                if (a.charAt(0) == '/') {
                    a = a.substring(1);
                }
                return b + a;
            }
        }
    }
    return a;
};
feedbro.FeedParser.prototype.getServer = function (e) {
    var d = e.indexOf('://');
    if (d < 0) {
        d = 0;
    } else {
        d = d + 3;
    }
    var c = e.indexOf('/', d);
    if (c < 0) {
        c = e.length;
    }
    return e.substring(d, c);
};
feedbro.FeedParser.prototype.getProtocol = function (a) {
    if (!a) {
        return 'http';
    }
    var b = a.indexOf(':');
    return b > 0 ? a.substring(0, b) : 'http';
};
feedbro.FeedParser.prototype.decodeFeedCharacters = function (b) {
    try {
        if (b.error) {
            return;
        }
        var d, e, a = b.feed.entries;
        for (d = 0; d < a.length; d++) {
            e = a[d];
            e.title = this._strings.decodeHtmlEntities(e.title);
            e.author = this._strings.decodeHtmlEntities(e.author);
            e.content = this._strings.decodeHtmlEntities(e.content);
            e.decoded = 1;
        }
    } catch (c) {
        console.log('decodeFeedCharacters failed for feed: ' + b.feed.title, c);
    }
};
feedbro.FeedParser.prototype.textToXml = function (k, g) {
    var h;
    try {
        h = k.parse(g);
        return h;
    } catch (c) {
        try {
            var b = '    ';
            if (g.indexOf('<feed') != -1) {
                b = '\n<!DOCTYPE feed [' + feedbro.FeedParser.ENTITIES + ']>\n';
            } else {
                if (g.indexOf('<rss') != -1) {
                    b = '\n<!DOCTYPE rss [' + feedbro.FeedParser.ENTITIES + ']>\n';
                } else {
                    if (g.indexOf('<rdf:RDF') != -1) {
                        b = '\n<!DOCTYPE rdf:RDF [' + feedbro.FeedParser.ENTITIES + ']>\n';
                    }
                }
            }
            var j = g.indexOf('>');
            g = g.substring(0, j + 1) + b + g.substring(j + 1);
            h = k.parse(g);
            return h;
        } catch (e) {
            try {
                var i = g.indexOf('<?xml');
                var f = g.indexOf('?>');
                if (i != -1 && i != 0 && f > i) {
                    var a = g.substring(i, f + 2);
                    g = a + '\n' + g.substring(f + 2);
                }
                g = g.replace(/[\x01-\x08\x0B-\x0C\x0E-\x1F\x7F-\x84\x86-\x9F]/g, '');
                h = k.parse(g);
                return h;
            } catch (d) {
                return undefined;
            }
        }
    }
};
feedbro.FeedParser.prototype.adjustCharset = function (c, b) {
    try {
        var d = this.getCharset(b);
        if (d && d != '') {
            c.overrideMimeType('application/xml; charset=' + d);
        }
    } catch (a) {
        console.log(a);
    }
};
feedbro.FeedParser.prototype.getCharset = function (e) {
    var d = e.indexOf('charset=');
    if (d == -1) {
        return undefined;
    }
    var c = e.indexOf('&', d);
    if (c == -1) {
        c = e.length;
    }
    return e.substring(d + 8, c);
};
feedbro.FeedParser.prototype.findFeeds = function (g) {
    this.processUrl();
    var e, f, c = this;
    var b = {}, a = [], d = false;
    for (e = 0; e < c.plugins.length; e++) {
        f = c.plugins[e];
        if (f.canParse(c.url)) {
            d = true;
            f.parse({url: c.url, username: c.username, password: c.password}, function (k, n, j, i, o) {
                if (n.status == 200) {
                    var m = new feedbro.XmlDocumentWrapper();
                    var h = c.textToXml(m, j);
                    var l = c.identifyFeed(m);
                    if (l.type != 'unknown') {
                        a.push({type: l.type, href: k, title: l.title});
                    }
                    n.onreadystatechange = null;
                    n.onerror = null;
                    n.abort = null;
                    n = null;
                    o(a);
                } else {
                    n.onreadystatechange = null;
                    n.onerror = null;
                    n.abort = null;
                    n = null;
                    o(a);
                }
            }, b, g);
            break;
        }
    }
    if (!d) {
        this.findFeedsDefault(g);
    }
};
feedbro.FeedParser.prototype.findFeedsDefault = function (j) {
    var f, e, m = [];
    var k = new XMLHttpRequest();
    var l = this;
    var g = l.url;
    try {
        if (l.url.indexOf('youtube.com/channel/') != -1) {
            var c = l.url;
            var b = c.indexOf('youtube.com/channel/');
            b += 'youtube.com/channel/'.length;
            var a = c.indexOf('/', b + 1);
            if (a == -1) {
                a = c.length;
            }
            var i = c.substring(b, a);
            l.url = 'https://www.youtube.com/feeds/videos.xml?channel_id=' + i;
        } else {
            if (l.url.indexOf('https://www.youtube.com/playlist?list=') == 0) {
                l.url = 'https://www.youtube.com/feeds/videos.xml?playlist_id=' + l.url.substring(38);
            } else {
                if (l.url.indexOf('https://www.reddit.com/') == 0 && l.url.indexOf('.rss') != (l.url.length - 4)) {
                    l.url = l.url + '.rss';
                }
            }
        }
    } catch (h) {
        console.log('Failed to modify URL to find Youtube feed');
    }
    try {
        if (l.url.indexOf('https://vimeo.com/') == 0 && l.url.indexOf('rss') == -1) {
            l.url = l.url + '/videos/rss';
        }
    } catch (h) {
        console.log('Failed to modify URL to find Vimeo feed');
    }
    try {
        if (l.url.indexOf('https://www.bitchute.com/channel') == 0 && l.url.indexOf('rss') == -1) {
            l.url = l.url.replace('/channel', '/feeds/rss/channel');
        }
    } catch (h) {
        console.log('Failed to modify URL to find Bitchute feed');
    }
    try {
        if (l.url.indexOf('pinterest.com/') != -1 && l.url.indexOf('.rss') == -1) {
            var d = l.url.substring(8).split('/');
            if (d.length > 1 && d[d.length - 1] == '') {
                d.pop();
            }
            if (d.length == 2) {
                l.url = 'https://' + d.join('/') + '/feed.rss';
            }
            if (d.length == 3) {
                l.url = 'https://' + d.join('/') + '.rss';
            }
        }
    } catch (h) {
        console.log('Failed to modify URL to find Pinterest feed');
    }
    k.onreadystatechange = function (q) {
        if (k.readyState == 4) {
            var s = new feedbro.Strings();
            if (k.status == 200) {
                var r = k.responseText;
                try {
                    var u = new feedbro.XmlDocumentWrapper();
                    var w = l.textToXml(u, k.responseText);
                    var v = l.identifyFeed(u);
                    if (v.type != 'unknown') {
                        m.push({type: v.type, href: l.url, title: v.title});
                    }
                } catch (o) {
                }
                if (m.length < 1) {
                    l.getFeedList(r, m);
                }
                if (m.length < 1 && g.indexOf('youtube.com/') != -1) {
                    var n = {stag: ['videos.xml?channel_id='], etag: '"'};
                    s.findNext(r, n);
                    if (n.match) {
                        var p = n.match;
                        n.stag = ['<meta property="og:title" content="'];
                        n.spos = 0;
                        s.findNext(r, n);
                        var t = 'Youtube Feed';
                        if (n.match) {
                            t = n.match;
                        }
                        m.push({
                            type: 'atom',
                            href: 'https://www.youtube.com/feeds/videos.xml?channel_id=' + p,
                            title: t
                        });
                    }
                }
                k.onreadystatechange = null;
                k.onerror = null;
                k.abort = null;
                k = null;
            }
            if (m.length < 1 && !s.endsWith(l.url, '/feed')) {
                l.url = l.url + '/feed';
                l.findFeedsDefault(j);
            } else {
                j(m);
            }
        }
    };
    k.open('GET', this.url, true);
    k.timeout = this.timeout;
    if (this.username && this.password) {
        k.setRequestHeader('Authorization', 'Basic ' + btoa(this.username + ':' + this.password));
    }
    k.setRequestHeader('If-Modified-Since', 'Sat, 01 Jan 2000 00:00:00 GMT');
    k.send();
};
feedbro.FeedParser.prototype.processUrl = function () {
    if (this.url.indexOf('://') == -1) {
        this.url = 'http://' + this.url;
    }
    var e = this.getServer(this.url);
    var a = e.indexOf('@');
    if (a < 0) {
        return;
    }
    var d = e.split('@');
    var c = d[0];
    this.url = this.url.replace(c + '@', '');
    var b = c.split(':');
    if (b.length == 2) {
        this.setAuthentication(b[0], b[1]);
    }
};
feedbro.FeedParser.ENTITIES = '<!ENTITY nbsp "&#160;"> <!ENTITY iexcl "&#161;"> <!ENTITY cent "&#162;"> <!ENTITY pound "&#163;"> <!ENTITY curren "&#164;"> <!ENTITY yen "&#165;"> <!ENTITY brvbar "&#166;"> <!ENTITY sect "&#167;"> <!ENTITY uml "&#168;"> <!ENTITY copy "&#169;"> <!ENTITY ordf "&#170;"> <!ENTITY laquo "&#171;"> <!ENTITY not "&#172;"> <!ENTITY shy "&#173;"> <!ENTITY reg "&#174;"> <!ENTITY macr "&#175;"> <!ENTITY deg "&#176;"> <!ENTITY plusmn "&#177;"> <!ENTITY sup2 "&#178;"> <!ENTITY sup3 "&#179;"> <!ENTITY acute "&#180;"> <!ENTITY micro "&#181;"> <!ENTITY para "&#182;"> <!ENTITY middot "&#183;"> <!ENTITY cedil "&#184;"> <!ENTITY sup1 "&#185;"> <!ENTITY ordm "&#186;"> <!ENTITY raquo "&#187;"> <!ENTITY frac14 "&#188;"> <!ENTITY frac12 "&#189;"> <!ENTITY frac34 "&#190;"> <!ENTITY iquest "&#191;"> <!ENTITY Agrave "&#192;"> <!ENTITY Aacute "&#193;"> <!ENTITY Acirc "&#194;"> <!ENTITY Atilde "&#195;"> <!ENTITY Auml "&#196;"> <!ENTITY Aring "&#197;"> <!ENTITY AElig "&#198;"> <!ENTITY Ccedil "&#199;"> <!ENTITY Egrave "&#200;"> <!ENTITY Eacute "&#201;"> <!ENTITY Ecirc "&#202;"> <!ENTITY Euml "&#203;"> <!ENTITY Igrave "&#204;"> <!ENTITY Iacute "&#205;"> <!ENTITY Icirc "&#206;"> <!ENTITY Iuml "&#207;"> <!ENTITY ETH "&#208;"> <!ENTITY Ntilde "&#209;"> <!ENTITY Ograve "&#210;"> <!ENTITY Oacute "&#211;"> <!ENTITY Ocirc "&#212;"> <!ENTITY Otilde "&#213;"> <!ENTITY Ouml "&#214;"> <!ENTITY times "&#215;"> <!ENTITY Oslash "&#216;"> <!ENTITY Ugrave "&#217;"> <!ENTITY Uacute "&#218;"> <!ENTITY Ucirc "&#219;"> <!ENTITY Uuml "&#220;"> <!ENTITY Yacute "&#221;"> <!ENTITY THORN "&#222;"> <!ENTITY szlig "&#223;"> <!ENTITY agrave "&#224;"> <!ENTITY aacute "&#225;"> <!ENTITY acirc "&#226;"> <!ENTITY atilde "&#227;"> <!ENTITY auml "&#228;"> <!ENTITY aring "&#229;"> <!ENTITY aelig "&#230;"> <!ENTITY ccedil "&#231;"> <!ENTITY egrave "&#232;"> <!ENTITY eacute "&#233;"> <!ENTITY ecirc "&#234;"> <!ENTITY euml "&#235;"> <!ENTITY igrave "&#236;"> <!ENTITY iacute "&#237;"> <!ENTITY icirc "&#238;"> <!ENTITY iuml "&#239;"> <!ENTITY eth "&#240;"> <!ENTITY ntilde "&#241;"> <!ENTITY ograve "&#242;"> <!ENTITY oacute "&#243;"> <!ENTITY ocirc "&#244;"> <!ENTITY otilde "&#245;"> <!ENTITY ouml "&#246;"> <!ENTITY divide "&#247;"> <!ENTITY oslash "&#248;"> <!ENTITY ugrave "&#249;"> <!ENTITY uacute "&#250;"> <!ENTITY ucirc "&#251;"> <!ENTITY uuml "&#252;"> <!ENTITY yacute "&#253;"> <!ENTITY thorn "&#254;"> <!ENTITY yuml "&#255;"> <!ENTITY quot "&#34;"> <!ENTITY amp "&#38;#38;"> <!ENTITY lt "&#38;#60;"> <!ENTITY gt "&#62;"> <!ENTITY apos "&#39;"> <!ENTITY OElig "&#338;"> <!ENTITY oelig "&#339;"> <!ENTITY Scaron "&#352;"> <!ENTITY scaron "&#353;"> <!ENTITY Yuml "&#376;"> <!ENTITY circ "&#710;"> <!ENTITY tilde "&#732;"> <!ENTITY ensp "&#8194;"> <!ENTITY emsp "&#8195;"> <!ENTITY thinsp "&#8201;"> <!ENTITY zwnj "&#8204;"> <!ENTITY zwj "&#8205;"> <!ENTITY lrm "&#8206;"> <!ENTITY rlm "&#8207;"> <!ENTITY ndash "&#8211;"> <!ENTITY mdash "&#8212;"> <!ENTITY lsquo "&#8216;"> <!ENTITY rsquo "&#8217;"> <!ENTITY sbquo "&#8218;"> <!ENTITY ldquo "&#8220;"> <!ENTITY rdquo "&#8221;"> <!ENTITY bdquo "&#8222;"> <!ENTITY dagger "&#8224;"> <!ENTITY Dagger "&#8225;"> <!ENTITY permil "&#8240;"> <!ENTITY lsaquo "&#8249;"> <!ENTITY rsaquo "&#8250;"> <!ENTITY euro "&#8364;"> <!ENTITY fnof "&#402;"> <!ENTITY Alpha "&#913;"> <!ENTITY Beta "&#914;"> <!ENTITY Gamma "&#915;"> <!ENTITY Delta "&#916;"> <!ENTITY Epsilon "&#917;"> <!ENTITY Zeta "&#918;"> <!ENTITY Eta "&#919;"> <!ENTITY Theta "&#920;"> <!ENTITY Iota "&#921;"> <!ENTITY Kappa "&#922;"> <!ENTITY Lambda "&#923;"> <!ENTITY Mu "&#924;"> <!ENTITY Nu "&#925;"> <!ENTITY Xi "&#926;"> <!ENTITY Omicron "&#927;"> <!ENTITY Pi "&#928;"> <!ENTITY Rho "&#929;"> <!ENTITY Sigma "&#931;"> <!ENTITY Tau "&#932;"> <!ENTITY Upsilon "&#933;"> <!ENTITY Phi "&#934;"> <!ENTITY Chi "&#935;"> <!ENTITY Psi "&#936;"> <!ENTITY Omega "&#937;"> <!ENTITY alpha "&#945;"> <!ENTITY beta "&#946;"> <!ENTITY gamma "&#947;"> <!ENTITY delta "&#948;"> <!ENTITY epsilon "&#949;"> <!ENTITY zeta "&#950;"> <!ENTITY eta "&#951;"> <!ENTITY theta "&#952;"> <!ENTITY iota "&#953;"> <!ENTITY kappa "&#954;"> <!ENTITY lambda "&#955;"> <!ENTITY mu "&#956;"> <!ENTITY nu "&#957;"> <!ENTITY xi "&#958;"> <!ENTITY omicron "&#959;"> <!ENTITY pi "&#960;"> <!ENTITY rho "&#961;"> <!ENTITY sigmaf "&#962;"> <!ENTITY sigma "&#963;"> <!ENTITY tau "&#964;"> <!ENTITY upsilon "&#965;"> <!ENTITY phi "&#966;"> <!ENTITY chi "&#967;"> <!ENTITY psi "&#968;"> <!ENTITY omega "&#969;"> <!ENTITY thetasym "&#977;"> <!ENTITY upsih "&#978;"> <!ENTITY piv "&#982;"> <!ENTITY bull "&#8226;"> <!ENTITY hellip "&#8230;"> <!ENTITY prime "&#8242;"> <!ENTITY Prime "&#8243;"> <!ENTITY oline "&#8254;"> <!ENTITY frasl "&#8260;"> <!ENTITY weierp "&#8472;"> <!ENTITY image "&#8465;"> <!ENTITY real "&#8476;"> <!ENTITY trade "&#8482;"> <!ENTITY alefsym "&#8501;"> <!ENTITY larr "&#8592;"> <!ENTITY uarr "&#8593;"> <!ENTITY rarr "&#8594;"> <!ENTITY darr "&#8595;"> <!ENTITY harr "&#8596;"> <!ENTITY crarr "&#8629;"> <!ENTITY lArr "&#8656;"> <!ENTITY uArr "&#8657;"> <!ENTITY rArr "&#8658;"> <!ENTITY dArr "&#8659;"> <!ENTITY hArr "&#8660;"> <!ENTITY forall "&#8704;"> <!ENTITY part "&#8706;"> <!ENTITY exist "&#8707;"> <!ENTITY empty "&#8709;"> <!ENTITY nabla "&#8711;"> <!ENTITY isin "&#8712;"> <!ENTITY notin "&#8713;"> <!ENTITY ni "&#8715;"> <!ENTITY prod "&#8719;"> <!ENTITY sum "&#8721;"> <!ENTITY minus "&#8722;"> <!ENTITY lowast "&#8727;"> <!ENTITY radic "&#8730;"> <!ENTITY prop "&#8733;"> <!ENTITY infin "&#8734;"> <!ENTITY ang "&#8736;"> <!ENTITY and "&#8743;"> <!ENTITY or "&#8744;"> <!ENTITY cap "&#8745;"> <!ENTITY cup "&#8746;"> <!ENTITY int "&#8747;"> <!ENTITY there4 "&#8756;"> <!ENTITY sim "&#8764;"> <!ENTITY cong "&#8773;"> <!ENTITY asymp "&#8776;"> <!ENTITY ne "&#8800;"> <!ENTITY equiv "&#8801;"> <!ENTITY le "&#8804;"> <!ENTITY ge "&#8805;"> <!ENTITY sub "&#8834;"> <!ENTITY sup "&#8835;"> <!ENTITY nsub "&#8836;"> <!ENTITY sube "&#8838;"> <!ENTITY supe "&#8839;"> <!ENTITY oplus "&#8853;"> <!ENTITY otimes "&#8855;"> <!ENTITY perp "&#8869;"> <!ENTITY sdot "&#8901;"> <!ENTITY lceil "&#8968;"> <!ENTITY rceil "&#8969;"> <!ENTITY lfloor "&#8970;"> <!ENTITY rfloor "&#8971;"> <!ENTITY lang "&#9001;"> <!ENTITY rang "&#9002;"> <!ENTITY loz "&#9674;"> <!ENTITY spades "&#9824;"> <!ENTITY clubs "&#9827;"> <!ENTITY hearts "&#9829;"> <!ENTITY diams "&#9830;">';
var feedbro = feedbro || {};
feedbro.FeedTreeNode = function () {
    this.children = [];
    this.parent = undefined;
    this.data = undefined;
};
feedbro.FeedTree = function () {
    var l = {};
    var k = new feedbro.FeedTreeNode();
    var h = 1;

    function o(s, r, t) {
        if (!s) {
            s = k;
        }
        if (!t) {
            t = 1;
        }
        var q = s.children;
        for (var p = 0; p < q.length; p++) {
            r(q[p], t);
            o(q[p], r, t + 1);
        }
    }

    function f(r) {
        var q = k.children;
        for (var p = 0; p < q.length; p++) {
            r(q[p]);
        }
    }

    function n(q) {
        var r = i(l);
        for (var p = 0; p < r.length; p++) {
            q(l[r[p]]);
        }
    }

    function a(t, r) {
        var p = [];
        p.push(t);
        while (p.length > 0) {
            var s = p.shift();
            if (s.parent) {
                r(s);
            }
            for (var q = 0; q < s.children.length; q++) {
                p.push(s.children[q]);
            }
        }
    }

    function b(t, r) {
        var p = [];
        var u = [];
        var s, q;
        p.push(t);
        while (p.length > 0) {
            s = p.shift();
            if (s.parent) {
                u.push(s);
            }
            for (q = 0; q < s.children.length; q++) {
                p.push(s.children[q]);
            }
        }
        while (u.length > 0) {
            s = u.pop();
            r(s);
        }
    }

    this.toJson = function (p) {
        return JSON.stringify(this.getData(p));
    };
    this.fromJson = function (p) {
        this.load(JSON.parse(p));
    };
    this.getData = function (s, p) {
        if (!p) {
            p = [];
        }
        if (!s) {
            s = k;
        }
        var r;
        if (s.parent) {
            r = d(s);
            p.push(r);
        }
        for (var q = 0; q < s.children.length; q++) {
            this.getData(s.children[q], s.parent ? r.children : p);
        }
        return p;
    };

    function d(t) {
        var s = {};
        var r = i(t.data);
        for (var p = 0; p < r.length; p++) {
            var q = r[p];
            s[q] = t.data[q];
        }
        s.children = [];
        return s;
    }

    this.load = function (s, q) {
        var p;
        if (!q) {
            q = k;
        }
        for (p = 0; p < q.children.length; p++) {
            this.deleteNode(q.children[p]);
        }
        for (p = 0; p < s.length; p++) {
            var t = s[p];
            var r = this.addNode(t, q, feedbro.FeedTree.INSIDE_LAST);
            if (t.children) {
                this.load(t.children, r);
            }
        }
    };
    this.getRoot = function () {
        return k;
    };
    this.getNode = function (p) {
        return l[p];
    };
    this.getNodeSibling = function (t, s) {
        var r = l[t];
        var p;
        if (!r) {
            return r;
        }
        if (s == feedbro.FeedTree.AFTER) {
            if (r.children.length > 0 && r.data.is_open) {
                return r.children[0];
            } else {
                p = j(r.parent.children, r);
                if (p == (r.parent.children.length - 1)) {
                    if (r.parent.parent) {
                        return e(r.parent);
                    } else {
                        return e(r);
                    }
                } else {
                    if (r.parent.children.length > 1) {
                        return r.parent.children[p + 1];
                    } else {
                        return null;
                    }
                }
            }
        } else {
            if (s == feedbro.FeedTree.BEFORE) {
                p = j(r.parent.children, r);
                if (p > 0) {
                    var q = r.parent.children[p - 1];
                    if (q.children.length > 0 && q.data.is_open) {
                        return q.children[q.children.length - 1];
                    } else {
                        return q;
                    }
                } else {
                    if (p == 0) {
                        if (r.parent.parent) {
                            return r.parent;
                        } else {
                            return null;
                        }
                    } else {
                        return null;
                    }
                }
            } else {
                c('getNodeSibling: Unidentified direction: ' + s);
                return null;
            }
        }
    };

    function e(q) {
        var p = q.parent.children;
        var r = j(p, q);
        return (r + 1 < p.length) ? p[r + 1] : null;
    }

    this.searchNodes = function (p) {
        var x = i(l);
        var t = i(p);
        var r = [];
        for (var s = 0; s < x.length; s++) {
            var w = x[s];
            var u = l[w].data;
            var q;
            for (q = 0; q < t.length; q++) {
                var v = t[q];
                if (p[v] != u[v]) {
                    break;
                }
            }
            if (q == t.length) {
                r.push(l[w]);
            }
        }
        return r;
    };

    function i(r) {
        var q = [];
        for (var p in r) {
            if (r.hasOwnProperty(p)) {
                q.push(p);
            }
        }
        return q;
    }

    this.addNode = function (r, s, p) {
        if (!p || s === k) {
            p = feedbro.FeedTree.INSIDE_LAST;
        }
        if (!s) {
            s = k;
        }
        var q = new feedbro.FeedTreeNode();
        q.data = r;
        if (!r.id) {
            q.data.id = h++;
        } else {
            if (r.id >= h) {
                h = r.id + 1;
            }
        }
        m(q, s, p);
        l[q.data.id] = q;
        return q;
    };
    this.deleteNode = function (q) {
        if (!q.parent) {
            c('Root cannot be deleted');
            return false;
        }
        g(q.parent, q);
        delete l[q.data.id];
        for (var p = 0; p < q.children.length; p++) {
            this.deleteNode(q.children[p]);
        }
        return true;
    };
    this.moveNode = function (q, r, p) {
        if (!q.parent) {
            c('Root cannot be moved');
            return false;
        }
        if (!p) {
            p = feedbro.FeedTree.INSIDE_LAST;
        }
        g(q.parent, q);
        m(q, r, p);
        return q;
    };
    this.sortChildren = function (r) {
        var q = this.getNode(r);
        if (!q) {
            return false;
        }
        var p = q.children;
        if (p) {
            p.sort(function (v, t) {
                var u = (v.data.name || '').toLowerCase();
                var s = (t.data.name || '').toLowerCase();
                if (u < s) {
                    return -1;
                }
                if (u > s) {
                    return 1;
                }
                return 0;
            });
        }
        return true;
    };

    function m(q, r, p) {
        var s;
        if (p == feedbro.FeedTree.INSIDE_FIRST) {
            r.children.unshift(q);
            q.parent = r;
        } else {
            if (p == feedbro.FeedTree.INSIDE_LAST) {
                r.children.push(q);
                q.parent = r;
            } else {
                if (p == feedbro.FeedTree.BEFORE) {
                    s = j(r.parent.children, r);
                    r.parent.children.splice(s, 0, q);
                    q.parent = r.parent;
                } else {
                    if (p == feedbro.FeedTree.AFTER) {
                        s = j(r.parent.children, r);
                        r.parent.children.splice(s + 1, 0, q);
                        q.parent = r.parent;
                    } else {
                        console.log('addNodePosition: Unidentified node position: ' + p);
                    }
                }
            }
        }
    }

    function g(p, q) {
        var r = j(p.children, q);
        p.children.splice(r, 1);
    }

    function j(q, r) {
        var p;
        for (p = 0; p < q.length; p++) {
            if (q[p].data.id == r.data.id) {
                return p;
            }
        }
        return -1;
    }

    function c(p) {
        console.log('FeedTree debug: ' + p);
    }

    this.processNodes = function (q, p, r) {
        if (!r) {
            r = feedbro.FeedTree.MODE_BOTTOMUP;
        }
        if (r == feedbro.FeedTree.MODE_BOTTOMUP) {
            b(q, p);
        } else {
            if (r == feedbro.FeedTree.MODE_TOPDOWN) {
                a(q, p);
            } else {
                if (r == feedbro.FeedTree.MODE_TOPNODES) {
                    f(p);
                } else {
                    if (r == feedbro.FeedTree.MODE_DEPTHFIRST) {
                        o(q, p);
                    } else {
                        n(p);
                    }
                }
            }
        }
    };
};
feedbro.FeedTree.BEFORE = 1;
feedbro.FeedTree.AFTER = 2;
feedbro.FeedTree.INSIDE_FIRST = 3;
feedbro.FeedTree.INSIDE_LAST = 4;
feedbro.FeedTree.MODE_BOTTOMUP = 1;
feedbro.FeedTree.MODE_TOPDOWN = 2;
feedbro.FeedTree.MODE_RANDOM = 3;
feedbro.FeedTree.MODE_TOPNODES = 4;
feedbro.FeedTree.MODE_DEPTHFIRST = 5;
feedbro.FeedTree.FEED = 1;
feedbro.FeedTree.FOLDER = 2;
var feedbro = feedbro || {};
feedbro.GoPlugin = function () {
    this._strings = new feedbro.Strings();
};
feedbro.GoPlugin.prototype.canParse = function (a) {
    return a && a.indexOf(atob('aHR0cHM6Ly9wbHVzLmdvb2dsZS5jb20=')) == 0;
};
feedbro.GoPlugin.prototype.parse = function (e, c, a, f) {
    var b = this;
    var d = new XMLHttpRequest();
    d.onreadystatechange = function () {
        if (d.readyState == 4) {
            if (d.status == 200) {
                var i = d.responseText;
                var g = '';
                try {
                    g = b.toRSS(i, e.url);
                } catch (h) {
                    console.log('Failed to parse: ' + e.url, h);
                }
                if (c) {
                    c(e.url, d, g, a, f, true);
                }
            } else {
                c(e.url, d, '', a, f, true);
            }
            d.onreadystatechange = null;
            d.onerror = null;
            d.abort = null;
            d = null;
        }
    };
    d.open('GET', e.url, true);
    d.setRequestHeader('Cache-Control', 'no-cache');
    d.send();
};
feedbro.GoPlugin.prototype.findEntity = function (d, f, a, e) {
    var c, b = 0;
    for (c = f; c < d.length; c++) {
        if (d.charAt(c) == a) {
            b++;
        } else {
            if (d.charAt(c) == e) {
                b--;
                if (b == 0) {
                    return c + 1;
                }
            }
        }
    }
    return -1;
};
feedbro.GoPlugin.prototype.toRSS = function (h, e) {
    var c = '<?xml version="1.0" encoding="UTF-8"?>\n<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">\n<channel>\n';
    var j = {stag: ['<title>'], etag: '</title>'};
    this._strings.findNext(h, j);
    var s = j.match ? j.match : atob('R29vZ2xlKyBQYWdl');
    var n = '<div jsname="WsjYwc"';
    var k = {stag: [n], etag: '<div jsname="WsjYwc"', prefix: n, postfix: '</div>'};
    var a = atob('aHR0cHM6Ly9wbHVzLmdvb2dsZS5jb20=');
    c += '  <link><![CDATA[' + e + ']]></link>\n';
    c += '  <title><![CDATA[' + s + ']]></title>\n';
    while (true) {
        this._strings.findNext(h, k);
        if (k.match == undefined) {
            break;
        }
        k.match = k.match.replace(new RegExp('src=', 'g'), 'data-src=');
        var b = $(k.match);
        var u, o, p, d, q, g, t;
        var l = b.attr('data-iid');
        var i = {stag: [l + '"]', '['], etag: ']', prefix: '[', postfix: ']]'};
        this._strings.findNext(h, i);
        if (i.match) {
            var f = this.findEntity(h, i.spos - 1, '[', ']');
            try {
                t = JSON.parse(h.substring(i.spos - 1, f + 1));
                q = new Date(t[38]);
                d = t[3];
                g = '/' + t[21];
            } catch (m) {
                console.log('GoPlugin error', m);
            }
        }
        u = 'No title';
        o = b.find('div.jVjeQd');
        p = o.html();
        b.find('div.E68jgf').attr('style', '');
        var r = b.find('div[jsname=\'MTOxpb\']').html();
        if (r) {
            if (p == undefined) {
                p = '';
            }
            p += r;
        }
        if (!p || p == '') {
            p = b.find('div.SlwI7e').html();
        }
        if (p && p != '') {
            p = p.replace(new RegExp('data-src=', 'g'), 'src=');
            p = p.replace(new RegExp('href="/', 'g'), 'href="' + a + '/');
            p = p.replace(new RegExp('src="//', 'g'), 'src="https://');
        } else {
            p = '';
        }
        if (!d) {
            d = b.find('div.xHn24c > a').html();
        }
        if (g) {
            c += '  <item>\n';
            c += '    <title><![CDATA[' + u + ']]></title>\n';
            c += '    <link>' + a + g + '</link>\n';
            if (q) {
                c += '    <pubDate>' + q + '</pubDate>\n';
            }
            c += '    <content:encoded><![CDATA[' + p + ']]></content:encoded>\n';
            c += '    <author><![CDATA[' + d + ']]></author>\n';
            c += '  </item>\n';
        }
    }
    c += '\n</channel>\n</rss>';
    return c;
};
var feedbro = feedbro || {};
feedbro.InPlugin = function () {
    this._strings = new feedbro.Strings();
};
feedbro.InPlugin.prototype.canParse = function (a) {
    return a && a.indexOf(atob('aHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbQ==')) == 0;
};
feedbro.InPlugin.prototype.parse = function (e, c, a, f) {
    var b = this;
    var d = new XMLHttpRequest();
    d.onreadystatechange = function () {
        if (d.readyState == 4) {
            if (d.status == 200) {
                var i = d.responseText;
                var g = '';
                try {
                    if (e.url == atob('aHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbQ==') || e.url == atob('aHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS8=')) {
                        g = b.toMainRSS(i, e.url);
                    } else {
                        g = b.toRSS(i, e.url);
                    }
                } catch (h) {
                    console.log('Failed to parse: ' + e.url);
                }
                if (c) {
                    c(e.url, d, g, a, f, true);
                }
            } else {
                c(e.url, d, '', a, f, true);
            }
            d.onreadystatechange = null;
            d.onerror = null;
            d.abort = null;
            d = null;
        }
    };
    d.open('GET', e.url, true);
    d.setRequestHeader('Cache-Control', 'no-cache');
    d.send();
};
feedbro.InPlugin.prototype.toMainRSS = function (g, j) {
    var c = {spos: 0};
    var l = '';
    var a = atob('aHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbQ==');
    var d = /@(\S+)/g;
    var b = /#(\S+)/g;
    c.stag = ['window._sharedData = '];
    c.etag = ';<\/script>';
    this._strings.findNext(g, c);
    if (c.match != undefined) {
        l = '<?xml version="1.0" encoding="UTF-8"?>\n<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:admin="http://webns.net/mvcb/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">\n';
        l += '<channel>\n<title>My Instagram</title>';
        l += '<link>https://www.instagram.com</link>';
        l += '<description>My Instagram Main Page</description>\n';
        var p = JSON.parse(c.match);
        if (p == undefined || p.entry_data == undefined || p.entry_data.FeedPage == undefined) {
            l += '</channel></rss>';
            return l;
        }
        var f = p.entry_data.FeedPage[0].graphql.user.edge_web_feed_timeline.edges;
        var m, o, q, n, k;
        for (var e = 0; e < f.length; e++) {
            m = f[e].node;
            if (m.__typename != 'GraphImage') {
                continue;
            }
            n = undefined;
            k = undefined;
            o = '<item>';
            q = a + '/p/' + m.shortcode;
            o += '<link>' + q + '</link>';
            o += '<author>' + this._strings.escapeHtml(m.owner.full_name) + ' (' + this._strings.escapeHtml(m.owner.username) + ')</author>';
            o += '<description><![CDATA[';
            if (m.display_url != undefined) {
                o += '<p><a target="_blank" href="' + q + '">';
                if (m.dimensions && m.dimensions.width != undefined && m.dimensions.height != undefined) {
                    o += '<img src="' + m.display_url + '" width="' + m.dimensions.width + '" height="' + m.dimensions.height + '">';
                } else {
                    o += '<img src="' + m.display_url + '">';
                }
                o += '</a></p>';
            }
            if (m.edge_media_to_caption && m.edge_media_to_caption.edges && m.edge_media_to_caption.edges[0].node) {
                n = m.edge_media_to_caption.edges[0].node.text;
                try {
                    if (n != undefined) {
                        k = 'Post by ' + this._strings.escapeHtml(m.owner.full_name) + ': ' + this._strings.escapeHtml(this._strings.truncate(n, 60, '...'));
                    }
                    n = n.replace(d, this.usernameMapper);
                    n = n.replace(b, this.hashtagMapper);
                } catch (h) {
                    console.log(h);
                }
                o += '<p>' + n + '</p>';
            }
            o += ']]></description>';
            if (k == undefined) {
                k = 'Post by ' + this._strings.escapeHtml(m.owner.full_name) + ' (' + this._strings.escapeHtml(m.owner.username) + ')';
            }
            o += '<title>' + k + '</title>';
            date = new Date();
            date.setTime(m.taken_at_timestamp * 1000);
            o += '<pubDate>' + date.format('ddd, d mmm yyyy HH:mm:ss Z') + '</pubDate>';
            o += '</item>\n';
            l += o;
        }
        l += '</channel>\n</rss>';
    }
    return l;
};
feedbro.InPlugin.prototype.toRSS = function (h, f) {
    var l = {spos: 0};
    var b, s, u, t, n, e, q, p = '';
    var d = /@(\S+)/g;
    var g = /#(\S+)/g;
    l.stag = ['<meta property="og:title" content="'];
    l.etag = '"';
    this._strings.findNext(h, l);
    u = l.match;
    l.stag = ['<meta property="og:description" content="'];
    this._strings.findNext(h, l);
    n = l.match;
    l.stag = ['<meta property="og:url" content="'];
    this._strings.findNext(h, l);
    e = l.match;
    l.stag = ['window._sharedData = '];
    l.etag = ';<\/script>';
    this._strings.findNext(h, l);
    if (l.match != undefined) {
        p = '<?xml version="1.0" encoding="UTF-8"?>\n<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:admin="http://webns.net/mvcb/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">\n';
        p += '<channel>\n<title>' + this._strings.escapeHtml(u) + '</title>';
        p += '<link>' + e + '</link>';
        p += '<description>' + this._strings.escapeHtml(n) + '</description>\n';
        var r = JSON.parse(l.match);
        if (r == undefined || r.entry_data == undefined || r.entry_data.ProfilePage == undefined) {
            p += '</channel></rss>';
            return p;
        }
        var c = r.entry_data.ProfilePage[0];
        p += '<managingEditor>' + this._strings.escapeHtml(c.graphql.user.full_name) + ' (' + this._strings.escapeHtml(c.graphql.user.username) + ')</managingEditor>';
        var a = atob('aHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbQ==');
        var j = c.graphql.user.edge_owner_to_timeline_media.edges;
        for (var o = 0; o < j.length; o++) {
            b = j[o].node;
            u = undefined;
            s = '<item>';
            b.link = a + '/p/' + b.shortcode;
            s += '<link>' + b.link + '</link>';
            s += '<author>' + this._strings.escapeHtml(c.graphql.user.full_name) + ' (' + this._strings.escapeHtml(c.graphql.user.username) + ')</author>';
            s += '<description><![CDATA[';
            if (b.display_url != undefined) {
                var k = {url: b.display_url};
                s += '<p><a target="_blank" href="' + b.link + '">';
                if (k.width != undefined && k.height != undefined) {
                    s += '<img src="' + k.url + '" width="' + k.width + '" height="' + k.height + '">';
                } else {
                    s += '<img src="' + k.url + '">';
                }
                s += '</a></p>';
            }
            if (b.edge_media_to_caption && b.edge_media_to_caption.edges && b.edge_media_to_caption.edges.length > 0) {
                b.caption = b.edge_media_to_caption.edges[0].node.text;
            }
            if (b.caption != undefined) {
                if (b.caption.text != undefined) {
                    q = b.caption.text;
                } else {
                    q = b.caption;
                }
                try {
                    if (q != undefined) {
                        u = this._strings.escapeHtml(this._strings.truncate(q, 60, '...'));
                    }
                    q = q.replace(d, this.usernameMapper);
                    q = q.replace(g, this.hashtagMapper);
                } catch (m) {
                    console.log(m);
                }
                s += '<p>' + q + '</p>';
            }
            s += '<p>';
            if (b.likes != undefined) {
                s += b.likes.count + ' likes';
            }
            if (b.comments != undefined) {
                s += ' - ' + b.comments.count + ' comments';
            }
            if (b.location != undefined && b.location.latitude != undefined) {
                s += ' - <a class="instagram-photolocation" target="_blank" href="http://maps.google.com/maps?q=' + b.location.latitude + ',' + b.location.longitude + '">Photo location';
                if (b.location.name != undefined) {
                    s += ': ' + b.location.name;
                }
                s += '</a>';
            }
            s += '</p>';
            s += ']]></description>';
            if (u != undefined) {
                s += '<title>' + u + '</title>';
            }
            t = new Date();
            t.setTime(b.taken_at_timestamp * 1000);
            s += '<pubDate>' + t.format('ddd, d mmm yyyy HH:mm:ss Z') + '</pubDate>';
            s += '</item>\n';
            p += s;
        }
        p += '</channel>\n</rss>';
    }
    return p;
};
feedbro.InPlugin.prototype.usernameMapper = function (a) {
    return '<a class=\'instagram-username\' href=\'https://www.instagram.com/' + a.substring(1) + '\'>' + a + '</a>';
};
feedbro.InPlugin.prototype.hashtagMapper = function (a) {
    return '<a class=\'instagram-hashtag\' href=\'https://www.instagram.com/explore/tags/' + a.substring(1) + '/\'>' + a + '</a>';
};
var feedbro = feedbro || {};
feedbro.InviewObserver = function (e) {
    var a = this;
    var d = {};
    var c = [];
    this.inViewHandler = function (f, g) {
        var j, k, m, l;
        for (j = 0; j < f.length; j++) {
            if (f[j].intersectionRatio < 1) {
                continue;
            }
            k = f[j].target;
            l = k.getAttribute('id');
            m = d[l];
            try {
                g.unobserve(k);
            } catch (h) {
                console.log('Unable to stop observing element');
            }
            if (m) {
                d[l] = null;
                m(k);
            }
        }
    };
    this.once = function (f, g) {
        c.push({id: f, callback: g});
    };
    this.addEvents = function () {
        setTimeout(this.processQueue, 350);
    };
    this.processQueue = function () {
        var g, h, f;
        for (g = 0; g < c.length; g++) {
            h = c[g];
            f = document.getElementById(h.id);
            if (f) {
                d[h.id] = h.callback;
                b.observe(f);
            } else {
                console.log('Failed to add element with ID ' + h.id + ' to observe list');
            }
        }
        c = [];
    };
    this.clear = function () {
        b.disconnect();
        d = {};
        c = [];
    };
    var b = new IntersectionObserver(a.inViewHandler, {
        root: document.querySelector(e),
        rootMargin: '0px',
        threshold: 1
    });
};
var feedbro = feedbro || {};
feedbro.LiPlugin = function () {
    this._timeout = 15000;
    this._rootUrl = atob('aHR0cHM6Ly93d3cubGlua2VkaW4uY29t');
    this._strings = new feedbro.Strings();
    this._debug = false;
};
feedbro.LiPlugin.prototype.setDebug = function (a) {
    this._debug = a;
};
feedbro.LiPlugin.prototype.canParse = function (a) {
    return a && (a.indexOf(this._rootUrl + '/groups/') == 0 || a.indexOf(this._rootUrl + '/jobs/search/') == 0);
};
feedbro.LiPlugin.prototype.parse = function (e, c, a, f) {
    var b = this;
    var d = new XMLHttpRequest();
    d.onerror = function () {
        a.error = {};
        a.error.message = 'Network error';
        a.error.code = 398;
        a.status = 398;
    };
    d.onreadystatechange = function () {
        if (d.readyState == 4) {
            if (d.status == 200) {
                try {
                    c(e.url, d, b.toRSS(d.responseText, e.url), a, f, true);
                } catch (g) {
                    c(e.url, d, '', a, f, true);
                }
            } else {
                c(e.url, d, '', a, f, true);
            }
            d.onreadystatechange = null;
            d.onerror = null;
            d.abort = null;
            d = null;
        }
    };
    d.open('GET', e.url, true);
    d.timeout = e.timeout ? e.timeout : 10000;
    d.setRequestHeader('Cache-Control', 'no-cache');
    d.send();
};
feedbro.LiPlugin.prototype.toRSS = function (F, g) {
    var p = this;
    var l = [];
    var u = 'Untitled';
    var y, C;
    if (g == this._rootUrl + '/feed/') {
        u = 'My Feed | LinkedIn';
    }
    var n = new feedbro.Strings();
    var v = {stag: ['<code style="display: none" id="bpr-guid', '>', '{'], etag: '</code>', prefix: '{'};
    var G = /&#(\d{2});(.)/g;
    var t = function (i, e, s) {
        if (e == 92 && s == 'n' || s == 'r') {
            return '<br>';
        }
        if (e == 92 && s == 't') {
            return '&nbsp;&nbsp;&nbsp;';
        }
        if (e == 39) {
            return '\'' + s;
        }
        return e + s;
    };
    var d = function (e) {
        return '<a class="linkedin-hashtag" rel="noopener noreferrer" target="_blank" href="https://www.linkedin.com/feed/topic/?keywords=%23' + e + '">#' + e + '</a>';
    };
    while (true) {
        n.findNext(F, v);
        if (v.match == undefined) {
            break;
        }
        var w = v.match;
        if (w.indexOf('com.linkedin.voyager.feed.render.UpdateV2') == -1 && w.indexOf('com.linkedin.voyager.search.SearchHit') == -1) {
            continue;
        }
        w = w.replace(/([\[:,{])&quot;/g, '$1"');
        w = w.replace(/&quot;([:,}\]]{1}[^ ])/g, '"$1');
        w = w.replace(/&#92;&quot;/g, '\\"');
        var B = JSON.parse(w);
        if (B.included) {
            var q, m = B.included, D, A;
            for (y = 0; y < m.length; y++) {
                C = m[y];
                var k, b = {};
                if (C['$type'] == 'com.linkedin.voyager.jobs.JobPosting') {
                    b.publishedDate = new Date(C.listedAt);
                    b.title = C.title;
                    b.content = '';
                    b.author = '';
                    var a = C.formattedLocation;
                    var E = new Date(C.expireAt);
                    var h = C.applyMethod.companyApplyUrl;
                    var o = C.entityUrn.split(':');
                    b.link = p._rootUrl + '/jobs/view/' + o[3];
                    var r = C.companyDetails.company;
                    var H;
                    var j;
                    for (j = 0; j < m.length; j++) {
                        D = m[j];
                        if (D['$type'] == 'com.linkedin.voyager.organization.Company' && D.entityUrn == r) {
                            H = D.name.trim();
                            b.author = H;
                            b.title = b.title + ' | ' + H;
                            break;
                        }
                    }
                    for (j = 0; j < B.data.elements.length; j++) {
                        A = B.data.elements[j];
                        if (A.hitInfo.jobPosting == C.entityUrn) {
                            b.content = (A.hitInfo.descriptionSnippet || '');
                            break;
                        }
                    }
                    u = B.data.metadata.keywords + ' Jobs | LinkedIn';
                    l.push(b);
                }
                if (C['$type'] == 'com.linkedin.voyager.feed.render.UpdateV2') {
                    if (p._debug) {
                        console.log(C);
                    }
                    b.content = '<div class=\'linkedin-group-article\'>';
                    if (C.actor && C.actor.name) {
                        b.author = C.actor.name.text;
                    }
                    if (C.commentary && C.commentary.text && C.commentary.text.text) {
                        k = C.commentary.text.text;
                        k = k.replace(G, t);
                        k = feedbro.Strings.linkify(k);
                        k = feedbro.Strings.convertHashtags(k, d);
                        b.content += k;
                    }
                    if (C.content) {
                        var c = '<div class=\'article-preview\'>';
                        if (C.content.images && C.content.images.length > 0) {
                            q = C.content.images[0];
                        } else {
                            if (C.content.largeImage) {
                                q = C.content.largeImage;
                            } else {
                                if (C.content.smallImage) {
                                    q = C.content.smallImage;
                                } else {
                                    q = undefined;
                                }
                            }
                        }
                        if (q && q.attributes && q.attributes.length > 0 && q.attributes[0].imageUrl) {
                            c += '<div class=\'article-media\'>';
                            c += '  <img class=\'linkedin-image\' src=\'' + q.attributes[0].imageUrl.replace(/&#61;/g, '=') + '\'>';
                            c += '</div>';
                        } else {
                            c += '<div class=\'article-media\'></div>';
                        }
                        c += '<div class=\'article-body\'>';
                        if (C.content.title && C.content.title.text) {
                            k = C.content.title.text;
                            k = k.replace(G, t);
                            k = feedbro.Strings.linkify(k);
                            k = feedbro.Strings.convertHashtags(k, d);
                            c += '<div class=\'content-title\'>' + k + '</div>';
                        }
                        if (C.content.navigationContext) {
                            c += '<div class=\'linkedin-embedded-link\'><a href=\'' + C.content.navigationContext.actionTarget + '\' target=\'_blank\'>' + C.content.navigationContext.actionTarget + '</a></div>';
                        }
                        c += '</div>';
                        c += '</div>';
                        b.content += c;
                    }
                    b.content += '</div>';
                    b.link = 'https://www.linkedin.com/feed/update/' + C.updateMetadata.urn;
                    if (C.detailHeader && C.detailHeader.navigationContext) {
                        u = C.detailHeader.text.text + ' | LinkedIn';
                    }
                    b.content = '<![CDATA[' + b.content + ']]>';
                    l.push(b);
                }
            }
        }
    }
    l.sort(function (i, e) {
        if (i.publishedDate && e.publishedDate) {
            return e.publishedDate.getTime() - i.publishedDate.getTime();
        } else {
            return 0;
        }
    });
    var x = '<?xml version="1.0" encoding="UTF-8"?>\n<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">\n<channel>\n';
    x += '  <title><![CDATA[' + u + ']]></title>\n';
    x += '  <link>' + (g || '').replace(/&/g, '&amp;') + '</link>\n';
    x += '  <description><![CDATA[' + u + ']]></description>\n';
    for (y = 0; y < l.length; y++) {
        C = l[y];
        var f = '';
        f += '  <item>\n';
        f += '    <title><![CDATA[' + (C.title ? C.title : '') + ']]></title>\n';
        f += '    <link><![CDATA[' + C.link + ']]></link>\n';
        f += '    <author><![CDATA[' + C.author + ']]></author>\n';
        f += '    <content:encoded>' + C.content + '</content:encoded>\n';
        if (C.publishedDate) {
            f += '    <pubDate>' + C.publishedDate + '</pubDate>\n';
        }
        f += '  </item>\n';
        x += f;
    }
    x += '</channel>\n</rss>';
    return x;
};
var feedbro = feedbro || {};
feedbro.LiveClick = function () {
    var d;
    var k = new feedbro.Strings();
    var h = 'div#popuplist';
    var b = 'images/';
    var g = new feedbro.FeedIconManager();
    this.init = function () {
        d = f().getTreeData();
        g.setSettings(f().getSettings());
        i();
    };

    function f() {
        return chrome.extension.getBackgroundPage().feedbrobg;
    }

    function e(m) {
        var o = $(this);
        var n = parseInt(o.attr('data-id'), 10);
        l(n);
    }

    function l(o) {
        var n, m;
        for (n = 0; n < d.length; n++) {
            m = d[n];
            if (m.type == 2 && m.id == o) {
                $(h).html(c(m, m.children));
                $(h + ' .iconBackButton').click(function () {
                    i();
                });
                $(h + ' div.feed').click(j);
                window.scrollTo(0, 0);
                break;
            }
        }
    }

    function j(n) {
        var o = $(this);
        var q = parseInt(o.attr('data-id'), 10);
        var p = o.attr('data-parent-id');
        var m = f();
        m.handleMessageEvent({
            action: 'loadsingle',
            start: 0,
            count: 20,
            unread: 1,
            starred: 0,
            feedid: q
        }, 'bg', function (s) {
            var r = m.getFeedEntries();
            a(p, r);
        });
    }

    function a(p, s) {
        var o = '', u, t;
        if (s.length > 0) {
            o += '<div class=\'viewHeader\'><img class=\'iconBackButton\' src=\'' + b + 'liveclick-backbutton.png\'><div class=\'feedTitle\'><img class=\'feedIcon\' src=\'' + g.getIconFromGoogleCache(s[0].feed.link) + '\'>' + k.escapeHtml(s[0].feed.title) + '</div></div>';
        } else {
            o += '<div class=\'viewHeader\'><img class=\'iconBackButton\' src=\'' + b + 'liveclick-backbutton.png\'><div class=\'feedTitle\'>' + Locale.i18n('mainmenu_liveclick_nounread', true) + '</div></div>';
        }
        var r = Locale.i18n('mainmenu_liveclick_authorprefix', true);
        o += '<div class=\'entryList\'>';
        for (var n = 0; n < s.length; n++) {
            u = s[n];
            var m = k.isTextRTL(u.title || '', true, 100);
            var q = k.isTextRTL(u.author || '', true, 100);
            k.fixTitle(u);
            t = k.escapeHtml(u.title);
            o += '<div class=\'article\'>';
            o += '<a target=\'_blank\' data-id=\'' + u.id + '\' class=\'popup-link\' href=\'' + u.link + '\' title=\'' + t + '\'>';
            o += '<div class=\'articleTitle' + (m ? ' rtl-layout' : '') + '\'>' + t + '</div>';
            o += '<div class=\'footer\'>';
            o += '  <div class=\'articleDate\' title=\'' + u.publishedDate + '\'>' + k.timeAgo(u.publishedDate, true) + '</div>';
            o += '  <div class=\'articleAuthor\'>' + (u.author != '' ? (r + ' <span class=\'name' + (q ? ' rtl-layout' : '') + '\'>' + k.stripTags(u.author) + '</span>') : '') + '</div>';
            o += '</div>';
            o += '</a>';
            o += '</div>';
        }
        o += '<div>';
        $(h).html(o);
        $('.popup-link').click(function (v) {
            var x = parseInt(v.currentTarget.getAttribute('data-id'), 10);
            var w = f();
            w.markUnread(x, 0);
            w.updateTotalUnread();
            v.currentTarget.parentElement.classList.add('read');
        });
        if (p == undefined) {
            $(h + ' .iconBackButton').click(function () {
                i();
            });
        } else {
            $(h + ' .iconBackButton').click(function () {
                l(parseInt(p, 10));
            });
        }
        window.scrollTo(0, 0);
    }

    function i() {
        $(h).html(c({}, d));
        $(h + ' div.folder').click(e);
        $(h + ' div.feed').click(j);
    }

    function c(w, v) {
        var t, r, x, n, q, p;
        var s = '';
        var o;
        s += '<div class=\'popuptree\'>';
        if (w.type == 2) {
            o = k.isTextRTL(w.name || '', true, 100);
            s += '<div class=\'viewHeader\'><img class=\'iconBackButton\' src=\'' + b + 'liveclick-backbutton.png\'><div class=\'feedTitle' + (o ? ' rtl-layout' : '') + '\'><img class=\'folderIcon\' src=\'' + b + 'folder-icon.svg\'>' + k.escapeHtml(w.name) + '</div></div>';
        }
        if (w.type == undefined) {
            s += '<div class=\'viewHeader\'></div>';
        }
        var u = 0;
        s += '<div class=\'entryList\'>';
        for (t = 0; t < v.length; t++) {
            x = v[t];
            if (x.type == 2) {
                n = x;
                q = 0;
                for (r = 0; r < n.children.length; r++) {
                    p = n.children[r];
                    q += p.unread;
                }
                n.unread = q;
                if (q > 0) {
                    o = k.isTextRTL(n.name || '', true, 100);
                    s += '<div class=\'folder\' data-id=\'' + n.id + '\'><table class=\'popupEntryTable\'><tr><td><div class=\'popupTreeIcon\'><img src=\'' + b + 'folder-icon.svg\'></div></td><td><div class=\'truncate folderName' + (o ? ' rtl-layout' : '') + '\'>' + k.escapeHtml(n.name) + '</div></td><td><div class=\'popupUnread\'>' + n.unread + '</div></td></tr></table></div>';
                    u++;
                }
            } else {
                if (x.type == 1) {
                    if (x.unread > 0) {
                        var m = g.getIconFromGoogleCache(x.htmlUrl);
                        o = k.isTextRTL(x.name || '', true, 100);
                        s += '<div class=\'feed\' data-id=\'' + x.id + '\'' + (w.id ? ' data-parent-id=\'' + w.id + '\'' : '') + '><table class=\'popupEntryTable\'><tr><td><div class=\'popupTreeIcon\'><img src=\'' + m + '\'></div></td><td><div class=\'truncate feedName' + (o ? ' rtl-layout' : '') + '\'>' + k.escapeHtml(x.name) + '</div></td><td><div class=\'popupUnread\'>' + x.unread + '</div></td></tr></table></div>';
                        u++;
                    }
                }
            }
        }
        if (u == 0) {
            s += '<div class=\'popupMessage\'>' + Locale.i18n('mainmenu_liveclick_nounread', true) + '</div>';
        }
        s += '</div>';
        s += '</div>';
        return s;
    }
};
var Locale = Locale || {};
Locale.locales = Locale.locales || {};
Locale.argumentRE = /\{(\d+)\}/g;
Locale.needEscapeCache = {};
Locale.htmlReplacements = {'&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', '\'': '&#39;'};
Locale.start = function () {
    Locale.defaultLocale = Locale.locales.en_US;
    Locale.activeLocale = 'en_US';
    Locale.activeMap = Locale.defaultLocale;
};
Locale.i18n = function (g, f) {
    var a = Locale.activeMap;
    var d = a ? a[g] : undefined;
    if (d == undefined) {
        console.log('i18n: missing locale translation key: ' + g);
        d = Locale.defaultLocale[g];
    }
    if (d == undefined) {
        console.log('i18n: completely missing translation key: ' + g);
        return g;
    }
    if (arguments && arguments.length > 2) {
        var e = arguments;
        d = d.replace(Locale.argumentRE, function (h, i) {
            var j = parseInt(i, 10);
            if (j < e.length && j > 0) {
                return e[j + 1];
            } else {
                return '{' + j + '}';
            }
        });
    }
    if (f == true) {
        var b = Locale.needEscapeCache[g];
        var c;
        if (b == undefined) {
            c = Locale.escape(d);
            b = (c != d);
            Locale.needEscapeCache[g + ''] = b;
            d = c;
        } else {
            if (b == true || arguments.length > 2) {
                d = Locale.escape(d);
            }
        }
    }
    return d;
};
Locale.escape = function (a) {
    return a.replace(/[<>"']/g, Locale.escapeReplace);
};
Locale.escapeReplace = function (a) {
    return Locale.htmlReplacements[a];
};
Locale.selectLocale = function (a) {
    Locale.activeLocale = a;
    if (a == 'default') {
        Locale.activeMap = Locale.defaultLocale;
    } else {
        Locale.activeMap = Locale.locales[Locale.activeLocale];
    }
    Locale.needEscapeCache = {};
};
Locale.getActiveMap = function () {
    return Locale.activeMap;
};
Locale.addLocale = function (a, b) {
    Locale.locales[b] = a;
    Locale.selectLocale(b);
};
Locale.install = function (b, c, a, d) {
    Locale.download(b, function (e) {
        Locale.locales[e.meta.locale_type] = e;
        if (c) {
            Locale.selectLocale(e.meta.locale_type);
        }
        a(200);
    }, d);
};
Locale.deleteLocale = function (a) {
    delete Locale.locales[a];
};
Locale.download = function (b, a, d) {
    var c = new XMLHttpRequest();
    c.onerror = function () {
    };
    c.onreadystatechange = function () {
        if (c.readyState == 4) {
            if (c.status == 200) {
                try {
                    var f = JSON.parse(c.responseText);
                    if (f.meta && f.meta.manifest_version && f.meta.locale_type) {
                        a(f);
                    } else {
                        d(600);
                    }
                } catch (e) {
                    d(601 + ' ' + e);
                }
            } else {
                d(c.status + 0);
            }
            c.onreadystatechange = null;
            c.onerror = null;
            c.abort = null;
            c = null;
        }
    };
    c.open('GET', b, true);
    c.timeout = 10000;
    c.setRequestHeader('Cache-Control', 'no-cache');
    c.send();
};
Locale.translate = function (c, e) {
    var b, h, g, d, j, a, f = document.querySelectorAll(c ? '[data-i18n]' : '[data-i18n]:not(.processed)');
    if (e == undefined) {
        e = Locale.activeMap;
    }
    if (f != undefined) {
        for (b = 0; b < f.length; b++) {
            j = f[b];
            d = j.getAttribute('data-i18n');
            if (d) {
                a = e[d + '_body'];
                if (a != undefined) {
                    j.innerHTML = Locale.escape(a);
                }
                a = e[d + '_value'];
                if (a != undefined) {
                    j.setAttribute('value', a);
                }
                a = e[d + '_placeholder'];
                if (a != undefined) {
                    j.setAttribute('placeholder', a);
                }
                a = e[d + '_title'];
                if (a != undefined) {
                    j.setAttribute('title', a);
                }
            }
            j.classList.add('processed');
        }
    }
};
var feedbro = feedbro || {};
feedbro.Mainmenu = function () {
    var b = this;
    var e;

    function d(g, f) {
        chrome.tabs.query({title: g}, function (i) {
            if (i.length > 0) {
                try {
                    chrome.windows.update(i[0].windowId, {focused: true});
                } catch (h) {
                    console.log('Failed to focus the window!');
                }
                if (f && f.indexOf('preview') != -1) {
                    chrome.tabs.update(i[0].id, {active: true, url: f});
                } else {
                    chrome.tabs.update(i[0].id, {active: true});
                    if (e.getSettings().getIconClickReloads()) {
                        e.notifyEngine('updateview', -1, -1);
                    }
                }
                try {
                    window.close();
                } catch (h) {
                    console.log('Failed to close popup window');
                }
            } else {
                chrome.tabs.create({url: chrome.runtime.getURL(f)}, function (k) {
                    try {
                        window.close();
                    } catch (j) {
                        console.log('Failed to close popup window');
                    }
                });
            }
        });
    }

    function c() {
        var h = e.getFolders();
        var l = e.getLastFolderId();
        var j = false;
        var k = new feedbro.Strings();
        var g, f = '<select id=\'folder\' title=\'' + Locale.i18n('mainmenu_selectfolder_title', true) + '\'>';
        if (h.length > 0) {
            for (g = 0; g < h.length; g++) {
                if (h[g].id == l) {
                    j = true;
                }
                f += '<option' + (h[g].id == l ? ' selected=\'selected\'' : '') + ' value=\'' + h[g].id + '\'>' + k.escapeHtml(h[g].name) + '</option>';
            }
        }
        f += '<option value=\'-1\'' + (!j ? ' selected=\'selected\'' : '') + '>' + Locale.i18n('mainmenu_rootfolder', true) + '</option>';
        f += '</select>';
        return f;
    }

    function a() {
        chrome.tabs.query({currentWindow: true, active: true}, function (g) {
            if (g.length > 0) {
                var h = g[0];
                $('div.menuitem').css({cursor: 'progress'});
                try {
                    e.discoverFeed(h.url, function (j) {
                        $('div.menuitem').css({cursor: 'pointer'});
                        if (j.length > 0) {
                            $('body').css({width: '500px'});
                            $('div#articlelist').css({display: 'none'});
                            $('div#articlelistdivider').css({display: 'none'});
                            var m, l = '<div class=\'divider\'></div><div class=\'results-area\'>';
                            var o = Locale.i18n('mainmenu_input_title', true);
                            var n = Locale.i18n('mainmenu_newtab_title', true);
                            var k = Locale.i18n('mainmenu_preview_title', true);
                            var q = Locale.i18n('mainmenu_edit_title', true);
                            var p = new feedbro.Strings();
                            for (m = 0; m < j.length; m++) {
                                l += '<div class=\'discovered-feed-entry\'><div class=\'discovered-feed-entry-left\'><input title=\'' + o + '\' type=\'checkbox\' name=\'feed\' ' + (j.length == 1 ? 'checked=\'checked\'' : '') + ' value=\'' + m + '\'>';
                                l += '<span class=\'discovered-feed-type\'><a class=\'discovered-feed-url\' title=\'' + n + '\' target=\'_blank\' rel=\'noopener noreferrer\' href=\'' + j[m].href + '\'>' + j[m].type + '</a></span>';
                                l += '<a class=\'discovered-feed-previewlink\' target=\'_blank\' rel=\'noopener noreferrer\' title=\'' + k + '\' href=\'' + j[m].href + '\'>';
                                l += '<img src=\'images/preview-icon.png\' class=\'previewicon\'></a></div>';
                                l += '<div class=\'discovered-feed-name\' id=\'feedname-' + m + '\' contenteditable=\'true\' title=\'' + q + '\'>' + p.escapeHtml(j[m].title) + '</div></div>';
                            }
                            l += '<div class="results-toolbar"><div class="results-label">' + Locale.i18n('mainmenu_addtofolder', true) + '</div><div class="results-folder">';
                            l += c();
                            l += '</div>';
                            l += '<div class="results-buttons">';
                            l += '<input class="uibutton" type="button" id="subscribe" value="' + Locale.i18n('mainmenu_button_subscribe', true) + '">&nbsp;<input class="uibutton" type="button" id="close" value="' + Locale.i18n('mainmenu_button_close', true) + '">';
                            l += '</div>';
                            l += '</div>';
                            $('div#results').html(l);
                            $('div.discovered-feed-name').keydown(function (i) {
                                if (i.keyCode == 13) {
                                    i.preventDefault();
                                    $(this).blur();
                                    return false;
                                }
                            });
                            $('a.discovered-feed-previewlink').click(function (r) {
                                var i = $(this).attr('href');
                                d('Feedbro', 'reader.html?preview=' + encodeURIComponent(i));
                                r.preventDefault();
                                return false;
                            });
                            $('input#close').click(function () {
                                window.close();
                            });
                            $('input#subscribe').click(function () {
                                var i = $('select#folder > option:selected').attr('value');
                                e.setLastFolderId(i);
                                var r = 0, s;
                                $('input:checkbox[name=feed]:checked').each(function () {
                                    var u = $(this).val();
                                    var x = $('div#feedname-' + u).text();
                                    var w = e.getNodesWithUrl(j[u].href);
                                    if (w.length > 0) {
                                        var v = w[0];
                                        var t;
                                        if (v.parent && v.parent.data && v.parent.data.type == 2) {
                                            t = v.parent.data.name;
                                        }
                                        if (t) {
                                            alertify.error(Locale.i18n('mainmenu_error_duplicate_folder', true, x, t, v.data.name));
                                        } else {
                                            alertify.error(Locale.i18n('mainmenu_error_duplicate', true, x, v.data.name));
                                        }
                                    } else {
                                        r++;
                                        s = e.addFeed(j[u].href, x, x, i);
                                        e.notifyEngine('addfeed', s, i);
                                        e.loadFeedItems(s);
                                    }
                                });
                                if (r > 0) {
                                    e.saveData();
                                    alertify.set({delay: 2000});
                                    if (r > 1) {
                                        alertify.success(Locale.i18n('mainmenu_success_addedmultiple', true, r));
                                    } else {
                                        alertify.success(Locale.i18n('mainmenu_success_addedsingle', true));
                                    }
                                } else {
                                    alertify.set({delay: 2000});
                                    alertify.error(Locale.i18n('mainmenu_error_nothing_selected', true));
                                }
                            });
                        } else {
                            alertify.set({delay: 2000});
                            alertify.error(Locale.i18n('mainmenu_error_nothing_found', true));
                        }
                    });
                } catch (f) {
                    console.log('Failed to load', f);
                    $('div.menuitem').css({cursor: 'pointer'});
                }
            }
        });
    }

    this.customInit = function () {
        e = chrome.extension.getBackgroundPage();
        if (e == null) {
            $('body').html('<div style=\'padding: 10px; min-width: 230px; text-align: center\'>Not available in Private Browsing Mode</div>');
            return;
        }
        e = e.feedbrobg;
        Locale.start();
        Locale.activeMap = e.getActiveLocaleMap();
        Locale.translate(true);
        alertify.set({labels: {cancel: Locale.i18n('dialog_cancel', true), ok: Locale.i18n('dialog_ok', true)}});
        $('div#reader').click(function () {
            d('Feedbro', 'reader.html');
        });
        $('div#findfeeds').click(function () {
            a();
        });
        $('div#options').click(function () {
            d('Feedbro - Options', 'options.html');
        });
        $('div#explorer').click(function () {
            $('div#articlelist').css({display: 'none'});
            $('div#menuitems').css({display: 'none'});
            $('div#results').css({display: 'none'});
            $('div#articlelistdivider').css({display: 'none'});
            var g = new feedbro.LiveClick();
            g.init();
        });
        if (e.getSettings().getShowLatestInPopup()) {
            var f = new feedbro.MainmenuPopup();
            f.showPopupItems('div#articlelist');
            $('body').css({width: '500px'});
        } else {
            $('div#articlelist').css({display: 'none'});
            $('div#articlelistdivider').css({display: 'none'});
        }
    };
};
var feedbro = feedbro || {};
feedbro.MainmenuPopup = function () {
    var a = this;
    this.showPopupItems = function (f) {
        var c = new Date().getTime();
        var b = new feedbro.Strings();
        var g = new feedbro.FeedIconManager();
        var d = chrome.extension.getBackgroundPage().feedbrobg;
        var e = d.getSettings();
        var i = e.getArticleLinkMode();
        var h = '../images';
        g.setSettings(e);
        d.handleMessageEvent({action: 'loadall', start: 0, count: 9, maxdate: c, unread: 1}, 'bg', function (m) {
            var t = d.getFeedEntries();
            var o;
            var p = '', v, s, q;
            if (t.length == 0) {
                $('div#articlelist').css({display: 'none'});
                $('div#articlelistdivider').css({display: 'none'});
            }
            var l = Locale.i18n('mainmenu_open_originalarticle', true);
            var w = Locale.i18n('mainmenu_mark_read', true);
            var k = Locale.i18n('mainmenu_favorite', true);
            var r = Locale.i18n('mainmenu_delete', true);
            for (o = 0; o < t.length; o++) {
                var u = b.findImages(t[o].content);
                b.fixTitle(t[o]);
                var j = b.isTextRTL(t[o].title, true, 100);
                var n = b.isTextRTL(t[o].feed.title, true, 100);
                if (u.length > 0) {
                    v = '<div class=\'article-image\'><img class=\'center-cropped\' src=\'' + u[0].src + '\'></div>';
                } else {
                    v = '';
                }
                if (t[o].starred == 1) {
                    s = '<img title=\'' + k + '\' class=\'starred\' data-id=\'' + t[o].id + '\' src=\'' + h + '/star-yellow.png\'>';
                } else {
                    s = '<img title=\'' + k + '\' data-id=\'' + t[o].id + '\' src=\'' + h + '/star-grey.png\'>';
                }
                q = '<div class=\'article-popup-linkhtml\'><a class=\'article-link\' data-id=\'' + t[o].id + '\'target=\'_blank\' href=\'' + t[o].link + '\'><img title=\'' + l + '\' data-id=\'' + t[o].id + '\' src=\'' + h + '/link-icon.png\' width=\'16\'></a></div>';
                p += '<div class=\'article-popup\' data-id=\'' + t[o].id + '\'><table><tr>';
                p += '<td class=\'article-meta\'><div class=\'article-popup-title' + (j ? ' rtl-layout' : '') + '\'>';
                p += '<span class=\'open-article\' data-id=\'' + t[o].id + '\'>' + b.escapeHref(b.truncate(b.stripTags(t[o].title), 100, '...')) + '</span>';
                p += '</div>';
                p += '<div class=\'article-popup-bottom\'>';
                p += '<div class=\'article-popup-feedtitle' + (n ? ' rtl-layout' : '') + '\'><img class=\'feedTitleIcon\' src=\'' + g.getIconFromGoogleCache(t[o].link) + '\'>' + b.escapeHref(t[o].feed.title) + '</div>';
                p += '<div class=\'article-popup-delete\'><img title=\'' + r + '\' data-id=\'' + t[o].id + '\' src=\'' + h + '/trash.png\'></div>';
                p += '<div class=\'article-popup-star\'>' + s + '</div>' + q;
                p += '<div class=\'article-popup-markread\'><img title=\'' + w + '\' data-id=\'' + t[o].id + '\' src=\'' + h + '/icon-unread.png\'></div>';
                p += '<div class=\'article-popup-date\'>' + b.timeAgo(t[o].publishedDate.getTime()) + '</div>';
                p += '</div></td></tr></table></div>';
            }
            var x = $(p);
            $(f).html(x);
            if (i == 1) {
                x.find('span.open-article').click(function () {
                    feedbro.Chrome.openTab('Feedbro', 'reader.html?article=' + $(this).data('id'));
                });
            } else {
                x.find('span.open-article').click(function () {
                    $(this).parent().parent().find('a.article-link').get(0).click();
                });
            }
            x.find('div.article-popup-star img').click(function () {
                var y = $(this);
                d.toggleItemStarred(y.data('id'));
                if (y.hasClass('starred')) {
                    y.removeClass('starred');
                    y.attr('src', h + '/star-grey.png');
                }
                if (!y.hasClass('starred')) {
                    y.addClass('starred');
                    y.attr('src', h + '/star-yellow.png');
                }
            });
            x.find('div.article-popup-delete img').click(function () {
                var y = $(this);
                var z = parseInt(y.attr('data-id'), 10);
                d.markUnread(z, 0);
                d.markDeleted(z, 1);
                d.updateTotalUnread();
                $('div.article-popup[data-id=\'' + z + '\']').remove();
            });
            x.find('div.article-popup-markread img').click(function () {
                var y = $(this);
                var z = parseInt(y.attr('data-id'), 10);
                d.markUnread(z, 0);
                d.updateTotalUnread();
                $('div.article-popup[data-id=\'' + z + '\']').remove();
            });
            x.find('a.article-link').click(function () {
                var y = parseInt($(this).attr('data-id'), 10);
                d.markUnread(y, 0);
                d.updateTotalUnread();
            });
        });
    };
};
var feedbro = feedbro || {};
feedbro.MathJax = function () {
    var b = this;
    var a = true;
    var e = false;
    var c = false;
    var d = [];
    this.init = function () {
        if (e) {
            return;
        }
        e = true;
        var g = document.createElement('script');
        g.type = 'text/javascript';
        g.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
        g.async = 'async';
        document.head.appendChild(g);
    };
    this.shouldRender = function (g) {
        if (!g || g.length < 4 || !a) {
            return false;
        }
        var j, k = g.length, m = 0, l, h = false;
        while (true) {
            j = g.indexOf('$', m);
            if (j < 0) {
                break;
            }
            if (j + 1 < k) {
                l = g.charAt(j + 1);
                if (l != '\\' && (l == ' ' || l == '1' || l == '2' || l == '3' || l == '4' || l == '5' || l == '6' || l == '7' || l == '8' || l == '9' || l == '0')) {
                    h = false;
                } else {
                    h = true;
                    break;
                }
            }
            m = j + 1;
        }
        if (h) {
            b.init();
        }
        return h;
    };
    this.render = function (g) {
        b.init();
        if (window.MathJax != undefined) {
            MathJax.Hub.Queue(['Typeset', MathJax.Hub, document.getElementById(g)]);
        } else {
            d.push(g);
            if (!c) {
                f();
            }
        }
    };

    function f() {
        if (window.MathJax != undefined) {
            if (d.length > 0) {
                var g;
                for (g = 0; g < d.length; g++) {
                    MathJax.Hub.Queue(['Typeset', MathJax.Hub, document.getElementById(d[g])]);
                }
                d = [];
            }
        } else {
            c = true;
            setTimeout(f, 1000);
        }
    }
};
var feedbro = feedbro || {};
feedbro.Notifications = function () {
    var a = this;
    var e = new feedbro.Strings();
    var c;
    var b = {};
    var d = [];
    this.setSettings = function (g) {
        c = g;
    };
    this.init = function () {
        if (chrome.notifications) {
            setInterval(f, 1000);
            chrome.notifications.onClicked.addListener(function (g) {
                chrome.notifications.clear(g, function (k) {
                    if (c.getPopupClickMode() == 2) {
                        var j = b[g];
                        chrome.tabs.create({url: j});
                        try {
                            var i = chrome.extension.getBackgroundPage().feedbrobg;
                            i.markUnread(parseInt(g, 10), 0);
                            i.updateTotalUnread();
                        } catch (h) {
                            console.log('Failed to mark article with id ' + g + ' as read');
                        }
                    } else {
                        feedbro.Chrome.openTab('Feedbro', 'reader.html?article=' + g);
                    }
                });
            });
        } else {
            console.log('chrome.notifications API is not available. Notifications disabled!');
        }
    };
    this.createItemNotification = function (j) {
        if (c.getNotificationsEnabled() != true) {
            return;
        }
        if (chrome.notifications == undefined) {
            return;
        }
        var g;
        if (j.feed.link != undefined && j.feed.link.indexOf('https://twitter.com') == 0) {
            g = {src: 'images/twitter128.png'};
        } else {
            if (j.feed.link != undefined && j.feed.link.indexOf('facebook.com/') != -1) {
                g = {src: 'images/facebook128.png'};
            } else {
                if (j.feed.link != undefined && j.feed.link.indexOf('youtube.com/') != -1) {
                    g = {src: 'images/youtube128.png'};
                } else {
                    g = {src: 'images/reader128.png'};
                }
            }
        }
        e.fixTitle(j);
        var h = {
            type: 'basic',
            title: e.unescapeHtml(e.stripTags(j.feed.title)) + (j.author != undefined && j.author != '' ? ' | ' + e.unescapeHtml(j.author) : ''),
            message: e.unescapeHtml(e.stripTags(j.title)),
            iconUrl: g.src
        };
        var k = j.id + '';
        b[k] = j.link + '';
        var i = {id: k, options: h};
        d.push(i);
    };

    function f() {
        if (chrome.notifications == undefined) {
            return;
        }
        if (d.length > 0) {
            var g = d.shift();
            var h = c.getNotificationTimeout();
            chrome.notifications.create(g.id, g.options, function (i) {
                if (h > 0) {
                    setTimeout(function () {
                        chrome.notifications.clear(i, function (j) {
                        });
                    }, h);
                }
            });
        }
    }
};
var feedbro = feedbro || {};
feedbro.Options = function () {
    var i = this;
    var d;
    var a;

    function e() {
        return chrome.extension.getBackgroundPage().feedbrobg;
    }

    this.getLicense = function () {
        chrome.runtime.sendMessage({action: 'getlicense'}, function (k) {
            d = JSON.parse(k.license);
            a = k.status;
            i.showLicense(d);
        });
    };
    this.showLicense = function (m) {
        var k = '';
        if (m == null) {
            k = 'None';
        } else {
            var l;
            switch (m.data.type) {
                case'1':
                    l = 'Personal License';
                    break;
                case'2':
                    l = 'Corporate License';
                    break;
            }
            k += 'Licensed to ' + m.data.owner + ' &lt;' + m.data.email + '&gt; - Valid until: ' + m.data.valid + ' - Type: ' + l;
        }
        $('div#license').html(k);
    };
    this.downloadFile = function (p, m, r) {
        var q = navigator.userAgent.indexOf('Windows') == -1;
        var o = navigator.userAgent.indexOf('Vivaldi') != -1;
        if (q && o) {
            r = 'application/octet-stream';
        }
        var n = new Blob([p], {type: r});
        var l = window.URL.createObjectURL(n);
        var k = document.createElement('a');
        k.href = l;
        k.download = m;
        k.style.display = 'none';
        document.body.appendChild(k);
        k.click();
    };

    function g(k, u) {
        var n = $(k);
        var o = n.attr('title');
        var r = n.attr('text');
        var q = n.attr('xmlUrl');
        var l;
        var m;
        var t = n.attr('entryContent');
        var p = n.attr('maxItems');
        var s = n.attr('scanDelay');
        if (!o || o == '') {
            o = r;
        }
        if (!r && o) {
            r = o;
        }
        if (r == undefined || r == '') {
            r = 'Unnamed feed';
        }
        if (o == undefined || o == '') {
            o = 'Unnamed feed';
        }
        if (q != undefined) {
            l = e().addFeed(q, r, o, u);
            if ((t && t != '') || (p && p != '') || (s && s != '')) {
                m = e().getFeedTree().getNode(l);
                if (m) {
                    t = parseInt(t, 10);
                    if (!isNaN(t)) {
                        m.data.entrycontent = t;
                    }
                    p = parseInt(p, 10);
                    if (!isNaN(p)) {
                        m.data.maxitems = p;
                    }
                    s = parseInt(s, 10);
                    if (!isNaN(s)) {
                        m.data.scandelay = s;
                    }
                }
            }
        }
    }

    this.importFeeds = function (r, l, n) {
        try {
            var s;
            var p;
            try {
                s = $.parseXML(r);
                if (s == undefined) {
                    throw'Invalid file';
                }
                p = $(s);
                if (p.find('> opml').length != 1) {
                    throw'Invalid file';
                }
            } catch (k) {
                alertify.alert(Locale.i18n('options_error_invalidopml', true, l.name));
                return;
            }
            var t = e().getFeedTree();
            var m;
            var o = {addedFeeds: 0, addedFolders: 0, skippedFeeds: 0, skippedFolders: 0};
            $.each(p.find('opml > body > outline'), function (u, w) {
                var x = $(w);
                var y = x.attr('text');
                var v = x.attr('type');
                if (v == 'rss' || (v == undefined && x.attr('xmlUrl') != undefined)) {
                    if (!c(n, t, 1, x.attr('xmlUrl'))) {
                        g(w, -1);
                        o.addedFeeds++;
                    } else {
                        console.log('Skipped feed ' + x.attr('xmlUrl'));
                        o.skippedFeeds++;
                    }
                } else {
                    if (v == 'link' || v == 'include') {
                        console.log('Skipped item ' + u + ' of unsupported type: ' + v);
                    } else {
                        if (!y) {
                            y = x.attr('title');
                        }
                        if (y == undefined || y == '') {
                            y = 'Folder';
                        }
                        var z;
                        if (n) {
                            m = t.searchNodes({type: 2, name: y});
                            if (m.length > 0) {
                                z = m[0].data.id;
                                o.skippedFolders++;
                            } else {
                                z = e().addFolder(y);
                                o.addedFolders++;
                            }
                        } else {
                            z = e().addFolder(y);
                            o.addedFolders++;
                        }
                        $.each(x.find('outline'), function (A, C) {
                            var B = $(C);
                            if (B.attr('type') == 'rss' || (B.attr('type') == undefined && B.attr('xmlUrl') != undefined)) {
                                if (!c(n, t, 1, B.attr('xmlUrl'))) {
                                    g(C, z);
                                    o.addedFeeds++;
                                } else {
                                    console.log('Skipped feed ' + B.attr('xmlUrl'));
                                    o.skippedFeeds++;
                                }
                            }
                        });
                    }
                }
            });
            e().saveData();
            e().notifyEngine('reloaddata');
            e().scanUnread();
            alertify.alert(Locale.i18n('options_action_opmlimport_success', true, o.addedFeeds, o.addedFolders, o.skippedFeeds, o.skippedFolders));
        } catch (q) {
            alertify.alert(Locale.i18n('options_action_opmlimport_failed', true, q + ''));
        }
    };

    function c(l, k, m, n) {
        if (!l) {
            return false;
        }
        if (m == 1 && k.searchNodes({type: 1, url: n}).length == 0) {
            return false;
        } else {
            if (m == 2 && k.searchNodes({type: 2, name: n}).length == 0) {
                return false;
            }
        }
        return true;
    }

    function j() {
        try {
            var n = $('input#fileupload');
            var o = n.prop('files');
            if (o == undefined || o.length < 1) {
                console.log('No file selected!');
                return;
            }
            var l = o[0];
            var m = new FileReader();
            m.onload = function (r) {
                var q = r.target.result;
                var p = e().getSettings().getSkipOpmlDupes();
                i.importFeeds(q, l, p);
                n.val(null);
            };
            m.readAsText(l);
        } catch (k) {
            console.log(k);
        }
        return false;
    }

    function b() {
        try {
            var n = $('input#rulesupload');
            var o = n.prop('files');
            if (o == undefined || o.length < 1) {
                console.log('No file selected!');
                return;
            }
            var l = o[0];
            var m = new FileReader();
            m.onload = function (r) {
                var q = r.target.result;
                try {
                    e().getRuleEngine().importRules(q);
                    alertify.alert(Locale.i18n('options_action_rulesimport_success', true));
                } catch (p) {
                    console.log(p);
                    alertify.alert(Locale.i18n('options_action_rulesimport_failed', true, p + ''));
                }
                n.val(null);
            };
            m.readAsText(l);
        } catch (k) {
            console.log(k);
            alertify.alert(Locale.i18n('options_action_rulesimport_failed', true, k + ''));
        }
        return false;
    }

    function f() {
        try {
            var n = $('input#licenseupload');
            var o = n.prop('files');
            if (o == undefined || o.length < 1) {
                return;
            }
            var l = o[0];
            var m = new FileReader();
            m.onload = function (r) {
                var q = r.target.result;
                try {
                    e().updateLicense(q, function (s) {
                        if (s == 1) {
                            alertify.success('License successfully imported!');
                            i.getLicense();
                        }
                    }, function (s) {
                        if (s == -3) {
                            alertify.error('License has expired');
                        } else {
                            alertify.error('Invalid license');
                        }
                    });
                } catch (p) {
                    console.log(p);
                    alertify.alert('Unable to import license: ' + p);
                }
                n.val(null);
            };
            m.readAsText(l);
        } catch (k) {
            console.log(k);
            alertify.alert('Unable to import license: ' + k);
        }
        return false;
    }

    function h() {
        $('link#theme').attr('href', 'styles/theme-' + e().getSettings().getTheme() + '.css');
    }

    this.initOptions = function () {
        try {
            i.refreshLocale();
        } catch (l) {
            console.log('Locale init error', l);
        }
        h();
        $('a#export').click(function () {
            var q = new feedbro.Strings();
            var p = q.getDatestamp();
            i.downloadFile(e().exportOpml(), 'feedbro-subscriptions-' + p + '.opml', 'application/xml');
            return false;
        });
        $('a#import').click(function () {
            $('input#fileupload').click();
            return false;
        });
        $('a#clearall').click(function () {
            alertify.confirm(Locale.i18n('options_action_delete_feedsandfolders', true), function (q) {
                if (q) {
                    try {
                        e().clearAll();
                        setTimeout(function () {
                            alertify.alert(Locale.i18n('options_action_delete_feedsandfolders_success', true));
                        }, 1000);
                    } catch (p) {
                        console.log('Error in removing all subscriptions: ', p);
                    }
                }
            });
            return false;
        });
        $('a#deleteRules').click(function () {
            alertify.confirm(Locale.i18n('options_action_delete_rules', true), function (r) {
                if (r) {
                    try {
                        var q = e().getRuleEngine();
                        q.deleteRules();
                        q.saveRules();
                        setTimeout(function () {
                            alertify.alert(Locale.i18n('options_action_delete_rules_success', true));
                        }, 1000);
                    } catch (p) {
                        console.log('Error in deleting rules: ', p);
                    }
                }
            });
            return false;
        });
        var n = e().getSettings();
        $('input#fileupload').change(function () {
            j();
            return false;
        });
        $('input#rulesupload').change(function () {
            b();
            return false;
        });
        $('input#licenseupload').change(function () {
            f();
            return false;
        });
        $('a#importlicense').click(function () {
            $('input#licenseupload').click();
            return false;
        });
        $('a#exportRules').click(function () {
            var p = e().getRuleEngine().exportRules();
            i.downloadFile(JSON.stringify(p), 'feedbro-rules.json', 'application/json');
            return false;
        });
        $('a#importRules').click(function () {
            $('input#rulesupload').click();
            return false;
        });
        $('a#importFirefox').click(function () {
            document.location.href = 'firefox-bookmarks.html';
        });
        $('select#updatethreads').val(n.getUpdateThreads());
        $('select#updatethreads').change(function () {
            e().getSettings().setUpdateThreads($(this).val());
            e().saveSettings();
        });
        $('select#timeout').val(n.getFeedTimeout() / 1000);
        $('select#timeout').change(function () {
            e().getSettings().setFeedTimeout($(this).val() * 1000);
            e().saveSettings();
        });
        $('select#articlelink').val(n.getArticleLinkMode());
        $('select#articlelink').change(function () {
            var p = parseInt($(this).val(), 10);
            e().getSettings().setArticleLinkMode(p);
            e().saveSettings();
        });
        $('select#polldelay').val(n.getPollDelay());
        $('select#polldelay').change(function () {
            var p = $(this).val();
            e().getSettings().setPollDelay(p);
            e().saveSettings();
        });
        $('select#targetlanguage').val(n.getTargetLanguage());
        $('select#targetlanguage').change(function () {
            var p = $(this).val();
            e().getSettings().setTargetLanguage(p);
            e().saveSettings();
        });
        $('select#maxentries').val(n.getFeedMaxEntries());
        $('select#maxentries').change(function () {
            e().getSettings().setFeedMaxEntries($(this).val());
            e().saveSettings();
        });
        $('select#notificationtimeout').val(n.getNotificationTimeout());
        $('select#notificationtimeout').change(function () {
            e().getSettings().setNotificationTimeout($(this).val());
            e().saveSettings();
        });
        $('select#markreadmode').val(n.getMarkReadMode());
        $('select#markreadmode').change(function () {
            e().getSettings().setMarkReadMode($(this).val());
            e().saveSettings();
        });
        $('select#iconclick').val(n.getIconClickMode());
        $('select#iconclick').change(function () {
            e().getSettings().setIconClickMode($(this).val());
            e().saveSettings();
            e().setPopupEnabled($(this).val() == '1');
        });
        $('select#popupclick').val(n.getPopupClickMode());
        $('select#popupclick').change(function () {
            e().getSettings().setPopupClickMode($(this).val());
            e().saveSettings();
        });
        $('select#faviconprovider').val(n.getFavIconProvider());
        $('select#faviconprovider').change(function () {
            e().getSettings().setFavIconProvider($(this).val());
            e().saveSettings();
        });
        $('input#iconclickreloads').prop('checked', n.getIconClickReloads());
        $('input#iconclickreloads').change(function () {
            e().getSettings().setIconClickReloads($(this).is(':checked'));
            e().saveSettings();
        });
        $('input#tag-iframe').prop('checked', n.getFilterIframe());
        $('input#tag-iframe').change(function () {
            e().getSettings().setFilterIframe($(this).is(':checked'));
            e().saveSettings();
        });
        $('input#tag-embed').prop('checked', n.getFilterEmbed());
        $('input#tag-embed').change(function () {
            e().getSettings().setFilterEmbed($(this).is(':checked'));
            e().saveSettings();
        });
        $('input#sound').prop('checked', n.getSoundEnabled());
        $('input#sound').change(function () {
            e().getSettings().setSoundEnabled($(this).is(':checked'));
            e().saveSettings();
        });
        $('input#latestinpopup').prop('checked', n.getShowLatestInPopup());
        $('input#latestinpopup').change(function () {
            e().getSettings().setShowLatestInPopup($(this).is(':checked'));
            e().saveSettings();
        });
        $('input#mathjax').prop('checked', n.getMathJaxEnabled());
        $('input#mathjax').change(function () {
            e().getSettings().setMathJaxEnabled($(this).is(':checked'));
            e().saveSettings();
        });
        $('input#startallitems').prop('checked', n.getStartPageAllItems());
        $('input#startallitems').change(function () {
            e().getSettings().setStartPageAllItems($(this).is(':checked'));
            e().saveSettings();
        });
        $('input#notifications').prop('checked', n.getNotificationsEnabled());
        $('input#notifications').change(function () {
            e().getSettings().setNotificationsEnabled($(this).is(':checked'));
            e().saveSettings();
        });
        $('input#disableautoscan').prop('checked', n.getDisableAutoScan());
        $('input#disableautoscan').change(function () {
            e().getSettings().setDisableAutoScan($(this).is(':checked'));
            e().saveSettings();
        });
        $('input#disableautoselect').prop('checked', n.getDisableAutoSelect());
        $('input#disableautoselect').change(function () {
            e().getSettings().setDisableAutoSelect($(this).is(':checked'));
            e().saveSettings();
        });
        $('input#confirmmarkread').prop('checked', n.getConfirmMarkRead());
        $('input#confirmmarkread').change(function () {
            e().getSettings().setConfirmMarkRead($(this).is(':checked'));
            e().saveSettings();
        });
        $('input#truncatetitles').prop('checked', n.getTruncateTitles());
        $('input#truncatetitles').change(function () {
            e().getSettings().setTruncateTitles($(this).is(':checked'));
            e().saveSettings();
        });
        $('input#justifytext').prop('checked', n.getJustifyText());
        $('input#justifytext').change(function () {
            e().getSettings().setJustifyText($(this).is(':checked'));
            e().saveSettings();
        });
        $('input#usefavicons').prop('checked', n.getUseFavIcons());
        $('input#usefavicons').change(function () {
            e().getSettings().setUseFavIcons($(this).is(':checked'));
            e().saveSettings();
            e().notifyEngine('reloaddata');
        });
        $('input#faviconfromline').prop('checked', n.getFaviconOnFromline());
        $('input#faviconfromline').change(function () {
            e().getSettings().setFaviconOnFromline($(this).is(':checked'));
            e().saveSettings();
            e().notifyEngine('reloaddata');
        });
        $('input#usefaviconstitles').prop('checked', n.getUseFavIconsTitles());
        $('input#usefaviconstitles').change(function () {
            e().getSettings().setUseFavIconsTitles($(this).is(':checked'));
            e().saveSettings();
        });
        $('input#skipopmldupes').prop('checked', n.getSkipOpmlDupes());
        $('input#skipopmldupes').change(function () {
            e().getSettings().setSkipOpmlDupes($(this).is(':checked'));
            e().saveSettings();
        });
        $('input.quicktag').blur(function () {
            var p = $(this);
            e().getSettings().setQuickTag(p.attr('id'), p.val());
            e().saveSettings();
        });
        $('input#qtag1').val(n.getQuickTag('qtag1'));
        $('input#qtag2').val(n.getQuickTag('qtag2'));
        $('input#qtag3').val(n.getQuickTag('qtag3'));
        $('input#qtag4').val(n.getQuickTag('qtag4'));
        $('input#qtag5').val(n.getQuickTag('qtag5'));
        var k = new Date();
        $('select#dateformat option').each(function () {
            $(this).text(k.format($(this).val()));
        });
        $('select#theme').val(n.getTheme());
        $('select#theme').change(function () {
            e().getSettings().setTheme($(this).val());
            e().saveSettings();
            e().updateTheme();
            h();
        });
        $('select#bodyfontsize').val(n.getArticleBodyFontSize());
        $('select#bodyfontsize').change(function () {
            e().getSettings().setArticleBodyFontSize($(this).val());
            e().saveSettings();
            e().updateCss();
        });
        $('select#titlefontsize').val(n.getTitleFontSize());
        $('select#titlefontsize').change(function () {
            e().getSettings().setTitleFontSize($(this).val());
            e().saveSettings();
            e().updateCss();
        });
        var m, o;
        for (m = 1; m <= 6; m++) {
            o = $('select#articlewidth' + m);
            o.val(String(n.getArticleWidth(m)));
            o.change(function () {
                e().getSettings().setArticleWidth($(this).attr('data-mode'), $(this).val());
                e().saveSettings();
                e().updateCss();
            });
        }
        $('select#cardheight').val(n.getCardHeight());
        $('select#cardheight').change(function () {
            e().getSettings().setCardHeight($(this).val());
            e().saveSettings();
            e().updateCss();
        });
        $('select#articlefontfamily').val(n.getArticleFontFamily());
        $('select#articlefontfamily').change(function () {
            e().getSettings().setArticleFontFamily($(this).val());
            e().saveSettings();
            e().updateCss();
        });
        $('select#lineheight').val(n.getArticleLineHeight());
        $('select#lineheight').change(function () {
            e().getSettings().setArticleLineHeight($(this).val());
            e().saveSettings();
            e().updateCss();
        });
        $('select#dateformat').val(n.getDateFormat());
        $('select#dateformat').change(function () {
            e().getSettings().setDateFormat($(this).val());
            e().saveSettings();
        });
        $('select#inactivelimit').val(n.getInactiveFeedLimit());
        $('select#inactivelimit').change(function () {
            e().getSettings().setInactiveFeedLimit($(this).val());
            e().saveSettings();
        });
        $('select#confirmmode').val(n.getConfirmMarkReadMode());
        $('select#confirmmode').change(function () {
            e().getSettings().setConfirmMarkReadMode($(this).val());
            e().saveSettings();
        });
        $('div#left').click(function () {
            i.restoreView();
        });
        $('div#right').click(function () {
            i.restoreView();
        });
        $('select#locale').change(function (p) {
            var q = $(this).val();
            e().selectLocale(q);
            i.refreshLocale();
        });
        $('a#importLocale').click(function () {
            alertify.prompt(Locale.i18n('options_locale_url', true), function (q, p) {
                if (q) {
                    i.updateLocale(p);
                }
            });
        });
        $('a#updateLocale').click(function () {
            var q = $('select#locale').val();
            if (q == 'custom') {
                var p = e().getSettings().getLocaleMeta();
                i.updateLocale(p.locale_source_url);
            }
        });
        $('#templateLocale').click(i.getLocaleTemplate);
    };
    this.updateLocale = function (k) {
        e().installLocale(k, function (l) {
            i.refreshLocale();
            alertify.alert(Locale.i18n('options_action_locale_update_success', true));
        }, function (l) {
            setTimeout(function () {
                alertify.alert(Locale.i18n('options_action_locale_update_failed', true, l));
            }, 500);
        });
    };
    this.refreshLocale = function () {
        var l = e().getSettings();
        var m = l.getLocaleMeta();
        Locale.start();
        Locale.activeMap = e().getActiveLocaleMap();
        Locale.translate(true);
        alertify.set({labels: {cancel: Locale.i18n('dialog_cancel', true), ok: Locale.i18n('dialog_ok', true)}});
        if (m) {
            var n = $('#locale option[value=\'custom\']');
            var k = new feedbro.Strings();
            if (n == undefined || n.length == 0) {
                $('#locale').append('<option value=\'custom\'>' + k.escapeHtml(m.locale_name + ' (' + m.locale_type + ')') + '</option>');
            } else {
                n.html(k.escapeHtml(m.locale_name + ' (' + m.locale_type + ')'));
            }
        }
        $('#locale').val(l.getLocale());
    };
    this.getLocaleTemplate = function () {
        i.downloadFile(JSON.stringify(e().getDefaultLocaleMap(), undefined, 4), 'feedbro-locale-en_US.json', 'application/json');
    };
    this.restoreView = function () {
        chrome.tabs.query({title: 'Feedbro'}, function (k) {
            if (k.length > 0) {
                chrome.tabs.update(k[0].id, {active: true});
            } else {
                document.location.href = 'reader.html';
            }
        });
    };
};
var feedbro = feedbro || {};
feedbro.Persistence = {};
feedbro.Persistence.loadValue = function (a, b) {
    chrome.storage.local.get(a, function (c) {
        if (chrome.runtime.lastError) {
            console.log('chrome.storage.local.get failed! Reload the extension or restart the browser. Error: ', chrome.runtime.lastError);
        } else {
            b(c[a]);
        }
    });
};
feedbro.Persistence.saveValue = function (a, b, d) {
    var c = {};
    c[a] = b;
    chrome.storage.local.set(c, function () {
        if (chrome.runtime.lastError) {
            console.log('Failed to save: Persistence.saveValue with parameter: ' + a, chrome.runtime.lastError);
        }
        if (d) {
            d();
        }
    });
};
var feedbro = feedbro || {};
feedbro.RuleEngine = function () {
    var k = this;
    var l;
    var f = 0;
    var e = 0;
    var d = 0;
    var j = 0;
    var g = false;
    var a;
    var c = [];
    var h = new feedbro.Strings();
    var b = false;
    var i = false;
    this.setDebug = function (m) {
        b = m;
    };
    this.isEnabled = function () {
        return g;
    };
    this.setEnabled = function (m) {
        g = m;
    };
    this.setActionHandler = function (m) {
        a = m;
    };
    this.process = function (n, o, q, m) {
        if (!g) {
            return;
        }
        if (a == undefined) {
            console.log('RuleEngine: undefined ActionHandler');
            return;
        }
        var p = [];
        k.evaluateRulesForEntry(n, o, p);
        if (p.length > 0) {
            a.processActions(o, p, q, m);
        }
    };
    this.evaluateRulesForAllEntries = function (o, m) {
        if (!g) {
            return [];
        }
        d = 0;
        var p = [];
        console.log('evaluateRulesForAllEntries: start');
        for (var n = 0; n < m.length; n++) {
            k.evaluateRulesForEntry(o, m[n], p);
        }
        console.log('evaluateRulesForAllEntries: matched rules: ' + d + ' actions: ' + p.length);
        return p;
    };
    this.evaluateRulesForEntry = function (o, w, q, n) {
        if (!g) {
            return;
        }
        var s;
        for (s = 0; s < c.length; s++) {
            var u = k.evaluate(o, w, c[s]);
            if (u != false) {
                for (var r = 0; r < u.length; r++) {
                    q.push(u[r]);
                }
                if (n) {
                    try {
                        n(c[s]);
                    } catch (v) {
                        console.log('RuleListener error', v);
                    }
                }
                if (c[s].fallthrough != undefined && c[s].fallthrough == false) {
                    break;
                }
            }
        }
        if (q && q.length > 0) {
            var p;
            var t = false;
            var m = false;
            for (s = 0; s < q.length; s++) {
                p = q[s];
                if (p.type == feedbro.RuleEngine.ACTION_HIDEARTICLE) {
                    t = p;
                } else {
                    if (p.type == feedbro.RuleEngine.ACTION_DELETEARTICLE) {
                        m = p;
                    }
                }
            }
            if (t || m) {
                q.length = 0;
                if (t) {
                    q.push(t);
                }
                if (m) {
                    q.push(m);
                }
            }
        }
    };
    this.evaluate = function (n, x, v) {
        if (!g) {
            return false;
        }
        if (!v.enabled) {
            return false;
        }
        if (v.trigger != n) {
            return false;
        }
        if (b) {
            console.log(v.name + ' context: ' + v.contexttype + ' folder: ' + x.folderid + ' feedid: ' + x.feedid + ' inFolder: ' + h.inArray(x.folderid, v.contextvalue) + ' inFeed: ' + h.inArray(x.id, v.contextvalue));
        }
        if (v.contexttype == 2 && (x.folderid != v.contextvalue && !h.inArray(String(x.folderid), v.contextvalue))) {
            return false;
        }
        if (v.contexttype == 3 && (x.feedid != v.contextvalue && !h.inArray(String(x.feedid), v.contextvalue))) {
            return false;
        }
        var s = [];
        var y, u;
        for (var q = 0; q < v.conditions.length; q++) {
            u = v.conditions[q];
            y = '';
            if (u.target == 1) {
                y = x.content;
            } else {
                if (u.target == 2) {
                    y = x.author;
                } else {
                    if (u.target == 3) {
                        y = x.title;
                    } else {
                        if (u.target == 4) {
                            y = x.link;
                        }
                    }
                }
            }
            var o = (u.casemode == 2);
            if (u.mode == 1) {
                if (u.value == '' || u.value == undefined) {
                    s.push(v);
                } else {
                    if ((u.regexp instanceof RegExp) == false) {
                        u.regexp = h.getRegexp(u.value, o ? 'gi' : 'g');
                    }
                    u.regexp.lastIndex = 0;
                    if (u.regexp.test(y)) {
                        s.push(v);
                    }
                }
            } else {
                if (u.mode == 2 && h.indexOf(y, u.value, 0, o) != -1) {
                    s.push(v);
                } else {
                    if (u.mode == 3 && h.indexOf(y, u.value, 0, o) == -1) {
                        s.push(v);
                    } else {
                        if (u.mode == 4 && h.equals(y, u.value, o)) {
                            s.push(v);
                        } else {
                            if (u.mode == 5 && h.equals(y, u.value, o) == false) {
                                s.push(v);
                            } else {
                                if (u.mode == 6 && h.startsWith(y, u.value, o)) {
                                    s.push(v);
                                } else {
                                    if (u.mode == 7 && h.endsWith(y, u.value, o)) {
                                        s.push(v);
                                    } else {
                                        if (u.mode == 8) {
                                            if (u.words == undefined) {
                                                u.words = h.splitTrim(u.value, ',').join(',');
                                            }
                                            if (h.containsWords(y, u.words, o)) {
                                                s.push(v);
                                            }
                                        } else {
                                            if (u.mode == 9) {
                                                if (u.words == undefined) {
                                                    u.words = h.splitTrim(u.value, ',').join(',');
                                                }
                                                if (h.doesNotContainWords(y, u.words, o)) {
                                                    s.push(v);
                                                }
                                            } else {
                                                if (u.mode == 10) {
                                                    if (u.words == undefined) {
                                                        u.words = h.splitTrim(u.value, ',').join(',');
                                                    }
                                                    if (h.containsAnyWord(y, u.words, o)) {
                                                        s.push(v);
                                                    }
                                                } else {
                                                    if (u.mode == 11) {
                                                        if ((u.regexp instanceof RegExp) == false) {
                                                            var r = '(?:\\s|\\.|\\,|\\!|\\?|\\(|\\)|\\\'|\\"|\\t|>|:|;|^)';
                                                            var m = '(?:\\s|\\.|\\,|\\!|\\?|\\(|\\)|\\\'|\\"|\\t|<|:|;|$)';
                                                            var w = u.value ? u.value : '';
                                                            w = w.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
                                                            var p = r + '(' + h.splitTrim(w, ',').join('|') + ')\\S*' + m;
                                                            u.regexp = h.getRegexp(p, o ? 'gi' : 'g');
                                                        }
                                                        u.regexp.lastIndex = 0;
                                                        if (u.regexp.test(y)) {
                                                            s.push(v);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (v.match == 2 && s.length > 0) {
                break;
            }
            if (v.match == 3 && s.length > 0) {
                break;
            }
        }
        var t = false;
        if (b) {
            console.log('matched: ' + s.length + ' conditions: ' + v.conditions.length);
        }
        if (v.match == 1 && s.length == v.conditions.length) {
            t = true;
        } else {
            if (v.match == 2 && s.length > 0) {
                t = true;
            } else {
                if (v.match == 3 && s.length == 0) {
                    t = true;
                }
            }
        }
        if (!t) {
            return false;
        }
        d++;
        return v.actions;
    };
    this.sortRules = function () {
        c.sort(function (n, m) {
            if (n.order == undefined || m.order == undefined) {
                return 0;
            }
            return n.order - m.order;
        });
    };
    this.deleteRules = function () {
        c = [];
    };
    this.saveRules = function () {
        feedbro.Persistence.saveValue('rules', JSON.stringify(c));
    };
    this.loadRules = function () {
        feedbro.Persistence.loadValue('rules', function (m) {
            if (chrome.runtime.lastError == undefined) {
                i = true;
                console.log('Rules loaded successfully.');
            } else {
                console.log('Failed to load Rules! ', chrome.runtime.lastError);
            }
            if (m != undefined) {
                c = JSON.parse(m);
            }
        });
    };
    this.isLoaded = function () {
        return i;
    };
    this.getRules = function () {
        return c;
    };
    this.getRule = function (n) {
        for (var m = 0; m < c.length; m++) {
            if (c[m].id == n) {
                return c[m];
            }
        }
        return {};
    };
    this.importRules = function (n) {
        var m = JSON.parse(n);
        var s, p, o, r, t, q;
        var u = chrome.extension.getBackgroundPage().feedbrobg.getFeedTree();
        for (p = 0; p < m.length; p++) {
            s = m[p];
            if (!s.schema || !s.name) {
                console.log('Skipped invalid Rule: ', s);
                continue;
            }
            if (s.contextvaluetext) {
                if (s.contexttype == '2') {
                    r = [];
                    for (o = 0; o < s.contextvaluetext.length; o++) {
                        q = u.searchNodes({name: s.contextvaluetext[o], type: 2});
                        if (q && q.length > 0) {
                            t = q[0];
                            r.push(t.data.id + '');
                        }
                    }
                    s.contextvalue = r;
                } else {
                    if (s.contexttype == '3') {
                        r = [];
                        for (o = 0; o < s.contextvaluetext.length; o++) {
                            q = u.searchNodes({url: s.contextvaluetext[o], type: 1});
                            if (q && q.length > 0) {
                                t = q[0];
                                r.push(t.data.id + '');
                            }
                        }
                        s.contextvalue = r;
                    }
                }
                delete s.contextvaluetext;
            }
            k.addRule(s);
            console.log('Imported rule: ', s);
        }
        k.saveRules();
    };
    this.exportRules = function () {
        var u = chrome.extension.getBackgroundPage().feedbrobg.getFeedTree();
        var s, n, m, t, p, q;
        var v = [];
        for (var o = 0; o < c.length; o++) {
            s = c[o];
            if (s.contextvalue != null) {
                var r = [];
                for (n = 0; n < s.contextvalue.length; n++) {
                    m = parseInt(s.contextvalue[n], 10);
                    q = parseInt(s.contexttype, 10);
                    if (q == 3) {
                        q = 1;
                    }
                    p = u.searchNodes({id: m, type: q});
                    if (p && p.length > 0) {
                        t = p[0];
                        if (t.data.type == 2) {
                            r.push(t.data.name);
                        } else {
                            if (t.data.type == 1) {
                                r.push(t.data.url);
                            } else {
                                console.log('Did not identify entry data type: ' + t.data.type);
                            }
                        }
                    }
                }
                s = JSON.parse(JSON.stringify(s));
                s.contextvaluetext = r;
            }
            v.push(s);
        }
        return v;
    };
    this.addRule = function (n) {
        if (n.id == undefined) {
            n.id = new Date().getTime() + j++;
        }
        n = jQuery.extend(true, {}, n);
        for (var m = 0; m < c.length; m++) {
            if (c[m].id == n.id) {
                c[m] = n;
                return;
            }
        }
        c.push(n);
    };
    this.deleteRule = function (n) {
        for (var m = 0; m < c.length; m++) {
            if (c[m].id == n) {
                c.splice(m, 1);
                console.log('RuleEngine: Removed rule with id ' + n);
                return;
            }
        }
    };
};
feedbro.RuleEngine.EVENT_ITEM_ARRIVED = 1;
feedbro.RuleEngine.EVENT_ITEM_VIEWED = 2;
feedbro.RuleEngine.ACTION_NOTIFICATION = 1;
feedbro.RuleEngine.ACTION_HIDEARTICLE = 2;
feedbro.RuleEngine.ACTION_DELETEARTICLE = 3;
feedbro.RuleEngine.ACTION_STAR = 4;
feedbro.RuleEngine.ACTION_MARKREAD = 5;
feedbro.RuleEngine.ACTION_PLAYSOUND = 6;
feedbro.RuleEngine.ACTION_HIGHLIGHTBORDER = 7;
feedbro.RuleEngine.ACTION_HIGHLIGHTREGEXP = 8;
feedbro.RuleEngine.ACTION_ADDTAG = 9;
feedbro.RuleEngine.ACTION_IFTTT_MAKERPOST = 11;
feedbro.RuleEngine.ACTION_ADD_POINTS = 12;
feedbro.RuleEngine.ACTION_PLAYSOUNDURL = 13;
feedbro.RuleEngine.ACTION_DISABLEAUTOPLAY = 14;
feedbro.RuleEngine.IGNORE_ACTIONS_ARRIVE = {2: true, 7: true, 8: true};
feedbro.RuleEngine.IGNORE_ACTIONS_ARRIVE_FIRSTLOAD = {1: true, 2: true, 6: true, 7: true, 8: true};
feedbro.RuleEngine.IGNORE_ACTIONS_VIEW = {1: true, 9: true, 11: true, 12: true, 13: true, 14: true};
var feedbro = feedbro || {};
feedbro.RuleEngineUI = function () {
    var h = this;
    var i;
    var e = 0;
    var b = 0;
    var g = new feedbro.Strings();
    var f;
    var d;
    var a = 'div#feed';

    function c() {
        return chrome.extension.getBackgroundPage().feedbrobg;
    }

    this.setSoundPlayer = function (j) {
        d = j;
    };
    this.setTree = function (j) {
        i = j;
    };
    this.setEngine = function (j) {
        f = j;
    };
    this.setContainerName = function (j) {
        a = j;
    };
    this.updateReferences = function () {
        var j = c();
        i = j.getFeedTree();
        d = j.getSoundPlayer();
        f = j.getRuleEngine();
    };
    this.init = function () {
        $('div#ruleform #contexttype').change(function () {
            var j = $(this).val();
            h.setContextType(j);
        });
        $('div#ruleform a#delete').click(function () {
            var j = $('input#ruleid').val();
            if (j != '') {
                alertify.confirm(Locale.i18n('ruleview_delete_confirm', true), function (k) {
                    if (k) {
                        h.updateReferences();
                        f.deleteRule(j);
                        h.showForm(false);
                        f.saveRules();
                        h.printRuleList();
                    }
                });
            }
            return false;
        });
        $('div#ruleform a#save').click(function () {
            try {
                var k = h.formToRule();
                h.updateReferences();
                f.addRule(k);
                f.saveRules();
                h.showForm(false);
                h.printRuleList();
            } catch (j) {
                alertify.alert(j.message);
            }
            return false;
        });
        $('div#ruleform a#addcondition').click(function () {
            h.addCondition();
            h.centerForm();
            return false;
        });
        $('div#ruleform a#addaction').click(function () {
            h.addAction();
            h.centerForm();
            return false;
        });
        $('div#ruleform a#reset').click(function () {
            h.resetForm();
            return false;
        });
        $('div#ruleform a#cancel').click(function () {
            h.showForm(false);
            return false;
        });
        $('div#rulesimulationform > nav > a#simulateClose').click(function () {
            h.showSimulateForm(false);
            return false;
        });
        $('div#rulesimulationform > nav > a#simulateRun').click(function () {
            h.updateReferences();
            var l = parseInt($('select#simulationtrigger').val(), 10);
            var n = $('select#simulationcontextvalue').val().split(':');
            var k = parseInt(n[0], 10);
            var j = parseInt(n[1], 10);
            var o = {
                title: $('input#simulationTitle').val(),
                link: $('input#simulationURL').val(),
                content: $('textarea#simulationContent').val(),
                author: $('input#simulationAuthor').val(),
                feedid: k,
                folderid: j
            };
            var p = [];
            var m = '';
            f.evaluateRulesForEntry(l, o, p, function (q) {
                m += g.escapeHtml(q.name) + '\n';
            });
            $('textarea#simulationResult').val(m != '' ? m : Locale.i18n('ruleview_no_matches', true));
        });
    };
    this.setContextType = function (l) {
        var j = $('select#contextvalue');
        if (l == 1) {
            j.css({display: 'none'});
        }
        if (l == 2) {
            j.empty();
            j.append('<option value="-1">' + Locale.i18n('common_root', true) + '</option>');
            i.processNodes(i.getRoot(), function (m) {
                if (m.data.type == feedbro.FeedTree.FOLDER) {
                    j.append('<option value="' + m.data.id + '">' + g.escapeHtml(m.data.name) + '</option>');
                }
            }, feedbro.FeedTree.MODE_TOPNODES);
            j.css({display: 'block'});
        }
        if (l == 3) {
            var k = '';
            i.processNodes(i.getRoot(), function (o) {
                if (o.data.type == feedbro.FeedTree.FOLDER) {
                    k += '<optgroup label="' + g.escapeHtml(o.data.name) + '">';
                    var n = o.children;
                    for (var m = 0; m < n.length; m++) {
                        k += '<option value="' + n[m].data.id + '">' + g.escapeHtml(n[m].data.name) + '</option>';
                    }
                    k += '</optgroup>';
                } else {
                    k += '<option value="' + o.data.id + '">' + g.escapeHtml(o.data.name) + '</option>';
                }
            }, feedbro.FeedTree.MODE_TOPNODES);
            j.html(k);
            j.css({display: 'block'});
        }
    };
    this.addAction = function () {
        var j = $('tr#actiontemplate').clone();
        b++;
        j.attr('id', 'action-' + b);
        j.css({display: 'table-row'});
        j.find('select.action-type').attr('id', 'action-type-' + b);
        j.find('select.action-type').data('value', b);
        j.find('input.action-value').attr('id', 'action-value-' + b);
        j.find('select.action-sound').attr('id', 'action-sound-' + b);
        j.find('input.action-color').attr('id', 'action-color-' + b);
        j.find('select.action-type').change(function () {
            var k = $(this);
            var l = k.val();
            if (l == '6') {
                h.updateReferences();
                j.find('input.action-value').css({display: 'none'});
                j.find('input.action-color').css({display: 'none'});
                j.find('select.action-sound').css({display: 'inline-block'});
                j.find('select.action-sound').change(function () {
                    var m = $(this).val();
                    d.play('sound/' + m);
                });
            } else {
                if (l == '7') {
                    j.find('input.action-color').css({display: 'inline-block'});
                    j.find('input.action-value').css({display: 'none'});
                    j.find('select.action-sound').css({display: 'none'});
                } else {
                    if (l == '8' || l == '9' || l == '10' || l == '11' || l == '12' || l == '13') {
                        j.find('input.action-value').css({display: 'inline-block'});
                        j.find('input.action-color').css({display: 'none'});
                        j.find('select.action-sound').css({display: 'none'});
                    } else {
                        j.find('input.action-value').css({display: 'none'});
                        j.find('input.action-color').css({display: 'none'});
                        j.find('select.action-sound').css({display: 'none'});
                    }
                }
            }
        });
        j.find('a.action-remove').click(function (k) {
            return function (l) {
                $('tr#action-' + k).remove();
                l.stopPropagation();
                return false;
            };
        }(b));
        j.insertBefore($('tr#actiontemplate'));
        return b;
    };
    this.addCondition = function () {
        var j = $('tr#condtemplate').clone();
        e++;
        j.attr('id', 'condition-' + e);
        j.css({display: 'table-row'});
        j.find('select.cond-target').attr('id', 'cond-target-' + e);
        j.find('select.cond-target').data('value', e);
        j.find('select.cond-mode').attr('id', 'cond-mode-' + e);
        j.find('input.cond-value').attr('id', 'cond-value-' + e);
        j.find('select.cond-casemode').attr('id', 'cond-casemode-' + e);
        j.find('a.cond-remove').click(function (k) {
            return function (l) {
                $('tr#condition-' + k).remove();
                l.stopPropagation();
                return false;
            };
        }(e));
        j.insertBefore($('tr#condtemplate'));
        return e;
    };
    this.formToRule = function () {
        var j = {};
        j.id = $('input#ruleid').val();
        if (j.id == '') {
            j.id = new Date().getTime() + '';
        }
        j.schema = 1;
        j.enabled = $('input#enabled').prop('checked');
        j.fallthrough = $('input#fallthrough').prop('checked');
        j.name = $('input#name').val().trim();
        j.trigger = $('select#trigger').val();
        j.contexttype = $('select#contexttype').val();
        j.contextvalue = $('#contextvalue').val();
        j.match = $('select#match').val();
        j.conditions = [];
        j.actions = [];
        if (j.name == '' || j.name.length < 1) {
            throw new Error(Locale.i18n('ruleview_error_name_missing', true));
        }
        if (j.name.length > 80) {
            throw new Error(Locale.i18n('ruleview_error_name_toolong', true));
        }
        if (j.contexttype == 2 && j.contextvalue == undefined) {
            throw new Error(Locale.i18n('ruleview_error_folder_missing', true));
        }
        if (j.contexttype == 3 && j.contextvalue == undefined) {
            throw new Error(Locale.i18n('ruleview_error_feed_missing', true));
        }
        $('select.cond-target').each(function (n, o) {
            var l = $(o);
            var k = l.data('value');
            if (!k) {
                return;
            }
            var m = {};
            m.target = l.val();
            m.mode = $('select#cond-mode-' + k).val();
            m.value = $('input#cond-value-' + k).val();
            m.casemode = $('select#cond-casemode-' + k).val();
            if (m.mode == 1) {
                g.getRegexp(m.value);
            }
            j.conditions.push(m);
        });
        $('select.action-type').each(function (n, o) {
            var l = $(o);
            var k = l.data('value');
            if (!k) {
                return;
            }
            var p = parseInt(l.val(), 10);
            if (j.trigger == '1') {
                if (p == feedbro.RuleEngine.ACTION_HIDEARTICLE) {
                    throw new Error(Locale.i18n('ruleview_error_hidearticle', true));
                }
                if (p == feedbro.RuleEngine.ACTION_HIGHLIGHTBORDER) {
                    throw new Error(Locale.i18n('ruleview_error_highlightborder', true));
                }
                if (p == feedbro.RuleEngine.ACTION_HIGHLIGHTREGEXP) {
                    throw new Error(Locale.i18n('ruleview_error_highlightregexp', true));
                }
            } else {
                if (j.trigger == '2') {
                    if (p == feedbro.RuleEngine.ACTION_NOTIFICATION) {
                        throw new Error(Locale.i18n('ruleview_error_notification', true));
                    }
                    if (p == feedbro.RuleEngine.ACTION_ADDTAG) {
                        throw new Error(Locale.i18n('ruleview_error_addtag', true));
                    }
                    if (p == feedbro.RuleEngine.ACTION_IFTTT_MAKERPOST) {
                        throw new Error(Locale.i18n('ruleview_error_ifttt', true));
                    }
                    if (p == feedbro.RuleEngine.ACTION_HIDEARTICLE && j.conditions.length == 0) {
                        throw new Error(Locale.i18n('ruleview_error_hidearticle_condition', true));
                    }
                    if (p == feedbro.RuleEngine.ACTION_DELETEARTICLE && j.conditions.length == 0) {
                        throw new Error(Locale.i18n('ruleview_error_delete_condition', true));
                    }
                    if (p == feedbro.RuleEngine.ACTION_ADD_POINTS) {
                        throw new Error(Locale.i18n('ruleview_error_addpoints', true));
                    }
                    if (p == feedbro.RuleEngine.ACTION_DISABLEAUTOPLAY) {
                        throw new Error(Locale.i18n('ruleview_error_disableautoplay', true));
                    }
                }
            }
            var m = {};
            m.type = l.val();
            if (m.type == '6') {
                m.value = $('select#action-sound-' + k).val();
            } else {
                if (m.type == '7') {
                    m.value = $('input#action-color-' + k).val();
                } else {
                    m.value = $('input#action-value-' + k).val();
                }
            }
            if (m.type == '8') {
                if (m.value == undefined || m.value.trim().length < 1) {
                    throw new Error(Locale.i18n('ruleview_error_emptyregexp', true));
                }
                g.getRegexp(m.value);
            }
            if (m.type == '9') {
                if (m.value == undefined || m.value.trim().length < 1) {
                    throw new Error(Locale.i18n('ruleview_error_emptytag', true));
                }
            }
            if (m.type == '12') {
                if (!g.isInt(m.value)) {
                    throw new Error(Locale.i18n('ruleview_error_invalidpoints', true));
                }
            }
            if (m.type == '11') {
                if (m.value == undefined || m.value.trim().length < 1) {
                    throw new Error(Locale.i18n('ruleview_error_ifttt_emptyurl', true));
                }
                if ((m.value + '').indexOf('https://maker.ifttt.com') != 0) {
                    throw new Error(Locale.i18n('ruleview_error_ifttt_invalidurl', true));
                }
            }
            if (m.type == '13') {
                if (m.value == undefined || m.value.trim().length < 1) {
                    throw new Error(Locale.i18n('ruleview_error_emptyplayurl', true));
                }
            }
            j.actions.push(m);
        });
        if (j.actions.length < 1) {
            throw new Error(Locale.i18n('ruleview_error_noaction'));
        }
        return j;
    };
    this.ruleToForm = function (n) {
        var k, j, l, m;
        h.resetForm();
        $('a#delete').css({display: 'inline-block'});
        $('input#ruleid').val(n.id);
        $('input#enabled').prop('checked', n.enabled);
        $('input#fallthrough').prop('checked', n.fallthrough == undefined || n.fallthrough == true);
        $('input#name').val(n.name);
        $('select#trigger').val(n.trigger);
        $('select#contexttype').val(n.contexttype);
        h.setContextType(n.contexttype);
        $('#contextvalue').val(n.contextvalue);
        $('select#match').val(n.match);
        if (jQuery.isArray(n.conditions)) {
            for (k = 0; k < n.conditions.length; k++) {
                l = n.conditions[k];
                j = h.addCondition();
                $('select#cond-target-' + j).val(l.target);
                $('select#cond-mode-' + j).val(l.mode);
                $('input#cond-value-' + j).val(l.value);
                $('select#cond-casemode-' + j).val(l.casemode);
            }
        }
        if (jQuery.isArray(n.actions)) {
            for (k = 0; k < n.actions.length; k++) {
                m = n.actions[k];
                j = h.addAction();
                $('select#action-type-' + j).val(m.type);
                if (m.type == '6') {
                    $('select#action-sound-' + j).val(m.value);
                    $('select#action-sound-' + j).css({display: 'inline-block'});
                    $('select#action-sound-' + j).change(function () {
                        var o = $(this).val();
                        d.play('sound/' + o);
                    });
                } else {
                    if (m.type == '7') {
                        $('input#action-color-' + j).val(m.value);
                        $('input#action-color-' + j).css({display: 'inline-block'});
                    } else {
                        if (m.type == '8' || m.type == '9' || m.type == '10' || m.type == '11' || m.type == '12' || m.type == '13') {
                            $('input#action-value-' + j).val(m.value);
                            $('input#action-value-' + j).css({display: 'inline-block'});
                        }
                    }
                }
            }
        }
    };
    this.showForm = function (j) {
        var k = $('div#ruleform');
        k.css({display: j ? 'block' : 'none', position: 'absolute'});
        h.centerForm();
        k.find('input#name').focus();
    };
    this.centerForm = function () {
        var j = $('div#ruleform');
        j.css({
            top: Math.max(0, (($(window).height() - j.outerHeight()) / 2) + $(window).scrollTop()) + 'px',
            left: Math.max(0, (($(window).width() - j.outerWidth()) / 2) + $(window).scrollLeft()) + 'px'
        });
    };
    this.printRuleList = function () {
        var p = '';
        h.updateReferences();
        if (f.isLoaded() == false) {
            p += '<div class=\'info\'><div class=\'info-message\'>' + Locale.i18n('ruleview_error_loading', true) + '</div></div>';
            p += q;
            $(a).html(p);
            return;
        }
        var s = f.getRules();
        var q = '<center>';
        q += '<button id=\'addrule\' class=\'alertify-button alertify-button-ok\'>' + Locale.i18n('ruleview_action_addrule_body', true) + '</button>';
        q += '<button id=\'testrules\' class=\'alertify-button alertify-button-ok\'>' + Locale.i18n('ruleview_action_testrules_body', true) + '</button>';
        q += '</center>';
        if (s.length == 0) {
            p += '<div class=\'info\'><div class=\'info-message\'>' + Locale.i18n('ruleview_no_rules_yet_body', true) + '</div></div>';
            p += q;
            $(a).html(p);
        } else {
            p += '<table id=\'rulelist\' class=\'feedtable\'>';
            p += '<thead><tr><th></th>';
            p += '<th>' + Locale.i18n('ruleview_name_body', true) + '</th>';
            p += '<th class=\'center\'>' + Locale.i18n('ruleview_type_body', true) + '</th>';
            p += '<th class=\'center\'>' + Locale.i18n('ruleview_enabled_body', true) + '</th>';
            p += '<th class=\'center\'>' + Locale.i18n('ruleview_fallthrough_body', true) + '</th>';
            p += '</tr></thead><tbody id=\'rulelistbody\'>';
            var k = Locale.i18n('ruleview_table_row_title', true);
            var l = Locale.i18n('ruleview_table_clickedit_title', true);
            var r = Locale.i18n('ruleview_table_arrive_title', true);
            var n = Locale.i18n('ruleview_table_view_title', true);
            var m = Locale.i18n('ruleview_table_inactive_title', true);
            var j = Locale.i18n('ruleview_table_fallthrough_title', true);
            for (var o = 0; o < s.length; o++) {
                p += '<tr class=\'feedtablerow\' draggable=\'true\' id=\'rule-' + s[o].id + '\' style=\'cursor: move\' title=\'' + k + '\'>';
                p += '<td class=\'rownumber\'>' + (o + 1) + '.</td>';
                p += '<td><a href=\'#\' title=\'' + l + '\' class=\'rulelink\' style=\'cursor: hand\'>' + g.escapeHtml(s[o].name) + '</a></td>';
                p += '<td class=\'center\'><img width=\'16\' src=\'images/' + (s[o].trigger == '1' ? 'email.png\' title=\'' + r + '\'' : 'eye.png\' title=\'' + n + '\'') + '></td>';
                p += '<td class=\'center\' title=\'' + m + '\'>' + (s[o].enabled ? '&#x2714;' : '') + '</td>';
                p += '<td class=\'center\' title=\'' + j + '\'>' + (s[o].fallthrough == false ? '' : '&#x2714;') + '</td>';
                p += '</tr>';
            }
            p += '</tbody></table>';
            p += q;
            $(a).html(p);
            $('a.rulelink').click(function () {
                var u = $(this).parent().parent().attr('id').substring(5);
                h.updateReferences();
                var t = f.getRule(u);
                h.ruleToForm(t);
                h.showForm(true);
                return false;
            });
            feedbro.dndTable.create('rulelist', h.updateTable);
        }
        $('button#addrule').click(function () {
            h.resetForm();
            h.showSimulateForm(false);
            h.showForm(true);
            return false;
        });
        $('button#testrules').click(function () {
            h.showForm(false);
            h.showSimulateForm(true);
            return false;
        });
    };
    this.showSimulateForm = function (k) {
        var m = $('div#rulesimulationform');
        var n = $(window);
        m.css({
            display: k ? 'block' : 'none',
            position: 'absolute',
            top: Math.max(0, ((n.height() - m.outerHeight()) / 2) + n.scrollTop()) + 'px',
            left: Math.max(0, ((n.width() - m.outerWidth()) / 2) + n.scrollLeft()) + 'px'
        });
        h.updateReferences();
        if (k) {
            $('textarea#simulationResult').val('');
            var j = $('select#simulationcontextvalue');
            var l = '';
            i.processNodes(i.getRoot(), function (q) {
                if (q.data.type == feedbro.FeedTree.FOLDER) {
                    l += '<optgroup label="' + g.escapeHtml(q.data.name) + '">';
                    var p = q.children;
                    for (var o = 0; o < p.length; o++) {
                        l += '<option value="' + p[o].data.id + ':' + q.data.id + '">' + g.escapeHtml(p[o].data.name) + '</option>';
                    }
                    l += '</optgroup>';
                } else {
                    l += '<option value="' + q.data.id + ':-1">' + g.escapeHtml(q.data.name) + '</option>';
                }
            }, feedbro.FeedTree.MODE_TOPNODES);
            j.html(l);
        }
    };
    this.updateTable = function (j) {
        h.updateReferences();
        $('tbody#rulelistbody tr').each(function (k, m) {
            var o = $(m);
            var l = o.attr('id').substring(5);
            o.find('td.rownumber').html((k + 1) + '.');
            o.attr('data-order', (k + 1));
            var n = f.getRule(l);
            n.order = k + 1;
        });
        f.sortRules();
        f.saveRules();
    };
    this.resetForm = function () {
        $('a#delete').css({display: 'none'});
        $('input#ruleid').val('');
        $('input#enabled').prop('checked', true);
        $('input#fallthrough').prop('checked', true);
        $('input#name').val('');
        $('select#trigger').val('1');
        $('select#contexttype').val(1);
        h.setContextType(1);
        $('select#match').val(1);
        $('tr.condition').each(function (j, l) {
            var k = $(l);
            if (k.attr('id') != 'condtemplate') {
                k.remove();
            }
        });
        $('tr.action').each(function (j, l) {
            var k = $(l);
            if (k.attr('id') != 'actiontemplate') {
                k.remove();
            }
        });
    };
};
var feedbro = feedbro || {};
feedbro.Settings = function () {
    var a = {
        timeout: 25000,
        maxentries: 20,
        polldelay: 30,
        onlyunread: false,
        itemmaxage: -1,
        dateformat: 'ddd mmm dd yyyy HH:MM:ss',
        itemsortorder: 1,
        inactivefeedlimit: 180,
        filteriframe: false,
        filterembed: false,
        showcontent: true,
        hidenounread: false,
        sound: true,
        notifications: true,
        notificationtimeout: 8000,
        viewmode: 0,
        winleftpane: 270,
        wintitles: 500,
        confirmmarkread: false,
        confirmmarkreadmode: 2,
        startpageallitems: false,
        theme: 'light',
        markreadmode: 1,
        iconclick: 1,
        articlebodyfontsize: 115,
        articlefontfamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen", "Ubuntu", "Cantarell", "Helvetica Neue", sans-serif',
        favicons: true,
        hideempty: false,
        popupclick: 1,
        latestinpopup: true,
        mathjax: false,
        iconclickreloads: false,
        justifytext: false,
        faviconstitles: true,
        faviconfromline: false,
        qtag1: '',
        qtag2: '',
        qtag3: '',
        qtag4: '',
        qtag5: '',
        targetlanguage: 'en',
        articlelink: 1,
        lineheight: '1.45',
        updatethreads: 4,
        disableautoscan: false,
        cookiemanagement: false,
        skipopmldupes: true,
        faviconprovider: 'duckduckgo',
        truncatetitles: true,
        viewautoreload: 0,
        articlewidth1: -1,
        articlewidth2: -1,
        articlewidth3: -1,
        articlewidth4: -1,
        articlewidth5: -1,
        articlewidth6: -1,
        titlefontsize: 100,
        cardheight: -1,
        disableautoselect: false,
        locale: 'en_US'
    };
    this.getLocale = function () {
        return a.locale;
    };
    this.setLocale = function (b) {
        a.locale = b;
    };
    this.getLocaleMeta = function () {
        return a.localemeta;
    };
    this.setLocaleMeta = function (b) {
        a.localemeta = b;
    };
    this.getDisableAutoSelect = function () {
        return a.disableautoselect;
    };
    this.setDisableAutoSelect = function (b) {
        a.disableautoselect = b;
    };
    this.setCardHeight = function (b) {
        a.cardheight = parseInt(b, 10);
    };
    this.getCardHeight = function () {
        return a.cardheight;
    };
    this.setTitleFontSize = function (b) {
        a.titlefontsize = parseInt(b, 10);
    };
    this.getTitleFontSize = function () {
        return a.titlefontsize;
    };
    this.getArticleWidth = function (b) {
        return a['articlewidth' + b];
    };
    this.setArticleWidth = function (c, b) {
        a['articlewidth' + c] = b;
    };
    this.getIconClickReloads = function () {
        return a.iconclickreloads;
    };
    this.setIconClickReloads = function (b) {
        a.iconclickreloads = b;
    };
    this.getTruncateTitles = function () {
        return a.truncatetitles;
    };
    this.setTruncateTitles = function (b) {
        a.truncatetitles = b;
    };
    this.setQuickTag = function (b, c) {
        if (b.indexOf('qtag') != 0) {
            throw new Error('Invalid key: ' + b);
        }
        a[b] = c;
    };
    this.getQuickTag = function (b) {
        return a[b];
    };
    this.setViewAutoReload = function (b) {
        a.viewautoreload = parseInt(b, 10);
    };
    this.getViewAutoReload = function () {
        return a.viewautoreload;
    };
    this.setUpdateThreads = function (b) {
        a.updatethreads = parseInt(b, 10);
    };
    this.getUpdateThreads = function () {
        return a.updatethreads;
    };
    this.setSkipOpmlDupes = function (b) {
        a.skipopmldupes = b;
    };
    this.getSkipOpmlDupes = function () {
        return a.skipopmldupes;
    };
    this.setCookieManagement = function (b) {
        a.cookiemanagement = b;
    };
    this.getCookieManagement = function () {
        return a.cookiemanagement;
    };
    this.setDisableAutoScan = function (b) {
        a.disableautoscan = b;
    };
    this.getDisableAutoScan = function () {
        return a.disableautoscan;
    };
    this.setFaviconOnFromline = function (b) {
        a.faviconfromline = b;
    };
    this.getFaviconOnFromline = function () {
        return a.faviconfromline;
    };
    this.setArticleLinkMode = function (b) {
        a.articlelink = b;
    };
    this.getArticleLinkMode = function () {
        return a.articlelink;
    };
    this.setArticleLineHeight = function (b) {
        a.lineheight = b;
    };
    this.getArticleLineHeight = function () {
        return a.lineheight;
    };
    this.setFavIconProvider = function (b) {
        a.faviconprovider = b;
    };
    this.getFavIconProvider = function () {
        return a.faviconprovider;
    };
    this.setTargetLanguage = function (b) {
        a.targetlanguage = b;
    };
    this.getTargetLanguage = function () {
        return a.targetlanguage;
    };
    this.setTheme = function (b) {
        a.theme = b;
    };
    this.getTheme = function () {
        return a.theme;
    };
    this.setJustifyText = function (b) {
        a.justifytext = b;
    };
    this.getJustifyText = function () {
        return a.justifytext;
    };
    this.setHideEmpty = function (b) {
        a.hideempty = b;
    };
    this.getHideEmpty = function () {
        return a.hideempty;
    };
    this.setMathJaxEnabled = function (b) {
        a.mathjax = b;
    };
    this.getMathJaxEnabled = function () {
        return a.mathjax;
    };
    this.setConfirmMarkReadMode = function (b) {
        a.confirmmarkreadmode = parseInt(b, 10);
    };
    this.getConfirmMarkReadMode = function () {
        return a.confirmmarkreadmode;
    };
    this.setConfirmMarkRead = function (b) {
        a.confirmmarkread = b;
    };
    this.getConfirmMarkRead = function () {
        return a.confirmmarkread;
    };
    this.setStartPageAllItems = function (b) {
        a.startpageallitems = b;
    };
    this.getStartPageAllItems = function () {
        return a.startpageallitems;
    };
    this.setShowLatestInPopup = function (b) {
        a.latestinpopup = b;
    };
    this.getShowLatestInPopup = function () {
        return a.latestinpopup;
    };
    this.setUseFavIcons = function (b) {
        a.favicons = b;
    };
    this.getUseFavIcons = function () {
        return a.favicons;
    };
    this.setUseFavIconsTitles = function (b) {
        a.faviconstitles = b;
    };
    this.getUseFavIconsTitles = function () {
        return a.faviconstitles;
    };
    this.setPopupClickMode = function (b) {
        a.popupclick = parseInt(b, 10);
    };
    this.getPopupClickMode = function () {
        return a.popupclick;
    };
    this.setIconClickMode = function (b) {
        a.iconclick = parseInt(b, 10);
    };
    this.getIconClickMode = function () {
        return a.iconclick;
    };
    this.setMarkReadMode = function (b) {
        a.markreadmode = parseInt(b, 10);
    };
    this.getMarkReadMode = function () {
        return a.markreadmode;
    };
    this.setFeedTimeout = function (b) {
        a.timeout = parseInt(b, 10);
    };
    this.getFeedTimeout = function () {
        return a.timeout;
    };
    this.setFeedMaxEntries = function (b) {
        a.maxentries = parseInt(b, 10);
    };
    this.getFeedMaxEntries = function () {
        return a.maxentries;
    };
    this.setNavigatorWidth = function (b) {
        a.winleftpane = parseInt(b, 10);
    };
    this.getNavigatorWidth = function () {
        return a.winleftpane;
    };
    this.setTitlesWidth = function (b) {
        a.wintitles = parseInt(b, 10);
    };
    this.getTitlesWidth = function () {
        return a.wintitles;
    };
    this.setViewMode = function (b) {
        a.viewmode = parseInt(b, 10);
    };
    this.getViewMode = function () {
        return a.viewmode;
    };
    this.setArticleFontFamily = function (b) {
        a.articlefontfamily = b;
    };
    this.getArticleFontFamily = function () {
        return a.articlefontfamily;
    };
    this.setArticleBodyFontSize = function (b) {
        a.articlebodyfontsize = parseInt(b, 10);
    };
    this.getArticleBodyFontSize = function () {
        return a.articlebodyfontsize;
    };
    this.setPollDelay = function (b) {
        a.polldelay = parseInt(b, 10);
    };
    this.getPollDelay = function () {
        return a.polldelay;
    };
    this.setHideNoUnread = function (b) {
        a.hidenounread = b;
    };
    this.getHideNoUnread = function () {
        return a.hidenounread;
    };
    this.setSoundEnabled = function (b) {
        a.sound = b;
    };
    this.getSoundEnabled = function () {
        return a.sound;
    };
    this.setNotificationsEnabled = function (b) {
        a.notifications = b;
    };
    this.getNotificationsEnabled = function () {
        return a.notifications;
    };
    this.setOnlyUnread = function (b) {
        a.onlyunread = b;
    };
    this.getOnlyUnread = function () {
        return a.onlyunread;
    };
    this.setShowContent = function (b) {
        a.showcontent = b;
    };
    this.getShowContent = function () {
        return a.showcontent;
    };
    this.setMaxItemAge = function (b) {
        a.itemmaxage = parseInt(b, 10);
    };
    this.getMaxItemAge = function () {
        return a.itemmaxage;
    };
    this.setNotificationTimeout = function (b) {
        a.notificationtimeout = parseInt(b, 10);
    };
    this.getNotificationTimeout = function () {
        return a.notificationtimeout;
    };
    this.setDateFormat = function (b) {
        a.dateformat = b;
    };
    this.getDateFormat = function () {
        return a.dateformat;
    };
    this.setItemSortOrder = function (b) {
        a.itemsortorder = b;
    };
    this.getItemSortOrder = function () {
        return a.itemsortorder;
    };
    this.setInactiveFeedLimit = function (b) {
        a.inactivefeedlimit = b;
    };
    this.getInactiveFeedLimit = function () {
        return a.inactivefeedlimit;
    };
    this.setFilterIframe = function (b) {
        a.filteriframe = b;
    };
    this.getFilterIframe = function () {
        return a.filteriframe;
    };
    this.setFilterEmbed = function (b) {
        a.filterembed = b;
    };
    this.getFilterEmbed = function () {
        return a.filterembed;
    };
    this.toJson = function () {
        return JSON.stringify(a);
    };
    this.fromJson = function (b) {
        $.extend(a, JSON.parse(b));
    };
};
var feedbro = feedbro || {};
feedbro.SlidesharePlugin = function () {
    this._timeout = 15000;
    this._strings = new feedbro.Strings();
    this._debug = false;
};
feedbro.SlidesharePlugin.prototype.setDebug = function (a) {
    this._debug = a;
};
feedbro.SlidesharePlugin.prototype.canParse = function (a) {
    return a && a.indexOf('https://www.slideshare.net/search/slideshow?') != -1;
};
feedbro.SlidesharePlugin.prototype.parse = function (c, j, l, h) {
    var k = this;
    var a = {};
    try {
        a = this._strings.getQueryParams(c.url);
    } catch (f) {
        console.log('SlidesharePlugin: failed to parse URL parameters');
    }
    var i = new XMLHttpRequest();
    i.onerror = function () {
        l.error = {};
        l.error.message = 'Network error';
        l.error.code = 398;
        l.status = 398;
    };
    i.onreadystatechange = function () {
        if (i.readyState == 4) {
            if (i.status == 200) {
                try {
                    j(c.url, i, k.toRSS(i.responseText, c.url, a.q), l, h, true);
                } catch (m) {
                    j(c.url, i, '', l, h, true);
                }
            } else {
                j(c.url, i, '', l, h, true);
            }
            i.onreadystatechange = null;
            i.onerror = null;
            i.abort = null;
            i = null;
        }
    };
    var b = this.generateUUID();
    var g = '**';
    var e = 20;
    var d = 'https://www.slideshare.net/search/slideshow_ajax?q=' + encodeURIComponent(a.q) + '&qf=&qid=' + b + '&escape=1&ud=week&ft=all&lang=' + g;
    i.open('GET', d, true);
    i.timeout = c.timeout ? c.timeout : 10000;
    i.setRequestHeader('Accept', 'application/json');
    i.send();
};
feedbro.SlidesharePlugin.prototype.generateUUID = function () {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (d) {
        var b = Math.random() * 16 | 0, a = d == 'x' ? b : (b & 3 | 8);
        return a.toString(16);
    });
};
feedbro.SlidesharePlugin.prototype.toRSS = function (g, b, a) {
    var n = this;
    var o = [];
    var d = a + ' | SlideShare Search';
    var h, j, m;
    var p = new feedbro.Strings();
    if (g && g != '') {
        var l = JSON.parse(g);
        var f = l.search_results;
        for (h = 0; h < f.length; h++) {
            m = {
                title: f[h].title,
                link: 'https://www.slideshare.net/' + f[h].url,
                publishedDate: new Date(f[h].created_at * 1000),
                author: f[h].user_login,
                content: ''
            };
            m.content = '<table class="slideshare-result"><tr><td class="slideshare-thumb"><img class="slideshare-thumb-img" src="https:' + this._strings.escapeHref(f[h].thumb_url) + '"></td><td class="slideshare-description">' + feedbro.Strings.linkify(f[h].description) + '</td></tr></table>';
            o.push(m);
        }
    }
    o.sort(function (i, e) {
        if (i.publishedDate && e.publishedDate) {
            return e.publishedDate.getTime() - i.publishedDate.getTime();
        } else {
            return 0;
        }
    });
    var k = '<?xml version="1.0" encoding="UTF-8"?>\n<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">\n<channel>\n';
    k += '  <title><![CDATA[' + d + ']]></title>\n';
    k += '  <link>' + (b || '').replace(/&/g, '&amp;') + '</link>\n';
    k += '  <description><![CDATA[' + d + ']]></description>\n';
    for (h = 0; h < o.length; h++) {
        j = o[h];
        var c = '';
        c += '  <item>\n';
        c += '    <title><![CDATA[' + (j.title ? j.title : '') + ']]></title>\n';
        c += '    <link><![CDATA[' + j.link + ']]></link>\n';
        c += '    <author><![CDATA[' + j.author + ']]></author>\n';
        c += '    <content:encoded><![CDATA[' + j.content + ']]></content:encoded>\n';
        c += '    <pubDate>' + j.publishedDate + '</pubDate>\n';
        c += '  </item>\n';
        k += c;
    }
    k += '</channel>\n</rss>';
    return k;
};
var feedbro = feedbro || {};
feedbro.SoundPlayer = function () {
    var b = this;
    var d = new feedbro.Strings();
    var a = {};
    var e = [];
    var c;
    this.setSettings = function (f) {
        c = f;
    };
    this.queue = function (f) {
        e.push(f);
    };
    this.playQueueUniques = function () {
        var f, g = d.removeDuplicates(e);
        for (f = 0; f < g.length; f++) {
            b.play(g[f]);
        }
        e.length = 0;
    };
    this.playQueue = function () {
        for (var f = 0; f < e.length; f++) {
            b.play(e[f]);
        }
        e.length = 0;
    };
    this.play = function (g) {
        if (c.getSoundEnabled() != true) {
            return;
        }
        var h = a[g];
        try {
            if (h == undefined) {
                h = new Audio(g);
                a[g] = h;
                h.addEventListener('canplaythrough', function () {
                    h.play();
                }, false);
            } else {
                h.pause();
                h.currentTime = 0;
                h.play();
            }
        } catch (f) {
            console.log('ERROR: SoundPlayer: play: ' + g, f);
        }
    };
};
var feedbro = feedbro || {};
feedbro.Strings = function () {
};
feedbro.Strings.regexpCache = {};
feedbro.Strings.wordCache = {};
feedbro.Strings.prototype.createProxyURL = function (b, c) {
    var a = '';
    if (b == undefined || c == undefined || c == 0) {
        return b;
    }
    if (c == 1) {
        a = 'feedly';
    }
    if (b.indexOf('?') != -1) {
        return b + '&feedsrc=' + a;
    } else {
        return b + '?feedsrc=' + a;
    }
};
feedbro.Strings.convertHashtags = function (n, b) {
    if (n == undefined || n == '') {
        return n;
    }
    var e, j, g = n.length;
    var o = '';
    var k = 0;
    var l = 0;
    var a = false;
    var f;
    var d;
    var m;
    var h = false;
    for (e = 0; e < g; e++) {
        d = false;
        j = n.charAt(e);
        if (j == '<') {
            l++;
        } else {
            if (j == '>') {
                l--;
            } else {
                if (j == '#' && l == 0) {
                    if (e > 0 && n.charAt(e - 1) == '&') {
                        continue;
                    } else {
                        a = true;
                        h = true;
                        f = e;
                        continue;
                    }
                }
            }
        }
        if (a && (j == ' ' || j == '<' || j == '!' || j == ',' || j == '.' || j == '"' || j == '/' || j == '&' || j == '>' || j == '?' || j == ')' || j == '(' || j == ']' || j == '[')) {
            d = true;
            a = false;
            if ((e - f + 1) > 1) {
                m = n.substring(f + 1, e);
                o += n.substring(k, f) + b(m);
                k = e;
            }
        }
    }
    if (!h) {
        return n;
    }
    if (a) {
        m = n.substring(f + 1, e);
        o += n.substring(k, f) + b(m);
    } else {
        o += n.substring(k);
    }
    return o;
};
feedbro.Strings.prototype.disableAutoplay = function (c) {
    var b, a;
    return (c || '').replace(/<(video|iframe|audio)[^>]+?>/g, function (d, e) {
        if (e == 'video' || e == 'audio') {
            if (!b) {
                b = /(autoplay|preload|autostart)(="[^"]*")*/g;
            }
            return d.replace(b, function (f, h, g) {
                if (h == 'autoplay' || h == 'autostart') {
                    return '';
                }
                if (h == 'preload' && (g == '="auto"' || g == '=""' || g == '')) {
                    return 'preload="meta"';
                }
                return f;
            });
        }
        if (e == 'iframe') {
            if (!a) {
                a = /auto(play|start)/g;
            }
            return d.replace(a, 'enabled');
        }
    });
};
feedbro.Strings.linkify = function (c) {
    if (c == undefined || c == '') {
        return c;
    }
    var b = /\b(?:https?|ftp):\/\/[a-z0-9-+&@#\/%?=~_|!:,.;]*[a-z0-9-+&@#\/%=~_|]/gim;
    var d = /(^|[^\/])(www\.[\S]+(\b|$))/gim;
    var a = /[\w.]+@[a-zA-Z_-]+?(?:\.[a-zA-Z]{2,6})+/gim;
    return c.replace(b, '<a rel="noopener noreferrer" target="_blank" href="$&">$&</a>').replace(d, '$1<a rel="noopener noreferrer" target="_blank" href="http://$2">$2</a>').replace(a, '<a href="mailto:$&">$&</a>');
};
feedbro.Strings.prototype.getAttributeMap = function (p, k) {
    var g, h, l, d = {}, b = false, e = false, f = false;
    var m, o, n, j;
    if (p == undefined) {
        return d;
    }
    h = p.length;
    for (g = 0; g < h; g++) {
        l = p.charAt(g);
        if (l == ' ' && !b) {
            b = true;
            continue;
        }
        if (b && !e && !f) {
            e = true;
            m = g;
            continue;
        }
        if (b && l == '=' && e) {
            e = false;
            f = true;
            o = p.substring(m, g);
            m = g + 2;
            if (g + 1 < h) {
                j = p.charAt(g + 1);
                if (j != '"' && j != '\'') {
                    j = ' ';
                    m = g + 1;
                } else {
                    g++;
                }
            }
            continue;
        }
        if (b && f && (l == j || l == '>')) {
            n = p.substring(m, g);
            f = false;
            e = false;
            d[k ? o.toLowerCase() : o] = this.unescapeHtml(n);
            g++;
        }
    }
    return d;
};
feedbro.Strings.prototype.getDatestamp = function (b) {
    if (b == undefined) {
        b = new Date();
    }
    var i = b.getFullYear();
    var f = b.getMonth() + 1;
    var g = b.getDate();
    var e = b.getHours();
    var a = b.getMinutes();
    var c = b.getSeconds();
    return i + '' + (f < 10 ? '0' + f : f) + (g < 10 ? '0' + g : g) + '-' + (e < 10 ? '0' + e : e) + (a < 10 ? '0' + a : a) + (c < 10 ? '0' + c : c);
};
feedbro.Strings.prototype.timeAgo = function (e, a) {
    var d = (new Date() - new Date(e)) / 1000;
    if (d < 5) {
        return Locale.i18n('timeago_now', true);
    }
    var b = 0, c = feedbro.Strings.timeunits[b++];
    while (c) {
        if (d < c.limit || !c.limit) {
            d = Math.floor(d / c.in_seconds);
            if (a == true) {
                return d + ' ' + Locale.i18n('timeago_' + c.name + '_shortName', true);
            } else {
                return d + ' ' + (d > 1 ? Locale.i18n('timeago_' + c.name + '_plural', true) : Locale.i18n('timeago_' + c.name, true));
            }
        }
        c = feedbro.Strings.timeunits[b++];
    }
};
feedbro.Strings.prototype.getDateTag = function (b) {
    var c = new Date();
    var a = c.getTime();
    var e = new Date(b);
    var k = a - b;
    var l, g, h, j, i = 'dd.mm.';
    var d = 24 * 60 * 60 * 1000;
    c.setMilliseconds(0);
    if (k < 0) {
        l = Locale.i18n('datetag_future_tag', true);
        i = 'dd.mm';
    } else {
        if (k < d && e.getDate() == c.getDate()) {
            l = Locale.i18n('datetag_today_tag', true);
            i = 'HH:MM';
        } else {
            if (k < (2 * d)) {
                c.setDate(c.getDate() - 1);
                if (e.getDate() == c.getDate()) {
                    l = Locale.i18n('datetag_yesterday_tag', true);
                    i = 'HH:MM';
                }
            }
        }
    }
    if (!l) {
        c.setTime(a);
        var f = c.getDay();
        if (f === 0) {
            f = 7;
        }
        f--;
        c.setDate(c.getDate() - f);
        c.setHours(0);
        c.setMinutes(0);
        c.setSeconds(0);
        j = e.getTime() - c.getTime();
        if (j > 0 && j < (7 * d)) {
            l = Locale.i18n('datetag_thisweek_tag', true);
            i = 'dd.mm.';
        } else {
            c.setDate(c.getDate() - 7);
            j = e.getTime() - c.getTime();
            if (j > 0 && j < (7 * d)) {
                l = Locale.i18n('datetag_lastweek_tag', true);
            }
        }
    }
    if (!l) {
        c.setTime(a);
        if (k < (31 * d) && c.getMonth() == e.getMonth() && c.getFullYear() == e.getFullYear()) {
            l = Locale.i18n('datetag_thismonth_tag', true);
        } else {
            c.setMonth(c.getMonth() - 1);
            j = e.getTime() - c.getTime();
            if (c.getFullYear() == e.getFullYear() && c.getMonth() == e.getMonth()) {
                l = Locale.i18n('datetag_lastmonth_tag', true);
            }
        }
    }
    if (!l) {
        c.setTime(a);
        g = e.getMonth();
        h = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
        l = h[g];
        l = Locale.i18n('datetag_month_' + l + '_tag', true);
        if (e.getFullYear() != c.getFullYear()) {
            l += ' ' + e.getFullYear();
        }
    }
    return {tag: l, format: i};
};
feedbro.Strings.prototype.isTextRTL = function (m, j, l) {
    if (m == undefined) {
        return false;
    }
    var e, h, g = m.length;
    var a = 0;
    var b = 0;
    var k = false;
    var d = 0;
    var f = 0.4;
    if (l == undefined) {
        l = 30;
    }
    if (j == undefined) {
        j = false;
    }
    for (e = 0; e < g; e++) {
        h = m.charAt(e);
        if (j && k && h == '>') {
            k = false;
        } else {
            if (j && !k && h == '<') {
                k = true;
            } else {
                if (k) {
                    d++;
                } else {
                    if ((h >= '\u0591' && h <= '\u07FF') || (h >= '\uFB1D' && h <= '\uFDFD') || (h >= '\uFE70' && h <= '\uFEFC') || h == '\u200F' || h == '\u202B' || h == '\u202E') {
                        a++;
                        b++;
                    } else {
                        b++;
                    }
                }
            }
        }
        if (b > 0 && (b % l == 0) && a / b > f) {
            return true;
        }
    }
    return (b > 0 && a / b > f);
};
feedbro.Strings.prototype.escapeHtmlChar = function (a) {
    return feedbro.Strings.htmlEscapes[a];
};
feedbro.Strings.prototype.escapeHtml = function (b) {
    var a = this;
    return String(b).replace(/[&<>"']/g, a.escapeHtmlChar);
};
feedbro.Strings.prototype.escapeHref = function (b) {
    var a = this;
    return String(b).replace(/[<>"']/g, a.escapeHtmlChar);
};
feedbro.Strings.prototype.unescapeHtml = function (l, h) {
    if (l == undefined || l.length < 1) {
        return l;
    }
    if (h == undefined) {
        h = 0;
    }
    if (h < 0 || h > l.length - 1) {
        throw new Error('unescapeHtml: firstAmp parameter out of range: ' + h);
    }
    var g = '';
    var f = l.length;
    var m = 0;
    for (var e = h; e < f; e++) {
        var k = l.charAt(e);
        if (k == '&') {
            var o = e + 1;
            var a = l.indexOf(';', o);
            if (a == -1) {
                continue;
            }
            var d = l.indexOf('&', e + 1);
            if (d != -1 && d < a) {
                continue;
            }
            var b = l.substring(o, a);
            var n = -1;
            var p = b.length;
            if (p > 0) {
                if (b.charAt(0) == '#') {
                    if (p > 1) {
                        var q = b.charAt(1);
                        try {
                            if (q == 'X' || q == 'x') {
                                n = parseInt(b.substring(2), 16);
                            } else {
                                n = parseInt(b.substring(1), 10);
                            }
                            if (n > 65535) {
                                n = -1;
                            }
                        } catch (j) {
                            n = -1;
                        }
                        if (isNaN(n)) {
                            n = -1;
                        }
                    }
                } else {
                    n = feedbro.Strings.HTML[b];
                    if (n == undefined) {
                        n = -1;
                    }
                }
            }
            if (n != -1) {
                g += l.substring(m, e);
                g += String.fromCharCode(n);
                m = a + 1;
            }
            e = a;
        }
    }
    if (m < f) {
        g += l.substring(m, f);
    }
    return g;
};
feedbro.Strings.prototype.isInt = function (a) {
    return (/^[-+]?\d+$/).test(String(a));
};
feedbro.Strings.prototype.toDate = function (a) {
    var b = new Date();
    b.setTime(a);
    return b;
};
feedbro.Strings.prototype.sortIgnoreCase = function (a) {
    a.sort(function (d, c) {
        if (d == undefined || c == undefined) {
            return 0;
        }
        d = String(d).toLowerCase();
        c = String(c).toLowerCase();
        if (d == c) {
            return 0;
        }
        return d > c ? 1 : -1;
    });
};
feedbro.Strings.prototype.truncate = function (c, b, d) {
    var a = c.length;
    if (a <= b) {
        return c;
    } else {
        if (d == undefined) {
            return c.substring(0, b);
        } else {
            return c.substring(0, b) + d;
        }
    }
};
feedbro.Strings.prototype.fixTitle = function (k) {
    if (k.content == undefined) {
        return;
    }
    try {
        if (k.title == undefined || (k.title.length < 1 || k.title.trim().length < 1)) {
            var d = k.content;
            var h = 0;
            var e = '';
            var a = false;
            var g;
            for (var b = 0; b < d.length; b++) {
                g = d.charAt(b);
                if (g == '<') {
                    e += d.substring(h, b) + ' ';
                    if (a && e.trim().length > 5) {
                        break;
                    }
                }
                if (g == '>') {
                    h = b + 1;
                }
                if (g == '?' || g == '!' || g == '.') {
                    a = true;
                }
            }
            var j = 0;
            var l = e;
            for (; j < l.length; j++) {
                g = l.charAt(j);
                if (j > 5 && (g == '.' || g == '!' || g == '?')) {
                    if (g == '!' || g == '?') {
                        j++;
                    }
                    break;
                }
            }
            l = l.substring(0, j).trim();
            if (l == '' || l.indexOf('http') == 0) {
                l = 'No title';
            }
            k.title = this.truncate(l, 100, '...');
        }
    } catch (f) {
        console.log(f);
    }
};
feedbro.Strings.prototype.htmlText = function (g, a, q) {
    var d = 0, f;
    if (g == undefined) {
        return undefined;
    }
    f = g.length;
    var j = g, m = 0, k = '';
    var l, h, e, b = false, p, n = false;
    for (d = 0; d < f; d++) {
        l = j.charAt(d);
        if (l == '<') {
            if (!n) {
                h = j.substring(m, d);
                if (k.length > 0 && k.charAt(k.length - 1) != ' ' && h.length > 0 && h.charAt(0) != ' ') {
                    k += ' ';
                }
                k += h;
                if (a && k.length >= a) {
                    return k.substring(0, a) + (q ? q : '');
                }
            }
            if (l != '<') {
                e = d + 4;
            } else {
                e = d + 1;
            }
            b = true;
            p = undefined;
        }
        if (l == '>') {
            if (l == '>') {
                m = d + 1;
            } else {
                m = d + 4;
            }
            if (p == undefined) {
                p = j.substring(e, d);
            }
            var o = p.toLowerCase();
            if (o == 'script' || o == 'head' || o == 'style' || o == 'object' || o == 'embed' || o == 'audio' || o == 'video' || o == 'param') {
                n = true;
            } else {
                n = false;
            }
            b = false;
        }
        if (b && l == ' ') {
            p = j.substring(e, d);
        }
    }
    if (m < f) {
        if (k.length > 0 && k.charAt(k.length - 1) != ' ') {
            k += ' ';
        }
        k += j.substring(m, f);
        if (a && k.length >= a) {
            return k.substring(0, a) + (q ? q : '');
        }
    }
    return k;
};
feedbro.Strings.prototype.removeDuplicates = function (e) {
    if (e == undefined) {
        return e;
    }
    var a = {};
    var d = [];
    for (var c = 0; c < e.length; c++) {
        var b = e[c];
        if (a[b]) {
            continue;
        }
        a[b] = 1;
        d.push(b);
    }
    return d;
};
feedbro.Strings.prototype.getQueryParams = function (a) {
    a = a.split('+').join(' ');
    var d = {}, c, b = /[?&]?([^=]+)=([^&]*)/g;
    c = b.exec(a);
    while (c) {
        d[decodeURIComponent(c[1])] = decodeURIComponent(c[2]);
        c = b.exec(a);
    }
    return d;
};
feedbro.Strings.prototype.findImages = function (l, e) {
    var c = {spos: 0, stag: ['<img'], etag: '>', postfix: ' '};
    var b = {spos: 0, stag: ['src="'], etag: '"'};
    var a = {spos: 0, stag: ['src=\''], etag: '\''};
    var i = {spos: 0, stag: ['width="'], etag: '"'};
    var j = {spos: 0, stag: ['width=\''], etag: '\''};
    var k = {spos: 0, stag: ['height="'], etag: '"'};
    var g = {spos: 0, stag: ['height=\''], etag: '\''};
    var h = [];
    var f = 0;
    while (true) {
        this.findNext(l, c);
        if (c.match == undefined) {
            break;
        }
        if (f > 50) {
            break;
        }
        i.spos = 0;
        k.spos = 0;
        b.spos = 0;
        this.findNext(c.match, b);
        if (b.match == undefined) {
            a.spos = 0;
            this.findNext(c.match, a);
            b.match = a.match;
        }
        this.findNext(c.match, i);
        if (i.match == undefined) {
            j.spos = 0;
            this.findNext(c.match, j);
            i.match = j.match;
        }
        this.findNext(c.match, k);
        if (k.match == undefined) {
            g.spos = 0;
            this.findNext(c.match, g);
            k.match = g.match;
        }
        var d = {src: b.match, width: i.match, height: k.match};
        if (e == 3) {
            return [d];
        }
        h.push(d);
        f++;
    }
    if (h.length > 0) {
        if (e == 1 || e == 4) {
            h.sort(this.largestFirst);
        }
        if (e == 2 || e == 5) {
            h.sort(this.smallestFirst);
        }
        if (e == 4 || e == 5) {
            return [h[0]];
        }
    }
    return h;
};
feedbro.Strings.prototype.largestFirst = function (b, a) {
    return this.getImageSize(a) - this.getImageSize(b);
};
feedbro.Strings.prototype.smallestFirst = function (b, a) {
    return this.getImageSize(b) - this.getImageSize(a);
};
feedbro.Strings.prototype.getImageSize = function (a) {
    var b = 0;
    if (a.width != undefined && a.height != undefined) {
        b = a.width * a.height;
    }
    return b;
};
feedbro.Strings.prototype.stripQuotesAll = function (a) {
    if (a == undefined) {
        return a;
    }
    while (true) {
        a = this.stripQuotes(a);
        if (a.length == 0 || (a.charAt(0) != '"' && a.charAt(0) != '\'' && a.charAt(a.length - 1) != '"' && a.charAt(a.length - 1) != '\'')) {
            break;
        }
    }
    return a;
};
feedbro.Strings.prototype.stripQuotes = function (e) {
    if (e == undefined || e.length < 1) {
        return e;
    }
    var d = 0, c = e.length;
    if ((e.charAt(d) == '"' || e.charAt(d) == '\'')) {
        d = d + 1;
    }
    if (e.charAt(c - 1) == '"' || e.charAt(c - 1) == '\'') {
        c = c - 1;
    }
    if (d == 0 && c == e.length - 1) {
        return e;
    } else {
        return e.substring(d, c);
    }
};
feedbro.Strings.prototype.findNext = function (d, a) {
    var e = a.spos;
    if (e == undefined) {
        e = 0;
    }
    if (d == undefined || a.stag == undefined || a.etag == undefined) {
        throw new Error('Invalid probe parameters');
    }
    for (var b = 0; b < a.stag.length; b++) {
        e = d.indexOf(a.stag[b], e);
        if (e < 0) {
            a.match = undefined;
            a.epos = -1;
            return a;
        }
        e += a.stag[b].length;
    }
    var c = d.indexOf(a.etag, e);
    if (c < 0) {
        a.match = undefined;
        a.epos = -1;
        return a;
    }
    a.epos = c;
    a.spos = e;
    a.match = '';
    if (a.prefix != undefined) {
        a.match = a.prefix;
    }
    a.match += d.substring(e, c);
    if (a.postfix != undefined) {
        a.match += a.postfix;
    }
    return a;
};
feedbro.Strings.prototype.replaceTokens = function (j, a, c, b) {
    if (j == undefined || j == '') {
        return j;
    }
    var h;
    if (b != undefined) {
        h = feedbro.Strings.wordCache['_RT.' + b];
    }
    if (h == undefined) {
        var g = Object.keys(a);
        h = '';
        for (var d = 0; d < g.length; d++) {
            var f = g[d];
            h += f.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
            if (d + 1 < g.length) {
                h += '|';
            }
        }
        if (b != undefined) {
            feedbro.Strings.wordCache['_RT.' + b] = h;
        }
    }
    var e = this.getRegexp(h, c ? 'gi' : 'g');
    return j.replace(e, function (k) {
        var i = k;
        var l = a[c ? i.toLowerCase() : i];
        if (l) {
            return l;
        } else {
            return i;
        }
    });
};
feedbro.Strings.prototype.stripTags = function (a) {
    return a != undefined ? a.replace(/<[^>]+>/ig, '') : '';
};
feedbro.Strings.prototype.inArray = function (d, a, c) {
    if (a == undefined || d == undefined) {
        return false;
    }
    for (var b = 0; b < a.length; b++) {
        if (this.equals(a[b], d, c)) {
            return true;
        }
    }
    return false;
};
feedbro.Strings.prototype.highlightItemContent = function (e, g, d) {
    var c = this.getCachedRegExp(g, false, 'gi');
    if (e.content) {
        var a, h = 0, b = 0, f = [];
        while ((a = c.exec(e.content, h))) {
            h = a.index + (a[0].length || 1);
            if (!this.isInsideTagFast(e.content, a.index)) {
                f.push(e.content.substring(b, a.index));
                f.push('<span class="' + d + '">' + a[0] + '</span>');
                b = h;
            }
        }
        if (b != 0 && b != e.content.length) {
            f.push(e.content.substring(b, e.content.length));
        }
        if (b != 0) {
            e.content = f.join('');
        }
    }
};
feedbro.Strings.prototype.isInsideTagFast = function (d, a) {
    var b = a;
    for (; b >= 0; b--) {
        var e = d.charAt(b);
        if (e == '<') {
            return true;
        } else {
            if (e == '>') {
                return false;
            }
        }
    }
    return false;
};
feedbro.Strings.prototype.endsWith = function (c, b, a) {
    if (c == undefined || b == undefined) {
        return false;
    }
    if (b.length > c.length) {
        return false;
    }
    if (b == '') {
        return true;
    }
    if (a == true) {
        return c.substring(c.length - b.length).toLowerCase() == b.toLowerCase();
    } else {
        return c.indexOf(b, c.length - b.length) !== -1;
    }
};
feedbro.Strings.prototype.startsWith = function (e, d, c) {
    if (e == undefined || d == undefined) {
        return false;
    }
    if (d.length > e.length) {
        return false;
    }
    if (d == '') {
        return true;
    }
    if (c == true) {
        return e.substring(0, d.length).toLowerCase() == d.toLowerCase();
    } else {
        var a = e.length;
        for (var b = 0; b < d.length && b < a; b++) {
            if (e.charAt(b) != d.charAt(b)) {
                return false;
            }
        }
        return true;
    }
};
feedbro.Strings.prototype.getExtensionBaseUrl = function () {
    var a = new URL(document.location.href);
    return a.protocol + '//' + a.host;
};
feedbro.Strings.prototype.beginsWith = function (e, d) {
    if (e == undefined || d == undefined) {
        return false;
    }
    var b, c = d.length, a = e.length;
    if (c > a) {
        return false;
    }
    for (b = c - 1; b >= 0; b--) {
        if (e.charAt(b) != d.charAt(b)) {
            return false;
        }
    }
    return true;
};
feedbro.Strings.prototype.switchTags = function (b, e, a) {
    if (b == undefined || e == undefined) {
        return undefined;
    }
    if (a != undefined && a.indexOf('-') == -1) {
        throw new Error('Invalid prefix: ' + a + '. It must contain a hyphen');
    }
    var d = Object.keys(e);
    var c = d.join('|');
    return b.replace(new RegExp('(<|</)(' + c + ')', 'gi'), function (f, h, g) {
        if (a) {
            return h + a + g;
        } else {
            return h + e[g];
        }
    });
};
feedbro.Strings.prototype.reverseMap = function (f) {
    var d = Object.keys(f);
    var e = {};
    var b, c = d.length, g, a;
    for (b = 0; b < c; b++) {
        a = d[b];
        g = f[a];
        e[g] = a;
    }
    return e;
};
feedbro.Strings.prototype.containsWords = function (h, g, e) {
    if (h == undefined || g == undefined) {
        return false;
    }
    if (g == '' || g.length == 0) {
        return false;
    }
    var f = this.getWordsRegexp(g, e);
    var d = f.regexp;
    var b;
    var a = {};
    var c = 0;
    while (true) {
        b = d.exec(h);
        if (b == undefined || b.index < 0) {
            break;
        }
        a[e ? b[1].toLowerCase() : b[1]] = 1;
        d.lastIndex--;
        c++;
        if (c > 1000) {
            console.log('Strings.containsWords: Maximum iterations exceeded for search: ' + g);
            break;
        }
        if (this.hashSize(a) == f.count) {
            return true;
        }
    }
    return this.hashSize(a) == f.count;
};
feedbro.Strings.prototype.hashSize = function (b) {
    var c, d = 0;
    for (c in b) {
        if (b.hasOwnProperty(c)) {
            d++;
        }
    }
    return d;
};
feedbro.Strings.prototype.containsAnyWord = function (e, d, b) {
    if (e == undefined || d == undefined) {
        return false;
    }
    if (d == '' || d.length == 0) {
        return false;
    }
    var c = this.getWordsRegexp(d, b);
    var a = c.regexp.exec(e);
    return (a != undefined && a.index >= 0);
};
feedbro.Strings.prototype.doesNotContainWords = function (e, d, b) {
    if (e == undefined || d == undefined) {
        return true;
    }
    if (d == '' || d.length == 0) {
        return false;
    }
    var c = this.getWordsRegexp(d, b);
    var a = c.regexp.exec(e);
    return (a == undefined || a.index < 0);
};
feedbro.Strings.prototype.decodeHtmlEntities = function (a) {
    if (a == undefined || a.length == 0) {
        return a;
    }
    return a.replace(feedbro.Strings.REGEXDECODE, function (c, b, i, h, g, f, e) {
        var d;
        if (b) {
            d = b;
        } else {
            if (h) {
                d = parseInt(h, 16);
            } else {
                if (f) {
                    d = feedbro.Strings.HTML[f];
                    if (d != undefined) {
                        d = parseInt(d, 10);
                    }
                }
            }
        }
        if (d != undefined && !isNaN(d) && d > 20) {
            return String.fromCharCode(d);
        } else {
            return c;
        }
    });
};
feedbro.Strings.prototype.getWordsRegexp = function (h, d) {
    var k = h + '-' + d;
    var l = feedbro.Strings.wordCache[k];
    if (l == undefined) {
        var c = '(?:^|\\s|\\.|,)';
        var g = '(?:\\s|\\.|\\,|\\!|\\?|\\(|\\)|\\\'|\\"|\\t|>|:|;|^)';
        var b = '(?:\\s|\\.|\\,|\\!|\\?|\\(|\\)|\\\'|\\"|\\t|<|:|;|$)';
        var i = h.split(',');
        var f = '';
        var a = {};
        f += g + '(';
        for (var e = 0; e < i.length; e++) {
            a[i[e]] = 1;
            f += i[e].replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
            if (e + 1 < i.length) {
                f += '|';
            }
        }
        f += ')' + b;
        l = {regexp: new RegExp(f, d ? 'gi' : 'g'), count: this.hashSize(a)};
        feedbro.Strings.wordCache[k] = l;
    }
    l.regexp.lastIndex = 0;
    return l;
};
feedbro.Strings.prototype.equals = function (c, b, a) {
    if (c == undefined || b == undefined) {
        return false;
    }
    if (a == true) {
        return (c.length == b.length && c.toLowerCase() == b.toLowerCase());
    } else {
        return (c.length == b.length && c == b);
    }
};
feedbro.Strings.prototype.splitTrim = function (d, c) {
    if (d == undefined || c == undefined) {
        return [d];
    }
    var a = d.split(c);
    for (var b = 0; b < a.length; b++) {
        a[b] = a[b].trim();
    }
    return a;
};
feedbro.Strings.prototype.indexOf = function (c, d, b, a) {
    if (c == undefined || d == undefined) {
        return -1;
    }
    if (d == '') {
        return 0;
    }
    if (d.length > c.length) {
        return -1;
    }
    if (a == true) {
        return this.indexOfIgnoreCase(c, d, b, true);
    } else {
        return c.indexOf(d, b);
    }
};
feedbro.Strings.prototype.indexOfIgnoreCase = function (d, e, c) {
    if (d == undefined || e == undefined) {
        return -1;
    }
    if (e == '') {
        return 0;
    }
    if (e.length > d.length) {
        return -1;
    }
    var b = this.getCachedRegExp(e, true);
    if (c != undefined) {
        b.lastIndex = c;
    }
    var a = b.exec(d);
    return a ? a.index : -1;
};
feedbro.Strings.prototype.getProtocol = function (a) {
    if (!a) {
        return 'http';
    }
    var b = a.indexOf(':');
    return b > 0 ? a.substring(0, b) : 'http';
};
feedbro.Strings.prototype.parseDate = function (b) {
    var e = new Date(b);
    if (!isNaN(e)) {
        return e;
    }
    var c = b.split(' ');
    if (c[c.length - 1].charAt(0) == '(') {
        c.pop();
    }
    var a = c[c.length - 1];
    if (feedbro.Strings.TIMEZONES[a]) {
        c[c.length - 1] = feedbro.Strings.TIMEZONES[a];
    }
    b = c.join(' ');
    return new Date(b);
};
feedbro.Strings.prototype.validateRegexp = function (b) {
    try {
        this.getRegexp(b);
        return true;
    } catch (a) {
        return a.message;
    }
};
feedbro.Strings.prototype.getRegexp = function (b, a) {
    return this.getCachedRegExp(b, false, a ? a : 'g');
};
feedbro.Strings.prototype.getCachedRegExp = function (d, c, a) {
    var b = feedbro.Strings.regexpCache[d + '-' + c + '-' + a];
    if (b == undefined) {
        b = new RegExp(c ? d.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&') : d, a ? a : 'gi');
        feedbro.Strings.regexpCache[d] = b;
    } else {
        b.lastIndex = 0;
    }
    return b;
};
feedbro.Strings.htmlEscapes = {'&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', '\'': '&#39;'};
feedbro.Strings.timeunits = [{name: 'second', shortName: 's', limit: 60, in_seconds: 1}, {
    name: 'minute',
    shortName: 'min',
    limit: 3600,
    in_seconds: 60
}, {name: 'hour', shortName: 'h', limit: 86400, in_seconds: 3600}, {
    name: 'day',
    shortName: 'd',
    limit: 604800,
    in_seconds: 86400
}, {name: 'week', shortName: 'w', limit: 2629743, in_seconds: 604800}, {
    name: 'month',
    shortName: 'mo',
    limit: 31556926,
    in_seconds: 2629743
}, {name: 'year', shortName: 'y', limit: null, in_seconds: 31556926}];
feedbro.Strings.TIMEZONES = {
    A: 'GMT+0100',
    ACDT: 'GMT+1030',
    ACST: 'GMT+0930',
    ACT: 'GMT+1030',
    ACWST: 'GMT+0845',
    ADT: 'GMT-0300',
    AEDT: 'GMT+1100',
    AEST: 'GMT+1000',
    AET: 'GMT+1100',
    AFT: 'GMT+0430',
    AKDT: 'GMT-0800',
    AKST: 'GMT-0900',
    ALMT: 'GMT+0600',
    AMST: 'GMT+0500',
    AMT: 'GMT+0400',
    ANAST: 'GMT+1200',
    ANAT: 'GMT+1200',
    AQTT: 'GMT+0500',
    ART: 'GMT-0300',
    AST: 'GMT-0400',
    AT: 'GMT-0400',
    AWDT: 'GMT+0900',
    AWST: 'GMT+0800',
    AZOST: 'GMT+0000',
    AZOT: 'GMT-0100',
    AZST: 'GMT+0500',
    AZT: 'GMT+0400',
    AoE: 'GMT-1200',
    B: 'GMT+0200',
    BNT: 'GMT+0800',
    BOT: 'GMT-0400',
    BRST: 'GMT-0200',
    BRT: 'GMT-0300',
    BST: 'GMT+0100',
    BTT: 'GMT+0600',
    C: 'GMT+0300',
    CAST: 'GMT+0800',
    CAT: 'GMT+0200',
    CCT: 'GMT+0630',
    CDT: 'GMT-0400',
    CEST: 'GMT+0200',
    CET: 'GMT+0100',
    CHADT: 'GMT+1345',
    CHAST: 'GMT+1245',
    CHOT: 'GMT+0800',
    CHUT: 'GMT+1000',
    CKT: 'GMT-1000',
    CLST: 'GMT-0300',
    CLT: 'GMT-0300',
    COT: 'GMT-0500',
    CST: 'GMT-0500',
    CT: 'GMT-0600',
    CVT: 'GMT-0100',
    CXT: 'GMT+0700',
    ChST: 'GMT+1000',
    D: 'GMT+0400',
    DAVT: 'GMT+0700',
    DDUT: 'GMT+1000',
    E: 'GMT+0500',
    EASST: 'GMT-0500',
    EAST: 'GMT-0500',
    EAT: 'GMT+0300',
    ECT: 'GMT-0500',
    EDT: 'GMT-0400',
    EEST: 'GMT+0300',
    EET: 'GMT+0200',
    EGST: 'GMT+0000',
    EGT: 'GMT-0100',
    EST: 'GMT-0500',
    ET: 'GMT-0500',
    F: 'GMT+0600',
    FET: 'GMT+0300',
    FJST: 'GMT+1300',
    FJT: 'GMT+1200',
    FKST: 'GMT-0300',
    FKT: 'GMT-0400',
    FNT: 'GMT-0200',
    G: 'GMT+0700',
    GALT: 'GMT-0600',
    GAMT: 'GMT-0900',
    GET: 'GMT+0400',
    GFT: 'GMT-0300',
    GILT: 'GMT+1200',
    GMT: 'GMT+0000',
    GST: 'GMT-0200',
    GYT: 'GMT-0400',
    H: 'GMT+0800',
    HADT: 'GMT-0900',
    HAST: 'GMT-1000',
    HKT: 'GMT+0800',
    HOVT: 'GMT+0700',
    I: 'GMT+0900',
    ICT: 'GMT+0700',
    IDT: 'GMT+0300',
    IOT: 'GMT+0600',
    IRDT: 'GMT+0430',
    IRKST: 'GMT+0900',
    IRKT: 'GMT+0800',
    IRST: 'GMT+0330',
    IST: 'GMT+0200',
    JST: 'GMT+0900',
    K: 'GMT+1000',
    KGT: 'GMT+0600',
    KOST: 'GMT+1100',
    KRAST: 'GMT+0800',
    KRAT: 'GMT+0700',
    KST: 'GMT+0900',
    KUYT: 'GMT+0400',
    L: 'GMT+1100',
    LHDT: 'GMT+1100',
    LHST: 'GMT+1030',
    LINT: 'GMT+1400',
    M: 'GMT+1200',
    MAGST: 'GMT+1200',
    MAGT: 'GMT+1000',
    MART: 'GMT-0930',
    MAWT: 'GMT+0500',
    MDT: 'GMT-0600',
    MHT: 'GMT+1200',
    MMT: 'GMT+0630',
    MSD: 'GMT+0400',
    MSK: 'GMT+0300',
    MST: 'GMT-0700',
    MT: 'GMT-0700',
    MUT: 'GMT+0400',
    MVT: 'GMT+0500',
    MYT: 'GMT+0800',
    N: 'GMT-0100',
    NCT: 'GMT+1100',
    NDT: 'GMT-0230',
    NFT: 'GMT+1130',
    NOVST: 'GMT+0700',
    NOVT: 'GMT+0600',
    NPT: 'GMT+0545',
    NRT: 'GMT+1200',
    NST: 'GMT-0330',
    NUT: 'GMT-1100',
    NZDT: 'GMT+1300',
    NZST: 'GMT+1200',
    O: 'GMT-0200',
    OMSST: 'GMT+0700',
    OMST: 'GMT+0600',
    ORAT: 'GMT+0500',
    P: 'GMT-0300',
    PDT: 'GMT-0700',
    PET: 'GMT-0500',
    PETST: 'GMT+1200',
    PETT: 'GMT+1200',
    PGT: 'GMT+1000',
    PHOT: 'GMT+1300',
    PHT: 'GMT+0800',
    PKT: 'GMT+0500',
    PMDT: 'GMT-0200',
    PMST: 'GMT-0300',
    PONT: 'GMT+1100',
    PST: 'GMT-0800',
    PT: 'GMT-0800',
    PWT: 'GMT+0900',
    PYST: 'GMT-0300',
    PYT: 'GMT-0400',
    Q: 'GMT-0400',
    QYZT: 'GMT+0600',
    R: 'GMT-0500',
    RET: 'GMT+0400',
    ROTT: 'GMT-0300',
    S: 'GMT-0600',
    SAKT: 'GMT+1000',
    SAMT: 'GMT+0400',
    SAST: 'GMT+0200',
    SBT: 'GMT+1100',
    SCT: 'GMT+0400',
    SGT: 'GMT+0800',
    SRET: 'GMT+1100',
    SRT: 'GMT-0300',
    SST: 'GMT-1100',
    SYOT: 'GMT+0300',
    T: 'GMT-0700',
    TAHT: 'GMT-1000',
    TFT: 'GMT+0500',
    TJT: 'GMT+0500',
    TKT: 'GMT+1300',
    TLT: 'GMT+0900',
    TMT: 'GMT+0500',
    TOT: 'GMT+1300',
    TVT: 'GMT+1200',
    U: 'GMT-0800',
    ULAT: 'GMT+0800',
    UTC: 'GMT+0000',
    UYST: 'GMT-0200',
    UYT: 'GMT-0300',
    UZT: 'GMT+0500',
    V: 'GMT-0900',
    VET: 'GMT-0430',
    VLAST: 'GMT+1100',
    VLAT: 'GMT+1000',
    VOST: 'GMT+0600',
    VUT: 'GMT+1100',
    W: 'GMT-1000',
    WAKT: 'GMT+1200',
    WARST: 'GMT-0300',
    WAST: 'GMT+0200',
    WAT: 'GMT+0100',
    WEST: 'GMT+0100',
    WET: 'GMT+0000',
    WFT: 'GMT+1200',
    WGST: 'GMT-0200',
    WGT: 'GMT-0300',
    WIB: 'GMT+0700',
    WIT: 'GMT+0900',
    WITA: 'GMT+0800',
    WST: 'GMT+0100',
    WT: 'GMT+0000',
    X: 'GMT-1100',
    Y: 'GMT-1200',
    YAKST: 'GMT+1000',
    YAKT: 'GMT+0900',
    YAPT: 'GMT+1000',
    YEKST: 'GMT+0600',
    YEKT: 'GMT+0500',
    Z: 'GMT+0000'
};
feedbro.Strings.REGEXDECODE = /&#([0-9]+)(;?)|&#[xX]([a-fA-F0-9]+)(;?)|&(Aacute|iacute|Uacute|otilde|Otilde|Agrave|agrave|yacute|Yacute|oslash|Oslash|Atilde|atilde|Ccedil|ccedil|ograve|curren|divide|Eacute|eacute|Ograve|oacute|Egrave|egrave|ugrave|Ugrave|Oacute|Iacute|ntilde|Ntilde|uacute|middot|Igrave|igrave|iquest|aacute|THORN|micro|iexcl|icirc|Icirc|Acirc|ucirc|ecirc|Ocirc|ocirc|Ecirc|Ucirc|aring|Aring|aelig|AElig|acute|pound|acirc|thorn|szlig|cedil|Auml|ordf|ordm|uuml|macr|Uuml|auml|Ouml|ouml|para|nbsp|Euml|quot|QUOT|euml|yuml|cent|sect|Iuml|iuml|shy|eth|not|yen|ETH)(;?)/g;
feedbro.Strings.HTML = {
    quot: '34',
    amp: '38',
    lt: '60',
    gt: '62',
    apos: '39',
    nbsp: '160',
    iexcl: '161',
    cent: '162',
    pound: '163',
    curren: '164',
    yen: '165',
    brvbar: '166',
    sect: '167',
    uml: '168',
    copy: '169',
    ordf: '170',
    laquo: '171',
    not: '172',
    shy: '173',
    reg: '174',
    macr: '175',
    deg: '176',
    plusmn: '177',
    sup2: '178',
    sup3: '179',
    acute: '180',
    micro: '181',
    para: '182',
    middot: '183',
    cedil: '184',
    sup1: '185',
    ordm: '186',
    raquo: '187',
    frac14: '188',
    frac12: '189',
    frac34: '190',
    iquest: '191',
    Agrave: '192',
    Aacute: '193',
    Acirc: '194',
    Atilde: '195',
    Auml: '196',
    Aring: '197',
    AElig: '198',
    Ccedil: '199',
    Egrave: '200',
    Eacute: '201',
    Ecirc: '202',
    Euml: '203',
    Igrave: '204',
    Iacute: '205',
    Icirc: '206',
    Iuml: '207',
    ETH: '208',
    Ntilde: '209',
    Ograve: '210',
    Oacute: '211',
    Ocirc: '212',
    Otilde: '213',
    Ouml: '214',
    times: '215',
    Oslash: '216',
    Ugrave: '217',
    Uacute: '218',
    Ucirc: '219',
    Uuml: '220',
    Yacute: '221',
    THORN: '222',
    szlig: '223',
    agrave: '224',
    aacute: '225',
    acirc: '226',
    atilde: '227',
    auml: '228',
    aring: '229',
    aelig: '230',
    ccedil: '231',
    egrave: '232',
    eacute: '233',
    ecirc: '234',
    euml: '235',
    igrave: '236',
    iacute: '237',
    icirc: '238',
    iuml: '239',
    eth: '240',
    ntilde: '241',
    ograve: '242',
    oacute: '243',
    ocirc: '244',
    otilde: '245',
    ouml: '246',
    divide: '247',
    oslash: '248',
    ugrave: '249',
    uacute: '250',
    ucirc: '251',
    uuml: '252',
    yacute: '253',
    thorn: '254',
    yuml: '255',
    fnof: '402',
    Alpha: '913',
    Beta: '914',
    Gamma: '915',
    Delta: '916',
    Epsilon: '917',
    Zeta: '918',
    Eta: '919',
    Theta: '920',
    Iota: '921',
    Kappa: '922',
    Lambda: '923',
    Mu: '924',
    Nu: '925',
    Xi: '926',
    Omicron: '927',
    Pi: '928',
    Rho: '929',
    Sigma: '931',
    Tau: '932',
    Upsilon: '933',
    Phi: '934',
    Chi: '935',
    Psi: '936',
    Omega: '937',
    alpha: '945',
    beta: '946',
    gamma: '947',
    delta: '948',
    epsilon: '949',
    zeta: '950',
    eta: '951',
    theta: '952',
    iota: '953',
    kappa: '954',
    lambda: '955',
    mu: '956',
    nu: '957',
    xi: '958',
    omicron: '959',
    pi: '960',
    rho: '961',
    sigmaf: '962',
    sigma: '963',
    tau: '964',
    upsilon: '965',
    phi: '966',
    chi: '967',
    psi: '968',
    omega: '969',
    thetasym: '977',
    upsih: '978',
    piv: '982',
    bull: '8226',
    hellip: '8230',
    prime: '8242',
    Prime: '8243',
    oline: '8254',
    frasl: '8260',
    weierp: '8472',
    image: '8465',
    real: '8476',
    trade: '8482',
    alefsym: '8501',
    larr: '8592',
    uarr: '8593',
    rarr: '8594',
    darr: '8595',
    harr: '8596',
    crarr: '8629',
    lArr: '8656',
    uArr: '8657',
    rArr: '8658',
    dArr: '8659',
    hArr: '8660',
    forall: '8704',
    part: '8706',
    exist: '8707',
    empty: '8709',
    nabla: '8711',
    isin: '8712',
    notin: '8713',
    ni: '8715',
    prod: '8719',
    sum: '8721',
    minus: '8722',
    lowast: '8727',
    radic: '8730',
    prop: '8733',
    infin: '8734',
    ang: '8736',
    and: '8743',
    or: '8744',
    cap: '8745',
    cup: '8746',
    'int': '8747',
    there4: '8756',
    sim: '8764',
    cong: '8773',
    asymp: '8776',
    ne: '8800',
    equiv: '8801',
    le: '8804',
    ge: '8805',
    sub: '8834',
    sup: '8835',
    sube: '8838',
    supe: '8839',
    oplus: '8853',
    otimes: '8855',
    perp: '8869',
    sdot: '8901',
    lceil: '8968',
    rceil: '8969',
    lfloor: '8970',
    rfloor: '8971',
    lang: '9001',
    rang: '9002',
    loz: '9674',
    spades: '9824',
    clubs: '9827',
    hearts: '9829',
    diams: '9830',
    OElig: '338',
    oelig: '339',
    Scaron: '352',
    scaron: '353',
    Yuml: '376',
    circ: '710',
    tilde: '732',
    ensp: '8194',
    emsp: '8195',
    thinsp: '8201',
    zwnj: '8204',
    zwj: '8205',
    lrm: '8206',
    rlm: '8207',
    ndash: '8211',
    mdash: '8212',
    lsquo: '8216',
    rsquo: '8217',
    sbquo: '8218',
    ldquo: '8220',
    rdquo: '8221',
    bdquo: '8222',
    dagger: '8224',
    Dagger: '8225',
    permil: '8240',
    lsaquo: '8249',
    rsaquo: '8250',
    euro: '8364'
};
var feedbro = feedbro || {};
feedbro.TagFilter = function () {
    var a = this;
    var c;
    var b = {
        '<object': '<span style="display: none" ',
        'object>': 'span>',
        '<script': '<span style="display: none" ',
        'script>': 'span>',
        '<applet': '<span style="display: none" ',
        'applet>': 'span>',
        '<style': '<span style="display: none" ',
        'style>': 'span>',
        '<link': '<span style="display: none" ',
        'link>': 'span>'
    };

    function e(k, i) {
        var g = k.length;
        for (var h = 0; h < i.length && h < g; h++) {
            if (k.charAt(h) != i.charAt(h)) {
                return false;
            }
        }
        return true;
    }

    function f(i) {
        var h = i.indexOf('//');
        var g = i.indexOf('/', 9);
        if (g < 0) {
            g = i.length;
        }
        return i.substring(h + 2, g);
    }

    function d(g) {
        if (!g) {
            return 'http';
        }
        var h = g.indexOf(':');
        return h > 0 ? g.substring(0, h) : 'http';
    }

    this.addTagFilter = function (g) {
        b['<' + g] = '<span style="display: none" ';
        b[g + '>'] = 'span>';
    };
    this.setUrl = function (g) {
        c = g;
    };
    this.filter = function (g) {
        return g.replace(/(<object|object>|<script|script>|<applet|applet>|<iframe|iframe>|<embed|embed>|<link|link>|<style|style>)/gi, function (i) {
            var h = i;
            var j = b[h.toLowerCase()];
            if (j) {
                return j;
            } else {
                return h;
            }
        });
    };
};
var feedbro = feedbro || {};
feedbro.TwPlugin = function () {
    this._strings = new feedbro.Strings();
    this._rootUrl = atob('aHR0cHM6Ly90d2l0dGVyLmNvbQ==');
    this._urlStripper = /https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)[;…]*/g;
};
feedbro.TwPlugin.prototype.canParse = function (a) {
    return a && a.indexOf(this._rootUrl) == 0;
};
feedbro.TwPlugin.prototype.parse = function (e, c, a, f) {
    var b = this;
    var d = new XMLHttpRequest();
    d.onreadystatechange = function () {
        if (d.readyState == 4) {
            if (d.status == 200) {
                var i = d.responseText;
                var g = '';
                try {
                    g = b.toRSS(i, e.url);
                } catch (h) {
                    console.log('Failed to parse: ' + e.url);
                }
                if (c) {
                    c(e.url, d, g, a, f, true);
                }
            } else {
                c(e.url, d, '', a, f, true);
            }
            d.onreadystatechange = null;
            d.onerror = null;
            d.abort = null;
            d = null;
        }
    };
    d.withCredentials = true;
    d.open('GET', e.url, true);
    d.setRequestHeader('Cache-Control', 'max-age=0');
    d.setRequestHeader('Accept', 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8');
    d.setRequestHeader('upgrade-insecure-requests', '1');
    d.send();
};
feedbro.TwPlugin.prototype.toRSS = function (n, g) {
    var r = this;
    var w = {};
    var o = [];
    var z = '<?xml version="1.0" encoding="UTF-8"?>\n<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">\n<channel>';
    var m = '<div class="StreamItem';
    var h = '<div class="tweet';
    var d = '<b class="ProfileTweet-fullname';
    var t = '<span class="ProfileTweet-screenname';
    var l = 'js-tweet-text';
    var f = '<a class="ProfileTweet-timestamp';
    var A = '<img class="ProfileTweet-avatar';
    if (n.indexOf(m) == -1) {
        return this.toStreamRSS(n, g);
    }
    var v = this.find(n, w, ['<head', '<meta', '<title>'], '</title>');
    var s = '', y, e, b, a, c, q, p, E, j, k;
    var u, B;
    z += '	<title><![CDATA[' + v + ']]></title>\n';
    z += '	<link>' + g.replace(/&/g, '&amp;') + '</link>\n';
    z += '	<description>' + v + '</description>\n';
    while (true) {
        if (this.find(n, w, [m], '<') == undefined) {
            break;
        }
        u = w.spos;
        this.find(n, w, [m], '<');
        B = w.epos > 0 ? w.spos : n.length;
        w.spos = u;
        j = this.find(n, w, ['data-item-id="'], '"');
        w.spos = u;
        a = this.find(n, w, [l, '>'], '</p>');
        if (a == undefined) {
            break;
        }
        a = a.replace(/&nbsp;/g, '&#160;');
        a = a.replace(/href="\//g, 'href="https://twitter.com/');
        w.spos = u;
        w.spos = u;
        q = this.find(n, w, ['<div class="AdaptiveMedia-photoContainer', '<img', ' src="'], '"');
        if (q == undefined || w.spos > B) {
            q = '';
        } else {
            q = '<div class="twitter-embedded-image"><img src="' + q + '"/></div>';
        }
        w.spos = u;
        w.spos = u;
        s = this.find(n, w, [A, 'src="'], '"');
        if (s != undefined) {
            s = '<img class="twitter-authorimage" src="' + s + '"/>';
        }
        w.spos = u;
        y = this.find(n, w, [d, '>'], '<');
        if (y == undefined) {
            break;
        }
        w.spos = u;
        e = this.find(n, w, [t, '</span>'], '</span>').trim();
        if (e == undefined) {
            break;
        }
        w.spos = u;
        b = this.find(n, w, ['data-time="'], '"');
        if (b == undefined) {
            break;
        }
        b = parseInt(b, 10) * 1000;
        w.spos = u;
        k = 'https://twitter.com/' + e + '/status/' + j;
        k = k.replace(/&/g, '&amp;');
        p = a + q;
        E = this._strings.stripTags(a);
        E = E.replace(this._urlStripper, '');
        var D = new Date(b);
        D.setMilliseconds(0);
        var C = {};
        C.element = '	<item><title><![CDATA[' + E + ']]></title><content:encoded><![CDATA[<a href="https://twitter.com/' + e + '">' + s + '</a> <span class=\'twitter-fullname\'>' + y + '</span> <span class=\'twitter-username\'><a href=\'https://twitter.com/' + e + '\'>@' + e + '</a></span><br/>' + p + '<br/>]]></content:encoded><pubDate>' + D + '</pubDate><link>' + k + '</link><author>' + y + '</author></item>\n';
        C.datelong = D.getTime();
        o.push(C);
    }
    o.sort(function (F, i) {
        return i.datelong - F.datelong;
    });
    for (var x = 0; x < o.length; x++) {
        z += o[x].element;
    }
    z += '</channel>\n</rss>';
    return z;
};
feedbro.TwPlugin.prototype.toStreamRSS = function (n, g) {
    var v = {};
    var o = [];
    var y = '<?xml version="1.0" encoding="UTF-8"?>\n<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">\n<channel>';
    var m = '<li class="js-stream-item';
    var h = '<div class="tweet';
    var d = '<strong class="fullname';
    var s = '<span class="username';
    var l = 'js-tweet-text';
    var f = '<a class="details';
    var z = '<img class="avatar';
    var u = this.find(n, v, ['<head', '<meta', '<title>'], '</title>');
    var r = '', x, e, b, a, c, q, p, D, j, C, k;
    var t, A;
    y += '	<title><![CDATA[' + u + ']]></title>\n';
    y += '	<link>' + g.replace(/&/g, '&amp;') + '</link>\n';
    y += '	<description>' + u + '</description>\n';
    while (true) {
        if (this.find(n, v, [m], '<') == undefined) {
            break;
        }
        t = v.spos;
        v.spos = t + 10;
        this.find(n, v, [m], '<');
        A = v.epos > 0 ? v.spos : n.length;
        v.spos = t;
        j = this.find(n, v, ['data-item-id="'], '"');
        q = this.find(n, v, ['<div class="AdaptiveMedia-photoContainer', '<img', ' src="'], '"');
        if (q == undefined || v.spos > A) {
            q = '';
        } else {
            q = '<div class="twitter-embedded-image"><img src="' + q + '"/></div>';
        }
        v.spos = t;
        r = this.find(n, v, [z, 'src="'], '"');
        if (r != undefined) {
            r = '<img class="twitter-authorimage" src="' + r + '"/>';
        }
        v.spos = t;
        x = this.find(n, v, [d, '>'], '<');
        if (x == undefined || v.spos > A) {
            v.spos = t + 10;
            break;
        }
        v.spos = t;
        e = this.find(n, v, [s, '<b>'], '</b>');
        if (e == undefined || v.spos > A) {
            v.spos = t + 10;
            break;
        }
        v.spos = t;
        b = this.find(n, v, ['data-time="'], '"');
        if (b == undefined || v.spos > A) {
            v.spos = t + 10;
            break;
        }
        b = parseInt(b, 10) * 1000;
        v.spos = t;
        a = this.find(n, v, [l, '>'], '</p>');
        if (a == undefined || v.spos > A) {
            v.spos = t + 10;
            break;
        }
        a = a.replace(/&nbsp;/g, '&#160;');
        a = a.replace(/href="\//g, 'href="https://twitter.com/');
        v.spos = t;
        k = 'https://twitter.com/' + e + '/status/' + j;
        k = k.replace(/&/g, '&amp;');
        p = a + q;
        D = this._strings.stripTags(a);
        D = D.replace(this._urlStripper, '');
        C = new Date(b);
        C.setMilliseconds(0);
        var B = {};
        B.element = '	<item><title><![CDATA[' + D + ']]></title><content:encoded><![CDATA[<a href="https://twitter.com/' + e + '">' + r + '</a> <span class=\'twitter-fullname\'>' + x + '</span> <span class=\'twitter-username\'><a href=\'https://twitter.com/' + e + '\'>@' + e + '</a></span><br/>' + p + '<br/>]]></content:encoded><pubDate>' + C + '</pubDate><link>' + k + '</link><author>' + x + '</author></item>\n';
        B.datelong = C.getTime();
        o.push(B);
    }
    o.sort(function (E, i) {
        return i.datelong - E.datelong;
    });
    for (var w = 0; w < o.length; w++) {
        y += o[w].element;
    }
    y += '</channel>\n</rss>';
    return y;
};
feedbro.TwPlugin.prototype.find = function (b, a, d, c) {
    a.stag = d;
    a.etag = c;
    this._strings.findNext(b, a);
    return a.match;
};
var feedbro = feedbro || {};
feedbro.VkPlugin = function () {
};
feedbro.VkPlugin.prototype.setDebug = function (a) {
    this._debug = a;
};
feedbro.VkPlugin.prototype.canParse = function (a) {
    return a && a.indexOf('https://vk.com') == 0;
};
feedbro.VkPlugin.prototype.parse = function (f, c, a, g) {
    var b = this;
    var d = new XMLHttpRequest();
    d.onerror = function () {
        a.error = {};
        a.error.message = 'Network error';
        a.error.code = 398;
        a.status = 398;
    };
    d.onreadystatechange = function () {
        if (d.readyState == 4) {
            if (d.status == 200) {
                try {
                    c(f.url, d, b.toRSS(d.responseText, f.url), a, g, true);
                } catch (h) {
                    c(f.url, d, '', a, g, true);
                }
            } else {
                c(f.url, d, '', a, g, true);
            }
            d.onreadystatechange = null;
            d.onerror = null;
            d.abort = null;
            d = null;
        }
    };
    d.open('GET', f.url, true);
    d.timeout = f.timeout ? f.timeout : 10000;
    d.setRequestHeader('Cache-Control', 'no-cache');
    d.send();
};
feedbro.VkPlugin.prototype.toRSS = function (t, j) {
    var y = {stag: ['<div class="_post_content">'], etag: '<div class="like_cont', postfix: '"></div></div></div>'};
    var r = new feedbro.Strings();
    var d = new DOMParser();
    var H, f, k, J, B, u, m, v, K, x, G, A, D;
    var a = 'https://vk.com';
    var c = /(yesterday|today) at (\d{1,2}):(\d{2}) (\w{2})/;
    var o = /(\d{1,2}) (\w{3}) at (\d{1,2}):(\d{2}) (\w{2})/;
    var h = /(\d{1,2}) (\w{3}) (\d{4})/;
    var n = /(onclick|onmouseover)="[^"]+"/g;
    var F = /(href|src)="\//g;
    var I = /<a /g;
    var l = {Jan: 0, Feb: 1, Mar: 2, Apr: 3, May: 4, Jun: 5, Jul: 6, Aug: 7, Sep: 8, Oct: 9, Nov: 10, Dec: 11};
    var q = [];
    var w = 'VK';
    var E = new XMLSerializer();
    var p;
    while (true) {
        r.findNext(t, y);
        if (y.match == undefined) {
            break;
        }
        p = y.match;
        p = p.replace(new RegExp(' (src|srcset|rel|onload|preload|autoplay)=', 'gi'), ' data-$1=');
        p = r.switchTags(p, feedbro.ClearBody.tagFlipMap);
        H = d.parseFromString(p, 'text/html');
        f = H.querySelector('h5.post_author > a.author');
        x = H.querySelector('div.post_header > a.post_image');
        K = H.querySelector('div.post_header > a.post_image > img');
        k = H.querySelector('a.post_link');
        G = H.querySelector('div.post_date .rel_date');
        A = G.getAttribute('time');
        J = G.innerText;
        B = H.querySelector('div.wall_text');
        if (x) {
            x = a + x.getAttribute('href');
        }
        if (K) {
            K = K.getAttribute('src');
        }
        w = f.innerText + ' | VK';
        var b = {author: f.innerText, link: a + k.getAttribute('href')};
        try {
            b.content = E.serializeToString(B);
        } catch (z) {
            b.content = B.innerHTML + '';
        }
        b.content = b.content.replace(new RegExp(' data-(src|srcset|rel|onload|preload|autoplay)=', 'gi'), ' $1=');
        b.content = r.switchTags(b.content, r.reverseMap(feedbro.ClearBody.tagFlipMap));
        b.content = b.content.replace(n, '');
        b.content = b.content.replace(I, '<a target=\'_blank\' rel=\'noopener noreferrer\' ');
        b.content = b.content.replace(F, '$1="' + a + '/');
        b.content = '<div class=\'vk-content\'>' + b.content + '</div>';
        v = new Date();
        m = c.exec(J);
        if (A != undefined && A != '') {
            v.setTime(parseInt(A, 10) * 1000);
            v.setSeconds(0);
            v.setMilliseconds(0);
            b.publishedDate = v;
        } else {
            if (m) {
                if (m[1] == 'yesterday') {
                    v.setDate(v.getDate() - 1);
                }
                v.setHours(parseInt(m[2], 10));
                v.setMinutes(parseInt(m[3], 10));
                v.setSeconds(0);
                v.setMilliseconds(0);
                b.publishedDate = v;
            } else {
                m = o.exec(J);
                if (m) {
                    v.setDate(parseInt(m[1], 10));
                    v.setMonth(l[m[2]]);
                    v.setHours(parseInt(m[3], 10));
                    v.setMinutes(parseInt(m[4], 10));
                    v.setSeconds(0);
                    v.setMilliseconds(0);
                    if (m[5] == 'pm') {
                        v.setHours(v.getHours() + 12);
                    }
                    b.publishedDate = v;
                } else {
                    m = h.exec(J);
                    if (m) {
                        v.setDate(parseInt(m[1], 10));
                        v.setMonth(l[m[2]]);
                        v.setFullYear(parseInt(m[3], 10));
                        v.setHours(0);
                        v.setMinutes(0);
                        v.setSeconds(0);
                        v.setMilliseconds(0);
                        b.publishedDate = v;
                    }
                }
            }
        }
        q.push(b);
    }
    q.sort(function (s, i) {
        if (s.publishedDate && i.publishedDate) {
            return i.publishedDate.getTime() - s.publishedDate.getTime();
        } else {
            return 0;
        }
    });
    var C = '<?xml version="1.0" encoding="UTF-8"?>\n<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">\n<channel>\n';
    C += '  <title><![CDATA[' + w + ']]></title>\n';
    C += '  <link>' + (j || '').replace(/&/g, '&amp;') + '</link>\n';
    C += '  <description><![CDATA[' + w + ']]></description>\n';
    for (D = 0; D < q.length; D++) {
        e = q[D];
        var g = '';
        g += '  <item>\n';
        g += '    <title><![CDATA[' + (e.title ? e.title : '') + ']]></title>\n';
        g += '    <link><![CDATA[' + e.link + ']]></link>\n';
        g += '    <author><![CDATA[' + e.author + ']]></author>\n';
        g += '    <content:encoded><![CDATA[' + e.content + ']]></content:encoded>\n';
        if (e.publishedDate && !isNaN(e.publishedDate)) {
            g += '    <pubDate>' + e.publishedDate + '</pubDate>\n';
        }
        g += '  </item>\n';
        C += g;
    }
    C += '</channel>\n</rss>';
    return C;
};
var feedbro = feedbro || {};
feedbro.XmlDocumentWrapper = function () {
};
feedbro.XmlDocumentWrapper.prototype.trash = function () {
    this.xmldoc = null;
    this.domParser = null;
    this.nsResolver = null;
    this.nsReverseResolver = null;
};
feedbro.XmlDocumentWrapper.prototype.createNSResolvers = function () {
    var b = this.getRootNode();
    var a = b.attributes;
    var d, e = a.length, f, c;
    this.nsResolver = {};
    this.nsReverseResolver = {};
    for (d = 0; d < e; d++) {
        if (a[d].name.indexOf('xmlns') == 0) {
            c = a[d].nodeValue + '';
            f = a[d].name.substring(6);
            this.nsResolver[f] = c;
            this.nsReverseResolver[c] = f;
        }
    }
};
feedbro.XmlDocumentWrapper.reverseResolver = {
    'http://www.w3.org/2005/Atom': 'atom',
    'http://purl.org/dc/elements/1.1/': 'dc',
    'http://purl.org/rss/1.0/modules/content/': 'content',
    'http://www.w3.org/1998/Math/MathML': 'mathml',
    'http://search.yahoo.com/mrss/': 'media',
    'http://www.w3.org/1999/02/22-rdf-syntax-ns#': 'rdf',
    'http://webns.net/mvcb/': 'admin',
    'http://purl.org/rss/1.0/': 'rss10',
    'http://purl.oclc.org/net/rss_2.0/enc#': 'enc',
    'http://prismstandard.org/namespaces/basic/2.0/': 'prism',
    'http://www.w3.org/1999/xhtml': 'xhtml',
    'http://purl.org/atom/ns#': 'atom03',
    'http://www.youtube.com/xml/schemas/2015': 'yt',
    'http://my.netscape.com/rdf/simple/0.9/': 'rss09'
};
feedbro.XmlDocumentWrapper.prototype.translateNodeName = function (d) {
    var b = d.indexOf(':');
    var c = '';
    if (b != 0) {
        c = d.substring(0, b);
    }
    var a = this.nsReverseResolver[this.standardNSResolver(c)];
    return a != undefined ? a + (a.length > 0 ? ':' : '') + d.substring(b + 1) : d;
};
feedbro.XmlDocumentWrapper.prototype.mapNodeName = function (d) {
    var b = d.indexOf(':');
    var c = '';
    if (b != 0) {
        c = d.substring(0, b);
    }
    var a = feedbro.XmlDocumentWrapper.reverseResolver[this.nsResolver[c]];
    return a ? a + ':' + d.substring(b + 1) : d;
};
feedbro.XmlDocumentWrapper.prototype.parse = function (a) {
    if (this.domParser == undefined) {
        this.domParser = new DOMParser();
    }
    this.setDocument(this.domParser.parseFromString(a, 'text/xml'));
    var b = this.xmldoc.getElementsByTagName('parsererror');
    if (b && b.length > 0) {
        throw b[0].innerText + '';
    }
    return this.xmldoc;
};
feedbro.XmlDocumentWrapper.prototype.setDocument = function (a) {
    this.xmldoc = a;
    this.createNSResolvers();
};
feedbro.XmlDocumentWrapper.prototype.standardNSResolver = function (a) {
    switch (a) {
        case'atom':
            return 'http://www.w3.org/2005/Atom';
        case'atom03':
            return 'http://purl.org/atom/ns#';
        case'dc':
            return 'http://purl.org/dc/elements/1.1/';
        case'content':
            return 'http://purl.org/rss/1.0/modules/content/';
        case'mathml':
            return 'http://www.w3.org/1998/Math/MathML';
        case'media':
            return 'http://search.yahoo.com/mrss/';
        case'rdf':
            return 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';
        case'admin':
            return 'http://webns.net/mvcb/';
        case'rss10':
            return 'http://purl.org/rss/1.0/';
        case'rss09':
            return 'http://my.netscape.com/rdf/simple/0.9/';
        case'enc':
            return 'http://purl.oclc.org/net/rss_2.0/enc#';
        case'prism':
            return 'http://prismstandard.org/namespaces/basic/2.0/';
        case'xhtml':
            return 'http://www.w3.org/1999/xhtml';
        case'yt':
            return 'http://www.youtube.com/xml/schemas/2015';
        default:
            return null;
    }
};
feedbro.XmlDocumentWrapper.prototype.getRootNode = function () {
    return this.xmldoc.documentElement;
};
feedbro.XmlDocumentWrapper.prototype.getNode = function (c, b) {
    var a;
    try {
        a = this.xmldoc.evaluate(c, b ? b : this.xmldoc, this.standardNSResolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null);
    } catch (d) {
        console.log(d);
    }
    return a ? a.singleNodeValue : undefined;
};
feedbro.XmlDocumentWrapper.prototype.getNodeListIterator = function (b, a) {
    try {
        return this.xmldoc.evaluate(b, a ? a : this.xmldoc, this.standardNSResolver, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);
    } catch (c) {
        return undefined;
    }
};
feedbro.XmlDocumentWrapper.prototype.getAttribute = function (b, a, c) {
    var d = this.getNode(b, a);
    if (!d) {
        return undefined;
    }
    return d.getAttribute(c);
};
feedbro.XmlDocumentWrapper.prototype.getString = function (c, b) {
    var a;
    try {
        a = this.xmldoc.evaluate(c, b ? b : this.xmldoc, this.standardNSResolver, XPathResult.STRING_TYPE, null);
    } catch (d) {
        console.log(d);
    }
    if (a) {
        return a.stringValue;
    } else {
        return undefined;
    }
};
feedbro.XmlDocumentWrapper.prototype.getChildString = function (c, a) {
    var b = this.getChild(c, a);
    return b ? (b.textContent + '') : undefined;
};
feedbro.XmlDocumentWrapper.prototype.getChild = function (d, a) {
    if (d.indexOf('/') == -1) {
        return this.getChildSingle(d, a);
    } else {
        var c, b = d.split('/');
        for (c = 0; c < b.length; c++) {
            a = this.getChildSingle(b[c], a);
            if (a == undefined) {
                return undefined;
            }
        }
        return a;
    }
};
feedbro.XmlDocumentWrapper.prototype.getChildSingle = function (d, a) {
    if (a == undefined) {
        a = this.xmldoc;
    }
    var c = a.firstElementChild;
    var b = this.translateNodeName(d);
    while (c != undefined) {
        if (c.nodeName == b) {
            return c;
        }
        c = c.nextElementSibling;
    }
    return undefined;
};
feedbro.XmlDocumentWrapper.prototype.getAll = function (e, a) {
    if (a == undefined) {
        a = this.xmldoc;
    }
    var d = a.firstElementChild, b = [];
    var c = this.translateNodeName(e);
    while (d != undefined) {
        if (d.nodeName == c) {
            b.push(d);
        }
        d = d.nextElementSibling;
    }
    return b;
};
var feedbro = feedbro || {};
feedbro.YammerPlugin = function () {
    this._strings = new feedbro.Strings();
};
feedbro.YammerPlugin.prototype.canParse = function (a) {
    return a && a.indexOf('https://www.yammer.com/') == 0;
};
feedbro.YammerPlugin.prototype.parse = function (f, d, a, g) {
    var b = this;
    var e = new XMLHttpRequest();
    var c = this.getURL(f.url, 20);
    e.onerror = function () {
        a.error = {};
        a.error.message = 'Network error';
        a.error.code = 398;
        a.status = 398;
    };
    e.onreadystatechange = function () {
        if (e.readyState == 4) {
            if (e.status == 200) {
                try {
                    d(f.url, e, b.toRSS(e.responseText, f.datelimit, f.url), a, g, true);
                } catch (h) {
                    console.log('ERROR!', h);
                    d(f.url, e, '', a, g, true);
                }
            } else {
                d(f.url, e, '', a, g, true);
            }
            e.onreadystatechange = null;
            e.onerror = null;
            e.abort = null;
            e = null;
        }
    };
    e.open('GET', c, true);
    e.timeout = f.timeout ? f.timeout : 30000;
    e.send();
};
feedbro.YammerPlugin.prototype.toRSS = function (c, k, a) {
    var h = JSON.parse(c);
    var d, f, j = this.processJson(h);
    var g = '<?xml version="1.0" encoding="UTF-8"?>\n<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">\n<channel>\n';
    g += '  <title><![CDATA[' + (h.meta ? h.meta.feed_name : 'Group') + ' | Yammer]]></title>\n';
    g += '  <link><![CDATA[' + (a || '').replace(/&/g, '&amp;') + ']]></link>\n';
    g += '  <description></description>\n';
    for (d = 0; d < j.length; d++) {
        f = j[d];
        if (k && f.publishedDate.getTime() < k) {
            continue;
        }
        var b = '';
        b += '<item>\n';
        b += '  <title><![CDATA[' + f.title + ']]></title>\n';
        b += '  <link><![CDATA[' + f.link + ']]></link>\n';
        b += '  <author><![CDATA[' + f.author + ']]></author>\n';
        b += '  <content:encoded><![CDATA[' + f.content + ']]></content:encoded>\n';
        b += '  <pubDate>' + f.publishedDate + '</pubDate>\n';
        b += '</item>\n';
        g += b;
    }
    g += '</channel>\n</rss>';
    return g;
};
feedbro.YammerPlugin.prototype.getURL = function (c, e) {
    var b, a, d;
    c = (c || '');
    if (!a && c.includes('?type=following')) {
        a = 'messages/following';
    }
    if (!a && c.includes('?type=my_all')) {
        a = 'messages/my_feed';
    }
    if (!a && c.includes('?type=algo')) {
        a = 'messages/algo';
    }
    b = c.match(/feedId=(\d+)/);
    if (!a && b && c.includes('/inGroup')) {
        d = b[1];
        a = 'messages/in_group/' + d;
    }
    if (!a && b && c.includes('/AboutTopic')) {
        d = b[1];
        a = 'messages/about_topic/' + d;
    }
    if (!a && c.includes('/home')) {
        a = 'messages/my_feed';
    }
    if (a == null) {
        return null;
    }
    return 'https://www.yammer.com/api/v1/' + a + '.json?threaded=true&limit=' + e;
};
feedbro.YammerPlugin.prototype.processJson = function (n) {
    var f, e, b, a, d = n.messages, m, l, c, g = [], k = {}, h;
    if (n.references) {
        for (f = 0; f < n.references.length; f++) {
            b = n.references[f];
            k[b.id] = b;
        }
    }
    if (d == undefined) {
        console.log(n);
        return g;
    }
    for (f = 0; f < d.length; f++) {
        a = d[f];
        c = k[a.sender_id];
        m = {
            link: a.web_url,
            publishedDate: new Date(a.created_at),
            author: c ? c.full_name : '',
            title: a.body ? a.body.plain : '',
            content: this.getPostHeader(c)
        };
        if (a.body && a.body.rich != '') {
            m.content += '<div class=\'yammer-update\'>' + (a.body ? a.body.rich : '') + '</div>';
        }
        if (a.attachments && a.attachments.length > 0) {
            for (e = 0; e < a.attachments.length; e++) {
                h = a.attachments[e];
                if (h.message_type == 'update') {
                    m.content += '<div class=\'yammer-shared-update\'>' + this.getPostHeader(k[h.sender_id]) + '<div class=\'yammer-shared-content\'>' + (h.body ? h.body.rich : '') + '</div></div>';
                    m.title = h.body ? h.body.plain : '';
                } else {
                    if (h.content_class == 'Image') {
                        m.content += '<div class=\'yammer-attachment-image\'><a target=\'_blank\' rel=\'noreferrer noopener\' href=\'' + h.download_url + '\'><img src=\'' + h.image.url + '\'></a></div>';
                    } else {
                        if (h.content_class == 'Video') {
                            m.content += '<div class=\'yammer-attachment-video\'><a target=\'_blank\' rel=\'noopener noreferrer\' href=\'' + h.web_url + '\'><img class=\'yammer-attachment-video-thumbnail\' src=\'' + h.thumbnail_url + '\'></a></div>';
                        } else {
                            if (h.object_type == 'page') {
                                m.content += '<div class=\'yammer-attachment-page\'>' + h.inline_html + '</div>';
                            }
                        }
                    }
                }
            }
        }
        this._strings.stripTags(m.title);
        if (m.title.length > 128) {
            m.title = m.title.substring(0, 128) + '...';
        }
        g.push(m);
    }
    g.sort(function (j, i) {
        return i.publishedDate.getTime() - j.publishedDate.getTime();
    });
    return g;
};
feedbro.YammerPlugin.prototype.getPostHeader = function (c) {
    var a = '';
    var b = '';
    if (c) {
        a = '<img class=\'yammer-mugshot-img\' src=\'' + this.escapeHtml(c.mugshot_url) + '\'>';
        b = c.full_name;
        if (c.job_title) {
            b = b + '<span class=\'yammer-jobtitle\'>, ' + c.job_title + '</span>';
        }
    }
    return '<div class=\'yammer-mugshot\'>' + a + '</div><div class=\'yammer-author\'>' + this.escapeHtml(b) + '</div>';
};
feedbro.YammerPlugin.prototype.escapeHtml = function (a) {
    return a ? String(a).replace(/[&<>"'`]/g, function (b) {
        return '&#' + b.charCodeAt(0) + ';';
    }) : a;
};
var feedbro = feedbro || {};
feedbro.YoPlugin = function () {
    this._strings = new feedbro.Strings();
};
feedbro.YoPlugin.prototype.canParse = function (a) {
    return a && a.indexOf('https://www.youtube.com/results?') == 0;
};
feedbro.YoPlugin.prototype.parse = function (e, c, a, f) {
    var b = this;
    var d = new XMLHttpRequest();
    d.onreadystatechange = function (j) {
        if (d.readyState == 4) {
            if (d.status == 200) {
                var i = d.responseText;
                var g = '';
                try {
                    g = b.toRSS(i, e.url);
                } catch (h) {
                    console.log('Failed to parse: ' + e.url);
                }
                if (c) {
                    c(e.url, d, g, a, f, true);
                }
            } else {
                c(e.url, d, '', a, f, true);
            }
            d.onreadystatechange = null;
            d.onerror = null;
            d.abort = null;
            d = null;
        }
    };
    d.open('GET', e.url, true);
    d.send();
};
feedbro.YoPlugin.prototype.toRSS = function (g, d) {
    var m;
    m = {stag: ['"PQ"', '"'], etag: '"'};
    this._strings.findNext(g, m);
    var l = 'Youtube Search | ' + (m.match ? m.match : '');
    var h = [];
    var q = '<?xml version="1.0" encoding="UTF-8"?>\n<feed xmlns:yt="http://www.youtube.com/xml/schemas/2015" xmlns:media="http://search.yahoo.com/mrss/" xmlns="http://www.w3.org/2005/Atom">\n';
    q += '	<title><![CDATA[' + l + ']]></title>\n';
    q += '	<link>' + d.replace(/&/g, '&#038;') + '</link>\n';
    q += '	<description><![CDATA[' + l + ']]></description>\n';
    m = {stag: ['"videoRenderer"', '"videoId"', '"'], etag: '"'};
    var c = {stag: ['"thumbnails"', '"url"', '"'], etag: '"'};
    var f = {stag: ['"title"', '"text"', '"'], etag: '"}'};
    var r = {stag: ['"ownerText"', '"text"', '"'], etag: '"'};
    var n = /\\u(\d{4})/g;
    var k = /\\"/g;
    while (true) {
        this._strings.findNext(g, m);
        if (m.match == undefined) {
            break;
        }
        var e = '';
        var o = '';
        var a = {};
        var j = m.match;
        a.link = 'https://youtube.com/watch?v=' + j;
        c.spos = m.spos;
        this._strings.findNext(g, c);
        if (c.match) {
            e = c.match.replace('\\u0026', '&#038;');
        }
        f.spos = c.spos;
        this._strings.findNext(g, f);
        if (f.match) {
            a.title = f.match.replace(n, function (t, i) {
                return '&#x' + parseInt(i, 10) + ';';
            });
            a.title = a.title.replace(k, '"');
        }
        r.spos = f.spos;
        this._strings.findNext(g, r);
        if (r.match) {
            a.author = r.match;
        }
        var b = '';
        b += '<entry>\n';
        b += '<title><![CDATA[' + a.title + ']]></title>\n';
        b += '<yt:videoId>' + j + '</yt:videoId>\n';
        b += '<link type="text/html" rel="alternate" href="' + a.link + '"/>\n';
        b += '<author><name><![CDATA[' + (a.author || '') + ']]></name></author>\n';
        b += '<media:group>\n';
        b += '<media:thumbnail url="' + e + '"/>\n';
        b += '<media:description><![CDATA[' + o + ']]></media:description>\n';
        b += '</media:group>\n';
        b += '</entry>\n';
        var s = {};
        s.element = b;
        h.push(s);
    }
    for (var p = 0; p < h.length; p++) {
        q += h[p].element;
    }
    q += '</feed>';
    return q;
};
var feedbro = feedbro || {};
feedbro.Youtube = function () {
};
feedbro.Youtube.process = function () {
    $('div.youtubevideo:not([data-processed])').each(function (a, b) {
        b.setAttribute('data-processed', 'true');
        b.onclick = function () {
            var d = document.createElement('div');
            d.setAttribute('class', 'youtubevideocontainer');
            var c = document.createElement('iframe');
            c.setAttribute('class', 'youtubevideoiframe');
            var e = this.getAttribute('data-link');
            if (e && e != '') {
                c.setAttribute('src', e);
            } else {
                c.setAttribute('src', 'https://www.youtube.com/embed/' + this.id + '?autoplay=1&autohide=1');
            }
            c.setAttribute('allowfullscreen', 'true');
            c.setAttribute('frameborder', '0');
            d.appendChild(c);
            this.parentNode.replaceChild(d, this);
        };
    });
};
